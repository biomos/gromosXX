TITLE
  XX Library file for ene_ana
END
ENEVERSION
  2023-04-15
END
ENERTRJ
# block definition for the energy trajectory file.
# which is specified by the input flag en_files of program ene_ana.
#
# Use keyword 'block' to specify the blocks
#             'subblock' to specify name and dimensions of a set of data
#             'size' to specify a size that should be read in from the file
#                    this size can be used as dimension specification
#                    in a subblock definition. Using the prefix 'matrix_'
#                    with such a definition will expand the size N to
#                    N*(N+1)/2
#
# Following is the definition for a gromosXX energy trajectory
#
  block TIMESTEP
    subblock TIME 2 1
  block ENERGY03
    subblock ENER 50 1
    size NUM_BATHS
    subblock KINENER NUM_BATHS 3
    size NUM_ENERGY_GROUPS
    subblock BONDED NUM_ENERGY_GROUPS 5
    subblock NONBONDED matrix_NUM_ENERGY_GROUPS 6
    subblock SPECIAL NUM_ENERGY_GROUPS 12
    size NUM_EDS_STATES
    subblock EDS NUM_EDS_STATES 6
    size NUM_GAMD_GROUPS
    subblock GAMD NUM_GAMD_GROUPS 5 
    size NUM_LAMBDAS
    subblock PRECALCLAM NUM_LAMBDAS 12
    subblock ABDIH 1 2
  block VOLUMEPRESSURE03
    subblock MASS 1 1
    size NUM_BATHS
    subblock TEMPERATURE  NUM_BATHS 4
    subblock VOLUME 10 1
    subblock PRESSURE 30 1
END
FRENERTRJ
# block definition for the free energy trajectory file.
# which is specified by the input flag fr_files of program ene_ana.
#
# syntax as for the ENERTRJ definition
#
# Following is the definition for a gromosXX free energy trajectory.
#
  block TIMESTEP
    subblock TIME 2 1
  block FREEENERDERIVS03
    subblock RLAM 1 1
    subblock FREEENER 50 1
    size NUM_BATHS
    subblock FREEKINENER NUM_BATHS 3
    size NUM_ENERGY_GROUPS
    subblock FREEBONDED NUM_ENERGY_GROUPS 5
    subblock FREENONBONDED matrix_NUM_ENERGY_GROUPS 6
    subblock FREESPECIAL NUM_ENERGY_GROUPS 12
    size NUM_EDS_STATES
    subblock FREEEDS NUM_EDS_STATES 6
    size NUM_GAMD_GROUPS
    subblock FREEGAMD NUM_GAMD_GROUPS 5 
    size NUM_LAMBDAS
    subblock FREEPRECALCLAM NUM_LAMBDAS 12
    subblock FREEABDIH 1 2
END
VARIABLES
# Here you can define variables to be calculated by the program ene_ana
# In principal the program refers to the blocknames you have defined above,
# accessing individual element using array indices (one- or two-dimensional)
#
# Predefined as well is the Boltzmann constant (as BOLTZ = 0.00831441) and
# the MASS which (if not present in the energy trajectory) will be calculated
# from the topology (if inputflag @topo is given).
#
# Additional properties can be defined here as a direct mapping of a known 
# property or as an expression of such properties. Make sure that variables
# and operators are always seperated by spaces. Multi-line expressions are
# allowed.
#
# Examples that work with the standard gromos96 definition are
#          given below and are actually standardly define if no library
#          file is specified.
time   = TIME[2]
dvdl   = FREEENER[3]
totene = ENER[1]
totkin = ENER[2]
totpot = ENER[3]
totcov = ENER[4]
totbond = ENER[5]
totangle = ENER[6]
totimproper = ENER[7]
totdihedral = ENER[8]
totcrossdihedral = ENER[9]
totnonbonded = ENER[10]
totlj = ENER[11]
totcrf = ENER[12]
totls = ENER[13]
totlspair = ENER[14]
totlsreal = ENER[15]
totlsk = ENER[16]
totlsa = ENER[17]
totlsself = ENER[18]
totlssurf = ENER[19]
totpolself = ENER[20]
totspecial = ENER[21]
totsasa = ENER[22]
totsasavol = ENER[23]
totconstraint = ENER[24]
totdisres = ENER[25]
totdisfieldres = ENER[26]
totdihres = ENER[27]
totposres = ENER[28]
totjval = ENER[29]
totxray = ENER[30]
totle = ENER[31]
totorder = ENER[32]
totsymm = ENER[33]
eds_vmix = ENER[34]
eds_vr = ENER[35]
free_eds_vr = FREEENER[35]
eds_emax = ENER[36]
eds_emin = ENER[37]
eds_globmin = ENER[38]
eds_globminfluc = ENER[39]
e1 = EDS[1][1]
e2 = EDS[2][1]
e3 = EDS[3][1]
e4 = EDS[4][1]
e5 = EDS[5][1]
e6 = EDS[6][1]
e7 = EDS[7][1]
e8 = EDS[8][1]
e9 = EDS[9][1]
e10 = EDS[10][1]
e11 = EDS[11][1]
e12 = EDS[12][1]
e13 = EDS[13][1]
e14 = EDS[14][1]
e15 = EDS[15][1]
e16 = EDS[16][1]
e17 = EDS[17][1]
e18 = EDS[18][1]
e19 = EDS[19][1]
e20 = EDS[20][1]
e21 = EDS[21][1]
e22 = EDS[22][1]
e23 = EDS[23][1]
e24 = EDS[24][1]
e25 = EDS[25][1]
e26 = EDS[26][1]
e1s = EDS[1][1] - EDS[1][4]
e2s = EDS[2][1] - EDS[2][4]
e3s = EDS[3][1] - EDS[3][4]
e4s = EDS[4][1] - EDS[4][4]
e5s = EDS[5][1] - EDS[5][4]
e6s = EDS[6][1] - EDS[6][4]
e7s = EDS[7][1] - EDS[7][4]
e8s = EDS[8][1] - EDS[8][4]
e9s = EDS[9][1] - EDS[9][4]
e10s = EDS[10][1] - EDS[10][4]
e11s = EDS[11][1] - EDS[11][4]
e12s = EDS[12][1] - EDS[12][4]
e13s = EDS[13][1] - EDS[13][4]
e14s = EDS[14][1] - EDS[14][4]
e15s = EDS[15][1] - EDS[15][4]
e16s = EDS[16][1] - EDS[16][4]
e17s = EDS[17][1] - EDS[17][4]
e18s = EDS[18][1] - EDS[18][4]
e19s = EDS[19][1] - EDS[19][4]
e20s = EDS[20][1] - EDS[20][4]
e21s = EDS[21][1] - EDS[21][4]
e22s = EDS[22][1] - EDS[22][4]
e23s = EDS[23][1] - EDS[23][4]
e24s = EDS[24][1] - EDS[24][4]
e25s = EDS[25][1] - EDS[25][4]
e26s = EDS[26][1] - EDS[26][4]
e1r = EDS[1][4]
e2r = EDS[2][4]
e3r = EDS[3][4]
e4r = EDS[4][4]
e5r = EDS[5][4]
e6r = EDS[6][4]
e7r = EDS[7][4]
e8r = EDS[8][4]
e9r = EDS[9][4]
e10r = EDS[10][4]
e11r = EDS[11][4]
e12r = EDS[12][4]
e13r = EDS[13][4]
e14r = EDS[14][4]
e15r = EDS[15][4]
e16r = EDS[16][4]
e17r = EDS[17][4]
e18r = EDS[18][4]
e19r = EDS[19][4]
e20r = EDS[20][4]
e21r = EDS[21][4]
e22r = EDS[22][4]
e23r = EDS[23][4]
e24r = EDS[24][4]
e25r = EDS[25][4]
e26r = EDS[26][4]
entropy = ENER[40]
totqm = ENER[41]
totbsleus = ENER[42]
totrdc = ENER[43]
totangres = ENER[44]
nnvalid = ENER[45]
totene_shift = ENER[46]
totene_phys = ENER[47]
eds_vr_shift = ENER[48]
eds_vr_phys = ENER[49]
totgamd_dV = ENER[50]
gamd_dV1 = GAMD[2][5]
gamd_ed1 = GAMD[2][1]
gamd_et1 = GAMD[2][2]
gamd_kd1 = GAMD[2][3]
gamd_kt1 = GAMD[2][4]
gamd_dV2 = GAMD[3][5]
gamd_ed2 = GAMD[3][1]
gamd_et2 = GAMD[3][2]
gamd_kd2 = GAMD[3][3]
gamd_kt2 = GAMD[3][4]
# calculate the pressure in atm.
pressu = PRESSURE[1] * 16.388453
boxvol = VOLUME[1]
# calculate the density in kg/m^3
densit = MASS[1] * 1.66056 / VOLUME[1]
# free energy
totfren = FREEENER[1]
totfrpot = FREEENER[3]
eds_dvdl = dvdl + free_eds_vr
#
# temperature (2 baths)
solutemp2 = TEMPERATURE[1][1]
solvtemp2 = TEMPERATURE[2][1]
#
# example for 3 baths, first internal / rotational
# second molecular translational temperature
irtemp3 = TEMPERATURE[1][1]
mttemp3 = TEMPERATURE[2][1]
solvtemp3 = TEMPERATURE[3][1]
#
# Example: Heat of vaporization (Hvap)
#
# Neglecting quantum corrections for rigid bonds
# and intermolecular vibrational energies,
# Hvap can be estimated as
#
# Hvap = Ugas - Uliq + RT
#
# where Ugas and Uliq are the total potential energies
# of a single molecule in the gas and liquid phase, respectively, 
# R denotes the gas constant and T the absolute temperature.
# To calculate Hvap from an energy trajectory obtained 
# from a condensed phase simulation, Ugas = GASENER 
# has to be provided (e.g. from a separate simulation)
# along with the number of molecules, NUMMOL, in the box  
# and the temperature TEMP, e.g:
#
# TEMP = 300.0
# GASENER = 0
# NUMMOL = 512
# hvap = GASENER - ENER[3] / NUMMOL + BOLTZ * TEMP
# 
# Alternatively the temperature can be made available 
# from the appropriate entry in the TEMPERATURE 
# subblock.
#
# VISCOSITY (used by visco program)
diagP1 = PRESSURE[4]
diagP2 = PRESSURE[8]
diagP3 = PRESSURE[12]
offP1 = PRESSURE[5]
offP2 = PRESSURE[6]
offP3 = PRESSURE[9]
offP4 = PRESSURE[7]
offP5 = PRESSURE[10]
offP6 = PRESSURE[11]
END 

