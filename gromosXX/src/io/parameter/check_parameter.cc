/**
 * @file check_parameter.cc
 * check those parameters
 */

#include "../../stdheader.h"

#include "../../algorithm/algorithm.h"
#include "../../topology/topology.h"
#include "../../simulation/simulation.h"
#include "../../configuration/configuration.h"
#include "../../simulation/parameter.h"

#include "../../io/parameter/check_parameter.h"
#include "../../util/feature.h"

#ifdef OMP
#include <omp.h>
#endif

#undef MODULE
#undef SUBMODULE
#define MODULE io
#define SUBMODULE parameter


int io::check_parameter(simulation::Simulation &sim){
  int check1 = simple_crosschecks(sim);
  int check2 = check_features(sim);
  if (check1 || check2){
    return -1;
  }
  else{
    return 0;
  }
}

int io::simple_crosschecks(simulation::Simulation & sim) {

  const simulation::Parameter & param = sim.param();

  // no velocity writeout or generation with energy minimization
  if (param.minimise.ntem != 0 && param.write.velocity != 0)
    io::messages.add("WRITETRAJ: NTWV has to be 0 for energy minimization.",
                     "In_Parameter", io::message::error);

  if (param.start.generate_velocities && param.minimise.ntem)
    io::messages.add("INITIALISE block: NTIVEL=1 even though we do an energy minimization",
                     "In_Parameter", io::message::warning);

  // no pressure or temperature coupling with energy minimization
  if (param.pcouple.calculate && param.minimise.ntem)
      io::messages.add("PRESSURESCALE block: pressure coupling not allowed with steepest descent or conjugate gradient minimization",
                       "In_Parameter", io::message::error);

  if (param.multibath.couple && param.minimise.ntem && !param.eds.eds)
      io::messages.add("MULTIBATH block: temperature coupling not allowed with eds",
                       "In_Parameter", io::message::error);

  // no reading of atomic shift vectors in vacuum
  if (param.boundary.boundary == math::vacuum && param.start.read_lattice_shifts)
      io::messages.add("Atomic shift vector reading (NTISHI=0) not possible under vacuum boundary conditions.",
                       "In_Parameter", io::message::error);

  // free-energy trajectories are useless if there is no perturbation
  if (!param.perturbation.perturbation && param.write.free_energy>0)
      io::messages.add("NTWG>0: free-energy trajectory writing even though perturbation is off.",
                       "In_Parameter", io::message::warning);

  // generating nose-hoover chain thermostat variables not allowed when not using
  // the corresponding algorithm
  if (!param.start.read_nosehoover_chains && param.multibath.algorithm<2)
      io::messages.add("MULTIBATH block: NTINHT must be 0 when not using Nose-Hoover chains for temperature coupling",
                       "In_Parameter", io::message::error);

  // no scaling of reference positions when pressure scaling is off
  if (param.pcouple.scale == math::pcouple_off && param.posrest.scale_reference_positions)
      io::messages.add("POSITIONRES block: NTPORS=1 can not be used when pressure scaling is off.",
                       "In_Parameter", io::message::error);

  // center of mass removal and roto-translational constraints should not be used together
  if (param.rottrans.rottrans && param.centreofmass.skip_step != 0)
      io::messages.add("ROTTRANS or COMTRANSROT should not be used at the same time.",
                       "In_Parameter", io::message::warning);

  // trajectory analysis not allow with vacuum
  if (param.boundary.boundary == math::vacuum && param.analyze.analyze)
      io::messages.add("READTRAJ block: not allowed with vacuum boundary conditions.", "In_Parameter",
                       io::message::error);

  // do not try to generate velocities or shake velocities with trajectory analysis
  if (param.analyze.analyze && (param.start.generate_velocities or param.start.shake_vel))
      io::messages.add("READTRAJ block: requires NTIVEL=0 and NTISHK=0,1.", "In_Parameter",
                       io::message::error);
                       
  // do not write velocity trajectory when doing trajectory analysis
  if (param.analyze.analyze && param.write.velocity!=0)
      io::messages.add("READTRAJ block requires NTWV=0.", "In_Parameter",
                       io::message::error);
  
  // no generation of stochastic integrals when stochastic dynamics is off
  if (param.stochastic.generate_integral && param.stochastic.sd==0)
      io::messages.add("STOCHDYN block: if stochastic dynamics is off, NTISTI has to be set to 0",
                       "In_Parameter", io::message::error);

  // perturbation
  if (param.montecarlo.mc && !param.perturbation.perturbation) {
      io::messages.add("CHEMICALMONTECARLO only possible if perturbation is on."
                       " Set NTG to 1.",
                       "In_Parameter", io::message::error);
  }

  // Multicell with polarization mey converge differently
  if (param.polarise.cos && param.multicell.multicell) {
      io::messages.add("MULTICELL block: multiple unit cell simulation using polarisation may "
                       "converge differently. Use a small MINFIELD parameter.",
                       "In_Parameter", io::message::warning);
  }

  // EDS: make sure we simulate at a given temperature (unambiguous kT)
    if (param.eds.eds && !(param.multibath.couple || param.stochastic.sd)) {
        io::messages.add("EDS/AEDS block: EDS requires temperature coupling or SD.",
                               "In_Parameter", io::message::error);
    }

    // check whether all baths have the same temperature (unambiguous kT)
    if (param.eds.eds){
      for (unsigned int i = 1; i < param.multibath.multibath.size(); i++) {
              if (param.multibath.multibath.bath(i).temperature !=
                  param.multibath.multibath.bath(0).temperature) 
              {
                  io::messages.add("EDS/AEDS block: all baths must have the same temperature.",
                                   "In_Parameter", io::message::error);
                  break;
              }
      }
      
      if (!((param.multibath.couple && param.multibath.multibath.bath(0).temperature != 0) 
           || (param.stochastic.sd && param.stochastic.temp != 0))) {
        io::messages.add("MULTIBATH block: baths must have non zero temperature with EDS.", 
                          "In_Parameter", io::message::error); 
      } 
      
    }
    
    // Restrict EDS and conjugate gradients:
    if (param.eds.eds &&  (sim.param().minimise.ntem == 2 || sim.param().minimise.ntem == 3)){
      io::messages.add("ENERGYMIN block: Cannot run EDS and conjugate gradients. Please change value of NTEM", 
                       "In_Parameter", io::message::error);
    }


    // lattice shift and pressure coupling:
    if (param.pcouple.scale != math::pcouple_off
        && param.nonbonded.method == simulation::el_p3m
        && param.nonbonded.accuracy_evaluation == 0)
        io::messages.add("NONBONDED block: Pressure scaling but no quality evaluation of influence function."
                         " Set NQEVAL > 0.", "In_Parameter", io::message::warning);

    if (param.pcouple.scale == math::pcouple_full_anisotropic
        && (param.nonbonded.method == simulation::el_p3m || param.nonbonded.method == simulation::el_ewald)) {
        io::messages.add("NONBONDED block: Full anisotropic pressure scaling "
                         "could not be tested yet.", "In_Parameter", io::message::warning);
    }
    
    // pressure scaling and boundary conditions
    if (param.pcouple.scale == math::pcouple_full_anisotropic && param.boundary.boundary != math::triclinic)
        io::messages.add("PRESSURESCALE block: full anisotropic pressure scaling requires a triclinic box.",
                         "In_Parameter", io::message::error);
    if ((param.pcouple.scale == math::pcouple_anisotropic || param.pcouple.scale == math::pcouple_semi_anisotropic)
       && (param.boundary.boundary != math::triclinic && param.boundary.boundary != math::rectangular))
        io::messages.add("PRESSURESCALE block: (semi-)anisotropic pressure scaling requires a rectangular or triclinic box.",
                         "In_Parameter", io::message::error);

    // pressure scaling or calculation and trajectory reading mode
    if (param.analyze.analyze && param.pcouple.scale != math::pcouple_off) {
        io::messages.add("PRESSURESCALE block: Pressure scaling in trajectory reading mode will lead"
                         "to unexpected results.", "In_Parameter", io::message::warning);
    }
    if (param.analyze.analyze && param.pcouple.calculate) {
        io::messages.add("PRESSURESCALE block: pressure calculation in trajectory reading\n\tmode will yield only the virial "
                         "contribution.", "In_Parameter", io::message::warning);
    }

    // warnings for trajectory writing frequencies with trajectory reading mode
    if (param.analyze.analyze){
      if (param.write.energy != 0 && (abs(param.write.energy) % param.analyze.stride != 0)) {
            io::messages.add("WRITETRAJ block: NTWE is not equal to or a multiple of NTSTR (anatrj),\n"
                                 "\tWe can not write out more frequently or at a different frequency\n"
                                 "\tthan the one of the input coordinate trajectory!",
                                 "In_Parameter", io::message::warning);
      }
      if (param.write.position != 0 && (abs(param.write.position) % param.analyze.stride != 0)) {
            io::messages.add("WRITETRAJ block: NTWX is not equal to or a multiple of NTSTR (anatrj),\n"
                                 "\tWe can not write out more frequently or at a different frequency\n"
                                 "\tthan the one of the input coordinate trajectory!",
                                 "In_Parameter", io::message::warning);
      }
      if (param.write.free_energy != 0 && (abs(param.write.free_energy) % param.analyze.stride != 0)) {
            io::messages.add("WRITETRAJ block: NTWG is not equal to or a multiple of NTSTR (anatrj),\n"
                                 "\tWe can not write out more frequently or at a different frequency\n"
                                 "\tthan the one of the input coordinate trajectory!",
                                 "In_Parameter", io::message::warning);
      }
      if (param.write.force != 0 && (abs(param.write.force) % param.analyze.stride != 0)) {
            io::messages.add("WRITETRAJ block: NTWF is not equal to or a multiple of NTSTR (anatrj)\n"
                                 "\tWe can not write out more frequently or at a different frequency\n"
                                 "\tthan the one of the input coordinate trajectory!",
                                 "In_Parameter", io::message::warning);
      }
      if (param.write.block_average != 0 && (abs(param.write.block_average) % param.analyze.stride != 0)) {
            io::messages.add("WRITETRAJ block: NTWB is not equal to or a multiple of NTSTR (anatrj)\n"
                                 "\tWe can not write out more frequently or at a different frequency\n"
                                 "\tthan the one of the input coordinate trajectory!",
                                 "In_Parameter", io::message::warning);
      }
    }
    
    // warn if Hamiltonian repex but no perturbation
    if (param.replica.num_l > 1 && !param.perturbation.perturbation && !param.reeds.reeds)
        io::messages.add("REPLICA block: Hamiltonian replica exchange but perturbation is off.",
                         "In_Parameter", io::message::warning);
  
      // warn if Hamiltonian reeds but no perturbation or no eds
      // CHANGED This is caught in read_input.cc if there is no pertubation file , error is thrown
      if (param.reeds.reeds && param.replica.num_l > 1 && param.perturbation.perturbation  )
          io::messages.add("REPLICA block: Hamiltonian replica exchange for RE-EDS, but perturbation is on.",
                           "In_Parameter", io::message::warning);
  
          // warn if Hamiltonian reeds but no eds
    if (param.reeds.reeds && param.replica.num_l > 1 && !param.eds.eds )
        io::messages.add("REPLICA block: Hamiltonian replica exchange for RE-EDS, but eds is off.",
                         "In_Parameter", io::message::warning);

    // extended TI input
    if (param.perturbation.perturbation == false && param.precalclam.nr_lambdas > 0)
      io::messages.add("PRECALCLAM cannot be on without perturbation",
            "In_Parameter", io::message::error);
    if (param.precalclam.nr_lambdas > 0 && (param.write.energy == 0 || param.write.free_energy ==0 || 
        param.write.energy != param.write.free_energy))
      io::messages.add("PRECALCLAM requires NTWE=NTWG > 0", 
            "In_Parameter", io::message::error);
  
    // Allow no QMMM cutoff only with the vacuum PBC
    if (param.qmmm.qmmm > simulation::qmmm_mechanical
        && param.qmmm.cutoff == 0.0
        && param.boundary.boundary != math::vacuum) {
      io::messages.add("QMMM block: RCUTQM = 0.0 is allowed only with vacuum boundary conditions"
              , "In_Parameter", io::message::error);
    }
    // The QMMM cutoff should be greater than longrange cutoff, otherwise the MM atoms could
    // see a void in a place of QM zone periodic image
    if (param.qmmm.qmmm
        && param.boundary.boundary != math::vacuum
        && param.qmmm.cutoff < param.pairlist.cutoff_long) {
      io::messages.add("QMMM block: RCUTQM should not be less than RCUTL while using PBC"
              , "In_Parameter", io::message::error);
    }
    // QMMM energy cannot be split atomwise, thus energy groups including QM zone are incomplete
    if (param.qmmm.qmmm && param.force.energy_group.size() > 1) {
      io::messages.add("QMMM block: Energy groups will not contain QM contribution",
                         "In_Parameter", io::message::warning);
    }
    // Polarisable QMMM should be only used with polarisable FF
    if (param.qmmm.qmmm == simulation::qmmm_polarisable && !param.polarise.cos) {
      io::messages.add("QMMM block: polarisable embedding but FF is non-polarisable",
                         "In_Parameter", io::message::error);
    }
    // Polarisable FF should be only used with polarisable QMMM
    if (param.polarise.cos
        && param.qmmm.qmmm
        && param.qmmm.qmmm != simulation::qmmm_polarisable) {
      io::messages.add("QMMM block: polarisable FF can be used only with polarisable embedding",
                         "In_Parameter", io::message::error);
    }
    // We cannot automatically apply external electric field on the QM zone
    // It's user's responsibility to include it in the header for QM program
    if (param.qmmm.qmmm > simulation::qmmm_mechanical
      && param.electric.electric) {
      io::messages.add("QMMM block: ELECTRIC block is applied on MM atoms only"
                      , "In_Parameter", io::message::warning);
    }
    // If user wants to keep QM constraints, check, if they are on
    if (param.qmmm.qm_constraint && param.constraint.ntc < 2) {
      io::messages.add("QMMM block: constraints in QM requested, but no solute constraints enabled"
                      , "In_Parameter", io::message::error);
    }

  if (io::messages.contains(io::message::error) ||
      io::messages.contains(io::message::critical))
    return -1;
  else
    return 0;
}

int io::check_features(simulation::Simulation  &sim)
{
  const simulation::Parameter & param = sim.param();
  std::vector<util::Feature> features;

  // this macro function is needed by the contrib script to automatically
  // unlock features. Only features added with this add function are recognized
  // by the script!
#define add(x, y, z) features.push_back(util::Feature((x), (y), (z)))

  // Add all features of GROMOS that you want to cross check using the
  // "add" macro.

  // SYSTEM block
  add("solute", "solute simulation", param.system.npm == 1);
  add("solvent", "solvent simulation", param.system.nsm > 0);
  add("solvent_only", "solvent only simulation", param.system.npm == 0 &&
                                                 param.system.nsm > 0);
  // ENERGYMIN block
  add("steepest_descent", "steepest descent energy minimisation",
          param.minimise.ntem == 1);
  add("conjugate_gradient", "Fletcher-Reeves or Polak-Ribiere conjugate gradient energy minimisation",
          param.minimise.ntem == 2 ||
          param.minimise.ntem == 3);
  // CONSTRAINT block
  add("solute_constraint_off", "unconstrained solute",
          param.constraint.solute.algorithm == simulation::constr_off);
  add("solute_shake", "SHAKE for solute",
          param.constraint.solute.algorithm == simulation::constr_shake);
  add("solute_lincs", "LINCS for solute",
          param.constraint.solute.algorithm == simulation::constr_lincs);
  add("solute_flexshake", "flexible SHAKE for solute",
          param.constraint.solute.algorithm == simulation::constr_flexshake);
  add("solvent_constraint_off", "unconstrained solvent",
          param.constraint.solvent.algorithm == simulation::constr_off);
  add("solvent_shake", "SHAKE for solvent",
          param.constraint.solvent.algorithm == simulation::constr_shake);
  add("solvent_lincs", "LINCS for solvent",
          param.constraint.solvent.algorithm == simulation::constr_lincs);
  add("solvent_settle", "SETTLE for solvent",
          param.constraint.solvent.algorithm == simulation::constr_settle);
  // PRESSURESCALE block
  add("pressure_calculation", "pressure calculation", param.pcouple.calculate);
  add("pressure_scale_berendsen", "Berendsen barostat", param.pcouple.scale != math::pcouple_off);
  add("virial_off", "no virial calculation", param.pcouple.virial == math::no_virial);
  add("virial_atomic", "atomic virial", param.pcouple.virial == math::atomic_virial);
  add("virial_molecular", "molecular virial", param.pcouple.virial == math::molecular_virial);
  // BOUNDCOND block
  add("vacuum", "vacuum simulation", param.boundary.boundary == math::vacuum);
  add("pbc_r", "rectangular PBC", param.boundary.boundary == math::rectangular);
  add("pbc_c", "triclinic PBC", param.boundary.boundary == math::triclinic);
  add("pbc_t", "truncated octahedral PBC", param.boundary.boundary == math::truncoct);
  // PERTURBATION block
  add("perturbation", "free energy perturbation", param.perturbation.perturbation);
  add("perturbation_scaling", "perturbation scaling", param.perturbation.scaling);
  add("slow_growth", "slow growth", param.perturbation.perturbation &&
                                    param.perturbation.dlamt > 0.0);

  // LAMBDAS block
  add("individual_lambdas", "individual lambdas", param.lambdas.individual_lambdas);
  
  // ANITA
  // add(key,description,bool(active))
  // PRECALCLAM block
  add("precalculate_lambdas","precalculate at other lambdas", param.precalclam.nr_lambdas > 0);
  // end ANITA

  // FORCE block
  add("bond", "bond interaction", param.force.bond == 1);
  add("angle", "bond angle interaction", param.force.angle == 1);
  add("dihedral", "dihedral interaction", param.force.dihedral == 1);
  add("improper", "improper dihedral interaction", param.force.improper == 1);
  add("crf", "coulomb reaction field interaction", param.force.nonbonded_crf == 1);
  add("lj", "Lennard-Jones interaction", param.force.nonbonded_vdw == 1);
  // COMTRANSROT block
  add("com_removal", "COM motion removal", param.centreofmass.remove_rot ||
                                           param.centreofmass.remove_trans);
  // LONGRANGE block
  add("rf_excluded", "reaction field for excluded pairs", param.nonbonded.rf_excluded);
  // PAIRLIST block
  add("pairlist_standard", "standard pairlist algorithm", param.pairlist.grid == 0);
  add("pairlist_grid", "grid-based pairlist algorithm", param.pairlist.grid == 1);
  add("pairlist_gridcell", "grid-cell-based pairlist algorithm", param.pairlist.grid == 2);
  add("cutoff_atomic", "atomic cutoff", param.pairlist.atomic_cutoff);
  add("cutoff_cg", "chargegroup based cutoff", !param.pairlist.atomic_cutoff);
  // CGRAIN block
  add("cg_martini", "coarse-grained simulation", param.cgrain.level == 1);
  add("cg_gromos", "coarse-grained simulation", param.cgrain.level == 2);
  add("mixed_grain", "mixed-grained simulation", param.cgrain.level == 3);

  // MULTIBATH block
  add("temp_berendsen", "Berendsen thermostat", param.multibath.algorithm == 0);
  add("temp_nosehoover", "Nose-Hoover thermostat", param.multibath.algorithm == 1);
  add("temp_nosehoover_chains", "Nose-Hoover chains thermostat",
          param.multibath.algorithm == 2);
  // POSITIONRES block
  add("position_rest", "position restraints", param.posrest.posrest != simulation::posrest_off &&
                                              param.posrest.posrest != simulation::posrest_const);
  add("position_const", "position constraints without reference position scaling",
      param.posrest.posrest == simulation::posrest_const &&
      !param.posrest.scale_reference_positions);
  add("position_const_scaled", "position constraints with reference position scaling",
      param.posrest.posrest == simulation::posrest_const &&
      param.posrest.scale_reference_positions);
  // DISTANCERES block
  add("distance_rest", "distance restraints", param.distanceres.distanceres != 0);
  // DISTANCEFIELD block
  add("distance_field", "distance field restraint", param.distancefield.distancefield != 0);
  // ANGLERES block
  add("angle_rest", "angle restraints", param.angrest.angrest != simulation::angle_restr_off &&
                                              param.angrest.angrest != simulation::angle_constr);
  add("angle_const", "angle constraints", param.angrest.angrest == simulation::angle_constr);
  // DIHEDRALRES block
  add("dihedral_rest", "dihedral restraints", param.dihrest.dihrest != simulation::dihedral_restr_off &&
                                              param.dihrest.dihrest != simulation::dihedral_constr);
  add("dihedral_const", "dihedral constraints", param.dihrest.dihrest == simulation::dihedral_constr);
  // JVALUERES block
  add("jvalue_rest", "J-value restraints", param.jvalue.mode != simulation::jvalue_restr_off);
  // RDC block
  add("rdc_rest", "RDC restraints", param.rdc.mode != simulation::rdc_restr_off);
  // PERSCALE block
  add("perscale", "periodic scaling", param.pscale.jrest);
  // ROTTRANS block
  add("rottrans", "roto-translational constraints", param.rottrans.rottrans);
  // INNERLOOP block
  add("innerloop_method_off", "standard solvent loop", param.innerloop.method == simulation::sla_off);
  add("innerloop_method_generic", "generic fast solvent loop", param.innerloop.method == simulation::sla_generic);
  add("innerloop_method_hardcode", "hardcoded solvent loop", param.innerloop.method == simulation::sla_hardcode);
  add("innerloop_method_table", "tabulated solvent loop", param.innerloop.method == simulation::sla_table);
  add("innerloop_method_cuda", "CUDA solvent loop", param.innerloop.method == simulation::sla_cuda);
  add("innerloop_solvent_topology", "topology solvent", param.innerloop.solvent == simulation::sls_topo);
  add("innerloop_solvent_spc", "SPC solvent", param.innerloop.solvent == simulation::sls_spc);
  // REPLICA block
  add("repex_temp", "temperature replica exchange", param.replica.num_T > 1);
  add("repex_lambda", "lambda replica exchange", param.replica.num_l > 1);
  // MULTICELL block
  add("multicell", "multiple unit cell simulation", param.multicell.multicell);
  // REPLICA_EDS block 
  //add("reeds", "Replica exchange - enveloped distribution sampling  ", param.reeds.reeds == 1); //Todo: could be valuable? bschroed

  // READTRAJ block
  add("analysis", "trajectory reading mode", param.analyze.analyze);
  // INTEGRATE block
  add("no_integration", "integration disabled", param.integrate.method == simulation::integrate_off);
  // STOCHDYN block
  add("stochdyn", "stochastic dynamics", param.stochastic.sd != 0);
  // MULTISTEP block
  add("multistep", "multistep", param.multistep.steps != 1);
  add("multistep_boost", "boost method for multiple steps", param.multistep.boost);
  // MONTECARLO block
  add("montecarlo", "chemical monte-carlo", param.montecarlo.mc);
  // POLARISE block
  add("polarisation_cos", "COS polarisation", param.polarise.cos &&
                                              !param.polarise.damp);
  add("polarisation_cos_damped", "COS polarisation", param.polarise.cos &&
                                                     param.polarise.damp);
  // SASA block
  add("sasa", "SASA implicit solvent model",  param.sasa.switch_sasa == true &&
          param.sasa.switch_volume == 0);
  add("sasavol", "SASA/VOL implicit solvent model", param.sasa.switch_volume == true &&
          param.sasa.sigma_v != 0.0);
  // RANDOMNUMBERS block
  add("random_gromos", "GROMOS96 random numbers",
          param.rng.rng == simulation::random_g96);
  add("random_gsl", "GROMOS96 random numbers",
          param.rng.rng == simulation::random_gsl);
  // EDS/AEDS block
  add("eds", "Enveloping distribution sampling", param.eds.eds == 1);
  add("aeds", "Accelerated enveloping distribution sampling", param.eds.eds == 2);
  add("multiaeds", "multi-site accelerated enveloping distribution sampling", param.eds.eds == 3);
  // QMMM block
  add("qmmm", "QMMM multiscale simulation", param.qmmm.qmmm);
  // AMBER topology
  add("amber", "AMBER topology", param.amber.amber);
  // parallelization
  add("parallel_mpi", "MPI parallelization", sim.mpi);
  int size = 1;
#ifdef OMP
    int tid = 0;
#pragma omp parallel private(tid)
    {
      tid = omp_get_thread_num();
      if (tid == 0){
	size = omp_get_num_threads();
      }
    }
#endif
  add("parallel_omp", "OpenMP parallelization", size > 1);

  // multiple energy groups
  add("mult_energy_groups", "multiple energy groups", param.force.energy_group.size() > 1);

  // lattice sum: Ewald
  add("ewald", "Ewald sum electrostatics.\n"
      "    If this is changed in the future, line 2534 in\n"
      "    out_configuration.cc needs to be adapted",
      param.nonbonded.method == simulation::el_ewald);

  // lattice sum: P3M
  add("p3m", "P3M electrostatics.\n"
      "    If this is changed in the future, line 2534 in\n"
      "    out_configuration.cc needs to be adapted",
      param.nonbonded.method == simulation::el_p3m);

  add("leus", "local elevation umbrella sampling", param.localelev.localelev != simulation::localelev_off);
  // BSLEUS block
  add("bsleus", "Balls and Sticks local elevation umbrella sampling",
          param.bsleus.bsleus != simulation::bsleus_off);
  add("xray", "X-ray restraints", param.xrayrest.xrayrest != simulation::xrayrest_off);

  // force groups
  add("force_groups", "force groups", param.force.force_groups);

  //VIRTUALATOMS block
  add("virtualatoms", "Virtual Atoms", param.virtualatoms.virtualatoms);

// we don't need the add function anymore.
#undef add

  util::FeatureChecker fc(features);

// unlock the features here. This can be very tedious. Use the script
// unlock_features.pl in the contrib directory to unlock your feature against
// all others and delete the lines you don't need. Make sure you don't unlock
// features that you didn't test or you don't know whether day really work.


  fc.unlock("solute", "solvent");
  fc.unlock("solute", "steepest_descent");
  fc.unlock("solute", "solute_constraint_off");
  fc.unlock("solute", "solute_shake");
  fc.unlock("solute", "solute_lincs");
  fc.unlock("solute", "solute_flexshake");
  fc.unlock("solute", "solvent_constraint_off");
  fc.unlock("solute", "solvent_shake");
  fc.unlock("solute", "pressure_calculation");
  fc.unlock("solute", "pressure_scale_berendsen");
  fc.unlock("solute", "virial_off");
  fc.unlock("solute", "virial_atomic");
  fc.unlock("solute", "virial_molecular");
  fc.unlock("solute", "vacuum");
  fc.unlock("solute", "pbc_r");
  fc.unlock("solute", "pbc_c");
  fc.unlock("solute", "pbc_t");
  fc.unlock("solute", "perturbation");
  fc.unlock("solute", "perturbation_scaling");
  fc.unlock("solute", "bond");
  fc.unlock("solute", "angle");
  fc.unlock("solute", "dihedral");
  fc.unlock("solute", "improper");
  fc.unlock("solute", "crf");
  fc.unlock("solute", "lj");
  fc.unlock("solute", "com_removal");
  fc.unlock("solute", "rf_excluded");
  fc.unlock("solute", "pairlist_standard");
  fc.unlock("solute", "pairlist_grid");
  fc.unlock("solute", "cutoff_atomic");
  fc.unlock("solute", "cg_martini");
  fc.unlock("solute", "cg_gromos");
  fc.unlock("solute", "mixed_grain");
  fc.unlock("solute", "temp_berendsen");
  fc.unlock("solute", "temp_nosehoover");
  fc.unlock("solute", "temp_nosehoover_chains");
  fc.unlock("solute", "position_rest");
  fc.unlock("solute", "position_const");
  fc.unlock("solute", "position_const_scaled");
  fc.unlock("solute", "distance_rest");
  fc.unlock("solute", "dihedral_rest");
  fc.unlock("solute", "dihedral_const");
  fc.unlock("solute", "jvalue_rest");
  fc.unlock("solute", "rdc_rest");
  fc.unlock("solute", "perscale");
  fc.unlock("solute", "rottrans");
  fc.unlock("solute", "repex_temp");
  fc.unlock("solute", "repex_lambda");
  fc.unlock("solute", "multicell");
  fc.unlock("solute", "analysis");
  fc.unlock("solute", "no_integration");
  fc.unlock("solute", "stochdyn");
  fc.unlock("solute", "multistep");
  fc.unlock("solute", "multistep_boost");
  fc.unlock("solute", "montecarlo");
  fc.unlock("solute", "polarisation_cos");
  fc.unlock("solute", "polarisation_cos_damped");
  fc.unlock("solute", "random_gromos");
  fc.unlock("solute", "random_gsl");
  fc.unlock("solute", "parallel_mpi");
  fc.unlock("solute", "parallel_omp");
  fc.unlock("solvent", "solvent_only");
  fc.unlock("solvent", "steepest_descent");
  fc.unlock("solvent", "solute_constraint_off");
  fc.unlock("solvent", "solute_shake");
  fc.unlock("solvent", "solute_lincs");
  fc.unlock("solvent", "solute_flexshake");
  fc.unlock("solvent", "solvent_constraint_off", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("solvent", "solvent_shake");
  fc.unlock("solvent", "pressure_calculation");
  fc.unlock("solvent", "pressure_scale_berendsen");
  fc.unlock("solvent", "virial_off");
  fc.unlock("solvent", "virial_atomic");
  fc.unlock("solvent", "virial_molecular");
  fc.unlock("solvent", "vacuum");
  fc.unlock("solvent", "pbc_r");
  fc.unlock("solvent", "pbc_c");
  fc.unlock("solvent", "pbc_t");
  fc.unlock("solvent", "perturbation");
  fc.unlock("solvent", "perturbation_scaling");
  fc.unlock("solvent", "bond");
  fc.unlock("solvent", "angle");
  fc.unlock("solvent", "dihedral");
  fc.unlock("solvent", "improper");
  fc.unlock("solvent", "crf");
  fc.unlock("solvent", "lj");
  fc.unlock("solvent", "com_removal");
  fc.unlock("solvent", "rf_excluded");
  fc.unlock("solvent", "pairlist_standard");
  fc.unlock("solvent", "pairlist_grid");
  fc.unlock("solvent", "cutoff_atomic");
  fc.unlock("solvent", "cg_martini");
  fc.unlock("solvent", "cg_gromos");
  fc.unlock("solvent", "mixed_grain");
  fc.unlock("solvent", "temp_berendsen");
  fc.unlock("solvent", "temp_nosehoover");
  fc.unlock("solvent", "temp_nosehoover_chains");
  fc.unlock("solvent", "position_rest");
  fc.unlock("solvent", "position_const");
  fc.unlock("solvent", "position_const_scaled");
  fc.unlock("solvent", "distance_rest");
  fc.unlock("solvent", "dihedral_rest");
  fc.unlock("solvent", "dihedral_const");
  fc.unlock("solvent", "jvalue_rest");
  fc.unlock("solvent", "rdc_rest");
  fc.unlock("solvent", "perscale");
  fc.unlock("solvent", "rottrans");
  fc.unlock("solvent", "repex_temp");
  fc.unlock("solvent", "repex_lambda");
  fc.unlock("solvent", "multicell");
  fc.unlock("solvent", "analysis");
  fc.unlock("solvent", "no_integration");
  fc.unlock("solvent", "multistep");
  fc.unlock("solvent", "multistep_boost");
  fc.unlock("solvent", "montecarlo");
  fc.unlock("solvent", "polarisation_cos");
  fc.unlock("solvent", "polarisation_cos_damped");
  fc.unlock("solvent", "random_gromos");
  fc.unlock("solvent", "random_gsl");
  fc.unlock("solvent", "parallel_mpi");
  fc.unlock("solvent", "parallel_omp");
  fc.unlock("solvent_only", "steepest_descent");
  fc.unlock("solvent_only", "solute_constraint_off");
  fc.unlock("solvent_only", "solvent_constraint_off", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("solvent_only", "solvent_shake");
  fc.unlock("solvent_only", "pressure_calculation");
  fc.unlock("solvent_only", "pressure_scale_berendsen");
  fc.unlock("solvent_only", "virial_off");
  fc.unlock("solvent_only", "virial_atomic");
  fc.unlock("solvent_only", "virial_molecular");
  fc.unlock("solvent_only", "vacuum");
  fc.unlock("solvent_only", "pbc_r");
  fc.unlock("solvent_only", "pbc_c");
  fc.unlock("solvent_only", "pbc_t");
  fc.unlock("solvent_only", "bond");
  fc.unlock("solvent_only", "angle");
  fc.unlock("solvent_only", "dihedral");
  fc.unlock("solvent_only", "improper");
  fc.unlock("solvent_only", "crf");
  fc.unlock("solvent_only", "lj");
  fc.unlock("solvent_only", "com_removal");
  fc.unlock("solvent_only", "rf_excluded");
  fc.unlock("solvent_only", "pairlist_standard");
  fc.unlock("solvent_only", "pairlist_grid");
  fc.unlock("solvent_only", "cutoff_atomic");
  fc.unlock("solvent_only", "temp_berendsen");
  fc.unlock("solvent_only", "temp_nosehoover");
  fc.unlock("solvent_only", "temp_nosehoover_chains");
  fc.unlock("solvent_only", "position_rest");
  fc.unlock("solvent_only", "position_const");
  fc.unlock("solvent_only", "position_const_scaled");
  fc.unlock("solvent_only", "distance_rest");
  fc.unlock("solvent_only", "dihedral_rest");
  fc.unlock("solvent_only", "rottrans");
  fc.unlock("solvent_only", "repex_temp");
  fc.unlock("solvent_only", "repex_lambda");
  fc.unlock("solvent_only", "multicell");
  fc.unlock("solvent_only", "analysis");
  fc.unlock("solvent_only", "no_integration");
  fc.unlock("solvent_only", "polarisation_cos");
  fc.unlock("solvent_only", "polarisation_cos_damped");
  fc.unlock("solvent_only", "random_gromos");
  fc.unlock("solvent_only", "random_gsl");
  fc.unlock("solvent_only", "parallel_mpi");
  fc.unlock("solvent_only", "parallel_omp");
  fc.unlock("steepest_descent", "solute_constraint_off");
  fc.unlock("steepest_descent", "solute_shake");
  fc.unlock("steepest_descent", "solute_lincs");
  fc.unlock("steepest_descent", "solute_flexshake");
  fc.unlock("steepest_descent", "solvent_constraint_off");
  fc.unlock("steepest_descent", "solvent_shake");
  fc.unlock("steepest_descent", "pressure_calculation");
  // fc.unlock("steepest_descent", "pressure_scale_berendsen");
  fc.unlock("steepest_descent", "virial_off");
  fc.unlock("steepest_descent", "virial_atomic");
  fc.unlock("steepest_descent", "virial_molecular");
  fc.unlock("steepest_descent", "vacuum");
  fc.unlock("steepest_descent", "pbc_r");
  fc.unlock("steepest_descent", "pbc_c");
  fc.unlock("steepest_descent", "pbc_t");
  fc.unlock("steepest_descent", "perturbation");
  fc.unlock("steepest_descent", "perturbation_scaling");
  fc.unlock("steepest_descent", "bond");
  fc.unlock("steepest_descent", "angle");
  fc.unlock("steepest_descent", "dihedral");
  fc.unlock("steepest_descent", "improper");
  fc.unlock("steepest_descent", "crf");
  fc.unlock("steepest_descent", "lj");
  //fc.unlock("steepest_descent", "com_removal");
  fc.unlock("steepest_descent", "rf_excluded");
  fc.unlock("steepest_descent", "pairlist_standard");
  fc.unlock("steepest_descent", "pairlist_grid");
  fc.unlock("steepest_descent", "cutoff_atomic");
  fc.unlock("steepest_descent", "cg_martini");
  fc.unlock("steepest_descent", "cg_gromos");
  fc.unlock("steepest_descent", "mixed_grain");
  fc.unlock("steepest_descent", "temp_berendsen");
  fc.unlock("steepest_descent", "temp_nosehoover");
  fc.unlock("steepest_descent", "temp_nosehoover_chains");
  fc.unlock("steepest_descent", "position_rest");
  fc.unlock("steepest_descent", "position_const");
  fc.unlock("steepest_descent", "position_const_scaled");
  fc.unlock("steepest_descent", "distance_rest");
  fc.unlock("steepest_descent", "dihedral_rest");
  fc.unlock("steepest_descent", "dihedral_const");
  fc.unlock("steepest_descent", "jvalue_rest");
  fc.unlock("steepest_descent", "rdc_rest");
  fc.unlock("steepest_descent", "perscale");
  fc.unlock("steepest_descent", "rottrans");
  fc.unlock("steepest_descent", "multicell");
  //fc.unlock("steepest_descent", "analysis");
  fc.unlock("steepest_descent", "no_integration");
  fc.unlock("steepest_descent", "multistep");
  fc.unlock("steepest_descent", "multistep_boost");
  fc.unlock("steepest_descent", "montecarlo");
  fc.unlock("steepest_descent", "polarisation_cos");
  fc.unlock("steepest_descent", "polarisation_cos_damped");
  fc.unlock("steepest_descent", "random_gromos");
  fc.unlock("steepest_descent", "random_gsl");
  fc.unlock("steepest_descent", "parallel_mpi");
  fc.unlock("steepest_descent", "parallel_omp");
  fc.unlock("solute_constraint_off", "solvent_constraint_off");
  fc.unlock("solute_constraint_off", "solvent_shake");
  fc.unlock("solute_constraint_off", "pressure_calculation");
  fc.unlock("solute_constraint_off", "pressure_scale_berendsen");
  fc.unlock("solute_constraint_off", "virial_off");
  fc.unlock("solute_constraint_off", "virial_atomic");
  fc.unlock("solute_constraint_off", "virial_molecular");
  fc.unlock("solute_constraint_off", "vacuum");
  fc.unlock("solute_constraint_off", "pbc_r");
  fc.unlock("solute_constraint_off", "pbc_c");
  fc.unlock("solute_constraint_off", "pbc_t");
  fc.unlock("solute_constraint_off", "perturbation");
  fc.unlock("solute_constraint_off", "perturbation_scaling");
  fc.unlock("solute_constraint_off", "bond");
  fc.unlock("solute_constraint_off", "angle");
  fc.unlock("solute_constraint_off", "dihedral");
  fc.unlock("solute_constraint_off", "improper");
  fc.unlock("solute_constraint_off", "crf");
  fc.unlock("solute_constraint_off", "lj");
  fc.unlock("solute_constraint_off", "com_removal");
  fc.unlock("solute_constraint_off", "rf_excluded");
  fc.unlock("solute_constraint_off", "pairlist_standard");
  fc.unlock("solute_constraint_off", "pairlist_grid");
  fc.unlock("solute_constraint_off", "cutoff_atomic");
  fc.unlock("solute_constraint_off", "cg_martini");
  fc.unlock("solute_constraint_off", "cg_gromos");
  fc.unlock("solute_constraint_off", "mixed_grain");
  fc.unlock("solute_constraint_off", "temp_berendsen");
  fc.unlock("solute_constraint_off", "temp_nosehoover");
  fc.unlock("solute_constraint_off", "temp_nosehoover_chains");
  fc.unlock("solute_constraint_off", "position_rest");
  fc.unlock("solute_constraint_off", "position_const");
  fc.unlock("solute_constraint_off", "position_const_scaled");
  fc.unlock("solute_constraint_off", "distance_rest");
  fc.unlock("solute_constraint_off", "dihedral_rest");
  fc.unlock("solute_constraint_off", "jvalue_rest");
  fc.unlock("solute_constraint_off", "rdc_rest");
  fc.unlock("solute_constraint_off", "perscale");
  fc.unlock("solute_constraint_off", "rottrans");
  fc.unlock("solute_constraint_off", "repex_temp");
  fc.unlock("solute_constraint_off", "repex_lambda");
  fc.unlock("solute_constraint_off", "multicell");
  fc.unlock("solute_constraint_off", "analysis");
  fc.unlock("solute_constraint_off", "no_integration");
  fc.unlock("solute_constraint_off", "stochdyn");
  fc.unlock("solute_constraint_off", "multistep");
  fc.unlock("solute_constraint_off", "multistep_boost");
  fc.unlock("solute_constraint_off", "montecarlo");
  fc.unlock("solute_constraint_off", "polarisation_cos");
  fc.unlock("solute_constraint_off", "polarisation_cos_damped");
  fc.unlock("solute_constraint_off", "random_gromos");
  fc.unlock("solute_constraint_off", "random_gsl");
  fc.unlock("solute_constraint_off", "parallel_mpi");
  fc.unlock("solute_constraint_off", "parallel_omp");
  fc.unlock("solute_shake", "solvent_constraint_off");
  fc.unlock("solute_shake", "solvent_shake");
  fc.unlock("solute_shake", "pressure_calculation");
  fc.unlock("solute_shake", "pressure_scale_berendsen");
  fc.unlock("solute_shake", "virial_off");
  fc.unlock("solute_shake", "virial_atomic");
  fc.unlock("solute_shake", "virial_molecular");
  fc.unlock("solute_shake", "vacuum");
  fc.unlock("solute_shake", "pbc_r");
  fc.unlock("solute_shake", "pbc_c");
  fc.unlock("solute_shake", "pbc_t");
  fc.unlock("solute_shake", "perturbation");
  fc.unlock("solute_shake", "perturbation_scaling");
  fc.unlock("solute_shake", "bond");
  fc.unlock("solute_shake", "angle");
  fc.unlock("solute_shake", "dihedral");
  fc.unlock("solute_shake", "improper");
  fc.unlock("solute_shake", "crf");
  fc.unlock("solute_shake", "lj");
  fc.unlock("solute_shake", "com_removal");
  fc.unlock("solute_shake", "rf_excluded");
  fc.unlock("solute_shake", "pairlist_standard");
  fc.unlock("solute_shake", "pairlist_grid");
  fc.unlock("solute_shake", "cutoff_atomic");
  fc.unlock("solute_shake", "cg_martini");
  fc.unlock("solute_shake", "cg_gromos");
  fc.unlock("solute_shake", "mixed_grain");
  fc.unlock("solute_shake", "temp_berendsen");
  fc.unlock("solute_shake", "temp_nosehoover");
  fc.unlock("solute_shake", "temp_nosehoover_chains");
  fc.unlock("solute_shake", "position_rest");
  fc.unlock("solute_shake", "position_const");
  fc.unlock("solute_shake", "position_const_scaled");
  fc.unlock("solute_shake", "distance_rest");
  fc.unlock("solute_shake", "dihedral_rest");
  fc.unlock("solute_shake", "dihedral_const");
  fc.unlock("solute_shake", "jvalue_rest");
  fc.unlock("solute_shake", "rdc_rest");
  fc.unlock("solute_shake", "perscale");
  fc.unlock("solute_shake", "rottrans");
  fc.unlock("solute_shake", "repex_temp");
  fc.unlock("solute_shake", "repex_lambda");
  fc.unlock("solute_shake", "multicell");
  fc.unlock("solute_shake", "analysis");
  fc.unlock("solute_shake", "no_integration");
  fc.unlock("solute_shake", "stochdyn");
  fc.unlock("solute_shake", "multistep");
  fc.unlock("solute_shake", "multistep_boost");
  fc.unlock("solute_shake", "montecarlo");
  fc.unlock("solute_shake", "polarisation_cos");
  fc.unlock("solute_shake", "polarisation_cos_damped");
  fc.unlock("solute_shake", "random_gromos");
  fc.unlock("solute_shake", "random_gsl");
  fc.unlock("solute_shake", "parallel_mpi");
  fc.unlock("solute_shake", "parallel_omp");
  fc.unlock("solute_lincs", "solute_flexshake");
  fc.unlock("solute_lincs", "solvent_constraint_off");
  fc.unlock("solute_lincs", "solvent_shake");
  fc.unlock("solute_lincs", "pressure_calculation");
  fc.unlock("solute_lincs", "pressure_scale_berendsen");
  fc.unlock("solute_lincs", "virial_off");
  fc.unlock("solute_lincs", "virial_atomic");
  fc.unlock("solute_lincs", "virial_molecular");
  fc.unlock("solute_lincs", "vacuum");
  fc.unlock("solute_lincs", "pbc_r");
  fc.unlock("solute_lincs", "pbc_c");
  fc.unlock("solute_lincs", "pbc_t");
  fc.unlock("solute_lincs", "bond");
  fc.unlock("solute_lincs", "angle");
  fc.unlock("solute_lincs", "dihedral");
  fc.unlock("solute_lincs", "improper");
  fc.unlock("solute_lincs", "crf");
  fc.unlock("solute_lincs", "lj");
  fc.unlock("solute_lincs", "com_removal");
  fc.unlock("solute_lincs", "rf_excluded");
  fc.unlock("solute_lincs", "pairlist_standard");
  fc.unlock("solute_lincs", "pairlist_grid");
  fc.unlock("solute_lincs", "cutoff_atomic");
  fc.unlock("solute_lincs", "cg_martini");
  fc.unlock("solute_lincs", "cg_gromos");
  fc.unlock("solute_lincs", "mixed_grain");
  fc.unlock("solute_lincs", "temp_berendsen");
  fc.unlock("solute_lincs", "temp_nosehoover");
  fc.unlock("solute_lincs", "temp_nosehoover_chains");
  fc.unlock("solute_lincs", "position_rest");
  fc.unlock("solute_lincs", "distance_rest");
  fc.unlock("solute_lincs", "dihedral_rest");
  fc.unlock("solute_lincs", "jvalue_rest");
  fc.unlock("solute_lincs", "rdc_rest");
  fc.unlock("solute_lincs", "perscale");
  fc.unlock("solute_lincs", "rottrans");
  fc.unlock("solute_lincs", "repex_temp");
  fc.unlock("solute_lincs", "repex_lambda");
  fc.unlock("solute_lincs", "multicell");
  fc.unlock("solute_lincs", "analysis");
  fc.unlock("solute_lincs", "no_integration");
  fc.unlock("solute_lincs", "multistep");
  fc.unlock("solute_lincs", "multistep_boost");
  fc.unlock("solute_lincs", "montecarlo");
  fc.unlock("solute_lincs", "polarisation_cos");
  fc.unlock("solute_lincs", "polarisation_cos_damped");
  fc.unlock("solute_lincs", "random_gromos");
  fc.unlock("solute_lincs", "random_gsl");
  fc.unlock("solute_lincs", "parallel_mpi");
  fc.unlock("solute_lincs", "parallel_omp");
  fc.unlock("solute_flexshake", "solvent_constraint_off");
  fc.unlock("solute_flexshake", "solvent_shake");
  fc.unlock("solute_flexshake", "pressure_calculation");
  fc.unlock("solute_flexshake", "pressure_scale_berendsen");
  fc.unlock("solute_flexshake", "virial_off");
  fc.unlock("solute_flexshake", "virial_atomic");
  fc.unlock("solute_flexshake", "virial_molecular");
  fc.unlock("solute_flexshake", "vacuum");
  fc.unlock("solute_flexshake", "pbc_r");
  fc.unlock("solute_flexshake", "pbc_c");
  fc.unlock("solute_flexshake", "pbc_t");
  fc.unlock("solute_flexshake", "bond");
  fc.unlock("solute_flexshake", "angle");
  fc.unlock("solute_flexshake", "dihedral");
  fc.unlock("solute_flexshake", "improper");
  fc.unlock("solute_flexshake", "crf");
  fc.unlock("solute_flexshake", "lj");
  fc.unlock("solute_flexshake", "com_removal", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("solute_flexshake", "rf_excluded");
  fc.unlock("solute_flexshake", "pairlist_standard");
  fc.unlock("solute_flexshake", "pairlist_grid");
  fc.unlock("solute_flexshake", "cutoff_atomic");
  fc.unlock("solute_flexshake", "temp_berendsen");
  fc.unlock("solute_flexshake", "temp_nosehoover");
  fc.unlock("solute_flexshake", "temp_nosehoover_chains");
  fc.unlock("solute_flexshake", "position_rest");
  fc.unlock("solute_flexshake", "distance_rest");
  fc.unlock("solute_flexshake", "dihedral_rest");
  fc.unlock("solute_flexshake", "jvalue_rest");
  fc.unlock("solute_flexshake", "rdc_rest");
  fc.unlock("solute_flexshake", "perscale");
  fc.unlock("solute_flexshake", "rottrans");
// flexible_vel and flex_len are not passed between replicas: lock this combination
//  fc.unlock("solute_flexshake", "repex_temp");
//  fc.unlock("solute_flexshake", "repex_lambda");
  fc.unlock("solute_flexshake", "multicell");
  fc.unlock("solute_flexshake", "analysis");
  fc.unlock("solute_flexshake", "no_integration");
  fc.unlock("solute_flexshake", "montecarlo");
  fc.unlock("solute_flexshake", "random_gromos");
  fc.unlock("solute_flexshake", "random_gsl");
  fc.unlock("solute_flexshake", "parallel_mpi");
  fc.unlock("solute_flexshake", "parallel_omp");
  fc.unlock("solvent_constraint_off", "pressure_calculation");
  fc.unlock("solvent_constraint_off", "pressure_scale_berendsen");
  fc.unlock("solvent_constraint_off", "virial_off");
  fc.unlock("solvent_constraint_off", "virial_atomic");
  fc.unlock("solvent_constraint_off", "virial_molecular");
  fc.unlock("solvent_constraint_off", "vacuum");
  fc.unlock("solvent_constraint_off", "pbc_r");
  fc.unlock("solvent_constraint_off", "pbc_c");
  fc.unlock("solvent_constraint_off", "pbc_t");
  fc.unlock("solvent_constraint_off", "perturbation");
  fc.unlock("solvent_constraint_off", "perturbation_scaling");
  fc.unlock("solvent_constraint_off", "bond");
  fc.unlock("solvent_constraint_off", "angle");
  fc.unlock("solvent_constraint_off", "dihedral");
  fc.unlock("solvent_constraint_off", "improper");
  fc.unlock("solvent_constraint_off", "crf");
  fc.unlock("solvent_constraint_off", "lj");
  fc.unlock("solvent_constraint_off", "com_removal");
  fc.unlock("solvent_constraint_off", "rf_excluded");
  fc.unlock("solvent_constraint_off", "pairlist_standard");
  fc.unlock("solvent_constraint_off", "pairlist_grid");
  fc.unlock("solvent_constraint_off", "cutoff_atomic");
  fc.unlock("solvent_constraint_off", "cg_martini");
  fc.unlock("solvent_constraint_off", "cg_gromos");
  fc.unlock("solvent_constraint_off", "mixed_grain");
  fc.unlock("solvent_constraint_off", "temp_berendsen");
  fc.unlock("solvent_constraint_off", "temp_nosehoover");
  fc.unlock("solvent_constraint_off", "temp_nosehoover_chains");
  fc.unlock("solvent_constraint_off", "position_rest");
  fc.unlock("solvent_constraint_off", "position_const");
  fc.unlock("solvent_constraint_off", "position_const_scaled");
  fc.unlock("solvent_constraint_off", "distance_rest");
  fc.unlock("solvent_constraint_off", "dihedral_rest");
  fc.unlock("solvent_constraint_off", "dihedral_const");
  fc.unlock("solvent_constraint_off", "jvalue_rest");
  fc.unlock("solvent_constraint_off", "rdc_rest");
  fc.unlock("solvent_constraint_off", "perscale");
  fc.unlock("solvent_constraint_off", "rottrans");
  fc.unlock("solvent_constraint_off", "repex_temp");
  fc.unlock("solvent_constraint_off", "repex_lambda");
  fc.unlock("solvent_constraint_off", "multicell");
  fc.unlock("solvent_constraint_off", "analysis");
  fc.unlock("solvent_constraint_off", "no_integration");
  fc.unlock("solvent_constraint_off", "stochdyn");
  fc.unlock("solvent_constraint_off", "multistep");
  fc.unlock("solvent_constraint_off", "multistep_boost");
  fc.unlock("solvent_constraint_off", "montecarlo");
  fc.unlock("solvent_constraint_off", "polarisation_cos");
  fc.unlock("solvent_constraint_off", "polarisation_cos_damped");
  fc.unlock("solvent_constraint_off", "random_gromos");
  fc.unlock("solvent_constraint_off", "random_gsl");
  fc.unlock("solvent_constraint_off", "parallel_mpi");
  fc.unlock("solvent_constraint_off", "parallel_omp");
  fc.unlock("solvent_shake", "pressure_calculation");
  fc.unlock("solvent_shake", "pressure_scale_berendsen");
  fc.unlock("solvent_shake", "virial_off");
  fc.unlock("solvent_shake", "virial_atomic");
  fc.unlock("solvent_shake", "virial_molecular");
  fc.unlock("solvent_shake", "vacuum");
  fc.unlock("solvent_shake", "pbc_r");
  fc.unlock("solvent_shake", "pbc_c");
  fc.unlock("solvent_shake", "pbc_t");
  fc.unlock("solvent_shake", "perturbation");
  fc.unlock("solvent_shake", "perturbation_scaling");
  fc.unlock("solvent_shake", "bond");
  fc.unlock("solvent_shake", "angle");
  fc.unlock("solvent_shake", "dihedral");
  fc.unlock("solvent_shake", "improper");
  fc.unlock("solvent_shake", "crf");
  fc.unlock("solvent_shake", "lj");
  fc.unlock("solvent_shake", "com_removal");
  fc.unlock("solvent_shake", "rf_excluded");
  fc.unlock("solvent_shake", "pairlist_standard");
  fc.unlock("solvent_shake", "pairlist_grid");
  fc.unlock("solvent_shake", "cutoff_atomic");
  fc.unlock("solvent_shake", "cg_martini");
  fc.unlock("solvent_shake", "cg_gromos");
  fc.unlock("solvent_shake", "mixed_grain");
  fc.unlock("solvent_shake", "temp_berendsen");
  fc.unlock("solvent_shake", "temp_nosehoover");
  fc.unlock("solvent_shake", "temp_nosehoover_chains");
  fc.unlock("solvent_shake", "position_rest");
  fc.unlock("solvent_shake", "position_const");
  fc.unlock("solvent_shake", "position_const_scaled");
  fc.unlock("solvent_shake", "distance_rest");
  fc.unlock("solvent_shake", "dihedral_rest");
  fc.unlock("solvent_shake", "dihedral_const");
  fc.unlock("solvent_shake", "jvalue_rest");
  fc.unlock("solvent_shake", "rdc_rest");
  fc.unlock("solvent_shake", "perscale");
  fc.unlock("solvent_shake", "rottrans");
  fc.unlock("solvent_shake", "repex_temp");
  fc.unlock("solvent_shake", "repex_lambda");
  fc.unlock("solvent_shake", "multicell");
  fc.unlock("solvent_shake", "analysis");
  fc.unlock("solvent_shake", "no_integration");
  fc.unlock("solvent_shake", "stochdyn");
  fc.unlock("solvent_shake", "multistep");
  fc.unlock("solvent_shake", "multistep_boost");
  fc.unlock("solvent_shake", "montecarlo");
  fc.unlock("solvent_shake", "polarisation_cos");
  fc.unlock("solvent_shake", "polarisation_cos_damped");
  fc.unlock("solvent_shake", "random_gromos");
  fc.unlock("solvent_shake", "random_gsl");
  fc.unlock("solvent_shake", "parallel_mpi");
  fc.unlock("solvent_shake", "parallel_omp");
  fc.unlock("pressure_calculation", "pressure_scale_berendsen");
  fc.unlock("pressure_calculation", "virial_atomic");
  fc.unlock("pressure_calculation", "virial_molecular");
  fc.unlock("pressure_calculation", "pbc_r");
  fc.unlock("pressure_calculation", "pbc_c");
  fc.unlock("pressure_calculation", "pbc_t");
  fc.unlock("pressure_calculation", "perturbation");
  fc.unlock("pressure_calculation", "perturbation_scaling");
  fc.unlock("pressure_calculation", "bond");
  fc.unlock("pressure_calculation", "angle");
  fc.unlock("pressure_calculation", "dihedral");
  fc.unlock("pressure_calculation", "improper");
  fc.unlock("pressure_calculation", "crf");
  fc.unlock("pressure_calculation", "lj");
  fc.unlock("pressure_calculation", "com_removal");
  fc.unlock("pressure_calculation", "rf_excluded");
  fc.unlock("pressure_calculation", "pairlist_standard");
  fc.unlock("pressure_calculation", "pairlist_grid");
  fc.unlock("pressure_calculation", "cutoff_atomic");
  fc.unlock("pressure_calculation", "cg_martini");
  fc.unlock("pressure_calculation", "cg_gromos");
  fc.unlock("pressure_calculation", "mixed_grain");
  fc.unlock("pressure_calculation", "temp_berendsen");
  fc.unlock("pressure_calculation", "temp_nosehoover");
  fc.unlock("pressure_calculation", "temp_nosehoover_chains");
  fc.unlock("pressure_calculation", "position_rest");
  fc.unlock("pressure_calculation", "position_const");
  fc.unlock("pressure_calculation", "position_const_scaled");
  fc.unlock("pressure_calculation", "distance_rest");
  fc.unlock("pressure_calculation", "dihedral_rest");
  fc.unlock("pressure_calculation", "dihedral_const");
  fc.unlock("pressure_calculation", "jvalue_rest");
  fc.unlock("pressure_calculation", "rdc_rest");
  fc.unlock("pressure_calculation", "perscale");
  fc.unlock("pressure_calculation", "rottrans");
  fc.unlock("pressure_calculation", "repex_temp");
  fc.unlock("pressure_calculation", "repex_lambda");
  fc.unlock("pressure_calculation", "multicell");
  fc.unlock("pressure_calculation", "analysis");
  fc.unlock("pressure_calculation", "no_integration");
  fc.unlock("pressure_calculation", "stochdyn");
  fc.unlock("pressure_calculation", "multistep");
  fc.unlock("pressure_calculation", "multistep_boost");
  fc.unlock("pressure_calculation", "montecarlo");
  fc.unlock("pressure_calculation", "polarisation_cos");
  fc.unlock("pressure_calculation", "polarisation_cos_damped");
  fc.unlock("pressure_calculation", "random_gromos");
  fc.unlock("pressure_calculation", "random_gsl");
  fc.unlock("pressure_calculation", "parallel_mpi");
  fc.unlock("pressure_calculation", "parallel_omp");
  fc.unlock("pressure_scale_berendsen", "virial_atomic");
  fc.unlock("pressure_scale_berendsen", "virial_molecular");
  fc.unlock("pressure_scale_berendsen", "pbc_r");
  fc.unlock("pressure_scale_berendsen", "pbc_c");
  fc.unlock("pressure_scale_berendsen", "pbc_t");
  fc.unlock("pressure_scale_berendsen", "perturbation");
  fc.unlock("pressure_scale_berendsen", "perturbation_scaling");
  fc.unlock("pressure_scale_berendsen", "bond");
  fc.unlock("pressure_scale_berendsen", "angle");
  fc.unlock("pressure_scale_berendsen", "dihedral");
  fc.unlock("pressure_scale_berendsen", "improper");
  fc.unlock("pressure_scale_berendsen", "crf");
  fc.unlock("pressure_scale_berendsen", "lj");
  fc.unlock("pressure_scale_berendsen", "com_removal");
  fc.unlock("pressure_scale_berendsen", "rf_excluded");
  fc.unlock("pressure_scale_berendsen", "pairlist_standard");
  fc.unlock("pressure_scale_berendsen", "pairlist_grid");
  fc.unlock("pressure_scale_berendsen", "cutoff_atomic");
  fc.unlock("pressure_scale_berendsen", "cg_martini");
  fc.unlock("pressure_scale_berendsen", "cg_gromos");
  fc.unlock("pressure_scale_berendsen", "mixed_grain");
  fc.unlock("pressure_scale_berendsen", "temp_berendsen");
  fc.unlock("pressure_scale_berendsen", "temp_nosehoover");
  fc.unlock("pressure_scale_berendsen", "temp_nosehoover_chains");
  fc.unlock("pressure_scale_berendsen", "position_rest");
  fc.unlock("pressure_scale_berendsen", "position_const");
  fc.unlock("pressure_scale_berendsen", "position_const_scaled");
  fc.unlock("pressure_scale_berendsen", "distance_rest");
  fc.unlock("pressure_scale_berendsen", "dihedral_rest");
  fc.unlock("pressure_scale_berendsen", "dihedral_const");
  fc.unlock("pressure_scale_berendsen", "jvalue_rest");
  fc.unlock("pressure_scale_berendsen", "rdc_rest");
  fc.unlock("pressure_scale_berendsen", "perscale");
  fc.unlock("pressure_scale_berendsen", "rottrans");
  fc.unlock("pressure_scale_berendsen", "repex_temp");
  fc.unlock("pressure_scale_berendsen", "repex_lambda");
  fc.unlock("pressure_scale_berendsen", "multicell");
  fc.unlock("pressure_scale_berendsen", "analysis");
  fc.unlock("pressure_scale_berendsen", "no_integration");
  fc.unlock("pressure_scale_berendsen", "stochdyn");
  fc.unlock("pressure_scale_berendsen", "multistep");
  fc.unlock("pressure_scale_berendsen", "multistep_boost");
  fc.unlock("pressure_scale_berendsen", "montecarlo");
  fc.unlock("pressure_scale_berendsen", "polarisation_cos");
  fc.unlock("pressure_scale_berendsen", "polarisation_cos_damped");
  fc.unlock("pressure_scale_berendsen", "random_gromos");
  fc.unlock("pressure_scale_berendsen", "random_gsl");
  fc.unlock("pressure_scale_berendsen", "parallel_mpi");
  fc.unlock("pressure_scale_berendsen", "parallel_omp");
  fc.unlock("virial_off", "vacuum");
  fc.unlock("virial_off", "pbc_r");
  fc.unlock("virial_off", "pbc_c");
  fc.unlock("virial_off", "pbc_t");
  fc.unlock("virial_off", "perturbation");
  fc.unlock("virial_off", "perturbation_scaling");
  fc.unlock("virial_off", "bond");
  fc.unlock("virial_off", "angle");
  fc.unlock("virial_off", "dihedral");
  fc.unlock("virial_off", "improper");
  fc.unlock("virial_off", "crf");
  fc.unlock("virial_off", "lj");
  fc.unlock("virial_off", "com_removal");
  fc.unlock("virial_off", "rf_excluded");
  fc.unlock("virial_off", "pairlist_standard");
  fc.unlock("virial_off", "pairlist_grid");
  fc.unlock("virial_off", "cutoff_atomic");
  fc.unlock("virial_off", "cg_martini");
  fc.unlock("virial_off", "cg_gromos");
  fc.unlock("virial_off", "mixed_grain");
  fc.unlock("virial_off", "temp_berendsen");
  fc.unlock("virial_off", "temp_nosehoover");
  fc.unlock("virial_off", "temp_nosehoover_chains");
  fc.unlock("virial_off", "position_rest");
  fc.unlock("virial_off", "position_const");
  fc.unlock("virial_off", "distance_rest");
  fc.unlock("virial_off", "dihedral_rest");
  fc.unlock("virial_off", "dihedral_const");
  fc.unlock("virial_off", "jvalue_rest");
  fc.unlock("virial_off", "rdc_rest");
  fc.unlock("virial_off", "perscale");
  fc.unlock("virial_off", "rottrans");
  fc.unlock("virial_off", "repex_temp");
  fc.unlock("virial_off", "repex_lambda");
  fc.unlock("virial_off", "multicell");
  fc.unlock("virial_off", "analysis");
  fc.unlock("virial_off", "no_integration");
  fc.unlock("virial_off", "stochdyn");
  fc.unlock("virial_off", "multistep");
  fc.unlock("virial_off", "multistep_boost");
  fc.unlock("virial_off", "montecarlo");
  fc.unlock("virial_off", "polarisation_cos");
  fc.unlock("virial_off", "polarisation_cos_damped");
  fc.unlock("virial_off", "random_gromos");
  fc.unlock("virial_off", "random_gsl");
  fc.unlock("virial_off", "parallel_mpi");
  fc.unlock("virial_off", "parallel_omp");
  fc.unlock("virial_atomic", "vacuum");
  fc.unlock("virial_atomic", "pbc_r");
  fc.unlock("virial_atomic", "pbc_c");
  fc.unlock("virial_atomic", "pbc_t");
  fc.unlock("virial_atomic", "perturbation");
  fc.unlock("virial_atomic", "perturbation_scaling");
  fc.unlock("virial_atomic", "bond");
  fc.unlock("virial_atomic", "angle");
  fc.unlock("virial_atomic", "dihedral");
  fc.unlock("virial_atomic", "improper");
  fc.unlock("virial_atomic", "crf");
  fc.unlock("virial_atomic", "lj");
  fc.unlock("virial_atomic", "com_removal");
  fc.unlock("virial_atomic", "rf_excluded");
  fc.unlock("virial_atomic", "pairlist_standard");
  fc.unlock("virial_atomic", "pairlist_grid");
  fc.unlock("virial_atomic", "cutoff_atomic");
  fc.unlock("virial_atomic", "cg_martini");
  fc.unlock("virial_atomic", "cg_gromos");
  fc.unlock("virial_atomic", "mixed_grain");
  fc.unlock("virial_atomic", "temp_berendsen");
  fc.unlock("virial_atomic", "temp_nosehoover");
  fc.unlock("virial_atomic", "temp_nosehoover_chains");
  fc.unlock("virial_atomic", "position_rest");
  fc.unlock("virial_atomic", "position_const");
  fc.unlock("virial_atomic", "position_const_scaled");
  fc.unlock("virial_atomic", "distance_rest");
  fc.unlock("virial_atomic", "dihedral_rest");
  fc.unlock("virial_atomic", "jvalue_rest");
  fc.unlock("virial_atomic", "rdc_rest");
  fc.unlock("virial_atomic", "perscale");
  fc.unlock("virial_atomic", "rottrans");
  fc.unlock("virial_atomic", "repex_temp");
  fc.unlock("virial_atomic", "repex_lambda");
  fc.unlock("virial_atomic", "multicell");
  fc.unlock("virial_atomic", "analysis");
  fc.unlock("virial_atomic", "no_integration");
  fc.unlock("virial_atomic", "stochdyn");
  fc.unlock("virial_atomic", "multistep");
  fc.unlock("virial_atomic", "multistep_boost");
  fc.unlock("virial_atomic", "montecarlo");
  fc.unlock("virial_atomic", "polarisation_cos");
  fc.unlock("virial_atomic", "polarisation_cos_damped");
  fc.unlock("virial_atomic", "random_gromos");
  fc.unlock("virial_atomic", "random_gsl");
  fc.unlock("virial_atomic", "parallel_mpi");
  fc.unlock("virial_atomic", "parallel_omp");
  fc.unlock("virial_molecular", "vacuum");
  fc.unlock("virial_molecular", "pbc_r");
  fc.unlock("virial_molecular", "pbc_c");
  fc.unlock("virial_molecular", "pbc_t");
  fc.unlock("virial_molecular", "perturbation");
  fc.unlock("virial_molecular", "perturbation_scaling");
  fc.unlock("virial_molecular", "bond");
  fc.unlock("virial_molecular", "angle");
  fc.unlock("virial_molecular", "dihedral");
  fc.unlock("virial_molecular", "improper");
  fc.unlock("virial_molecular", "crf");
  fc.unlock("virial_molecular", "lj");
  fc.unlock("virial_molecular", "com_removal");
  fc.unlock("virial_molecular", "rf_excluded");
  fc.unlock("virial_molecular", "pairlist_standard");
  fc.unlock("virial_molecular", "pairlist_grid");
  fc.unlock("virial_molecular", "cutoff_atomic");
  fc.unlock("virial_molecular", "cg_martini");
  fc.unlock("virial_molecular", "cg_gromos");
  fc.unlock("virial_molecular", "mixed_grain");
  fc.unlock("virial_molecular", "temp_berendsen");
  fc.unlock("virial_molecular", "temp_nosehoover");
  fc.unlock("virial_molecular", "temp_nosehoover_chains");
  fc.unlock("virial_molecular", "position_rest");
  fc.unlock("virial_molecular", "position_const");
  fc.unlock("virial_molecular", "position_const_scaled");
  fc.unlock("virial_molecular", "distance_rest");
  fc.unlock("virial_molecular", "dihedral_rest");
  fc.unlock("virial_molecular", "dihedral_const");
  fc.unlock("virial_molecular", "jvalue_rest");
  fc.unlock("virial_molecular", "rdc_rest");
  fc.unlock("virial_molecular", "perscale");
  fc.unlock("virial_molecular", "rottrans");
  fc.unlock("virial_molecular", "repex_temp");
  fc.unlock("virial_molecular", "repex_lambda");
  fc.unlock("virial_molecular", "multicell");
  fc.unlock("virial_molecular", "analysis");
  fc.unlock("virial_molecular", "no_integration");
  fc.unlock("virial_molecular", "stochdyn");
  fc.unlock("virial_molecular", "multistep");
  fc.unlock("virial_molecular", "multistep_boost");
  fc.unlock("virial_molecular", "montecarlo");
  fc.unlock("virial_molecular", "polarisation_cos");
  fc.unlock("virial_molecular", "polarisation_cos_damped");
  fc.unlock("virial_molecular", "random_gromos");
  fc.unlock("virial_molecular", "random_gsl");
  fc.unlock("virial_molecular", "parallel_mpi");
  fc.unlock("virial_molecular", "parallel_omp");
  fc.unlock("vacuum", "perturbation");
  fc.unlock("vacuum", "perturbation_scaling");
  fc.unlock("vacuum", "bond");
  fc.unlock("vacuum", "angle");
  fc.unlock("vacuum", "dihedral");
  fc.unlock("vacuum", "improper");
  fc.unlock("vacuum", "crf");
  fc.unlock("vacuum", "lj");
  fc.unlock("vacuum", "com_removal");
  fc.unlock("vacuum", "rf_excluded");
  fc.unlock("vacuum", "pairlist_standard");
  fc.unlock("vacuum", "cutoff_atomic");
  fc.unlock("vacuum", "cg_martini");
  fc.unlock("vacuum", "cg_gromos");
  fc.unlock("vacuum", "mixed_grain");
  fc.unlock("vacuum", "temp_berendsen");
  fc.unlock("vacuum", "temp_nosehoover");
  fc.unlock("vacuum", "temp_nosehoover_chains");
  fc.unlock("vacuum", "position_rest");
  fc.unlock("vacuum", "position_const");
  fc.unlock("vacuum", "distance_rest");
  fc.unlock("vacuum", "dihedral_rest");
  fc.unlock("vacuum", "dihedral_const");
  fc.unlock("vacuum", "jvalue_rest");
  fc.unlock("vacuum", "rdc_rest");
  fc.unlock("vacuum", "perscale");
  fc.unlock("vacuum", "rottrans");
  fc.unlock("vacuum", "repex_temp");
  fc.unlock("vacuum", "repex_lambda");
  fc.unlock("vacuum", "analysis");
  fc.unlock("vacuum", "no_integration");
  fc.unlock("vacuum", "stochdyn");
  fc.unlock("vacuum", "multistep");
  fc.unlock("vacuum", "multistep_boost");
  fc.unlock("vacuum", "montecarlo");
  fc.unlock("vacuum", "polarisation_cos");
  fc.unlock("vacuum", "polarisation_cos_damped");
  fc.unlock("vacuum", "random_gromos");
  fc.unlock("vacuum", "random_gsl");
  fc.unlock("vacuum", "parallel_mpi");
  fc.unlock("vacuum", "parallel_omp");
  fc.unlock("pbc_r", "perturbation");
  fc.unlock("pbc_r", "perturbation_scaling");
  fc.unlock("pbc_r", "bond");
  fc.unlock("pbc_r", "angle");
  fc.unlock("pbc_r", "dihedral");
  fc.unlock("pbc_r", "improper");
  fc.unlock("pbc_r", "crf");
  fc.unlock("pbc_r", "lj");
  fc.unlock("pbc_r", "com_removal");
  fc.unlock("pbc_r", "rf_excluded");
  fc.unlock("pbc_r", "pairlist_standard");
  fc.unlock("pbc_r", "pairlist_grid");
  fc.unlock("pbc_r", "cutoff_atomic");
  fc.unlock("pbc_r", "cg_martini");
  fc.unlock("pbc_r", "cg_gromos");
  fc.unlock("pbc_r", "mixed_grain");
  fc.unlock("pbc_r", "temp_berendsen");
  fc.unlock("pbc_r", "temp_nosehoover");
  fc.unlock("pbc_r", "temp_nosehoover_chains");
  fc.unlock("pbc_r", "position_rest");
  fc.unlock("pbc_r", "position_const");
  fc.unlock("pbc_r", "position_const_scaled");
  fc.unlock("pbc_r", "distance_rest");
  fc.unlock("pbc_r", "dihedral_rest");
  fc.unlock("pbc_r", "dihedral_const");
  fc.unlock("pbc_r", "jvalue_rest");
  fc.unlock("pbc_r", "rdc_rest");
  fc.unlock("pbc_r", "perscale");
  fc.unlock("pbc_r", "rottrans");
  fc.unlock("pbc_r", "repex_temp");
  fc.unlock("pbc_r", "repex_lambda");
  fc.unlock("pbc_r", "multicell");
  fc.unlock("pbc_r", "analysis");
  fc.unlock("pbc_r", "no_integration");
  fc.unlock("pbc_r", "stochdyn");
  fc.unlock("pbc_r", "multistep");
  fc.unlock("pbc_r", "multistep_boost");
  fc.unlock("pbc_r", "montecarlo");
  fc.unlock("pbc_r", "polarisation_cos");
  fc.unlock("pbc_r", "polarisation_cos_damped");
  fc.unlock("pbc_r", "random_gromos");
  fc.unlock("pbc_r", "random_gsl");
  fc.unlock("pbc_r", "parallel_mpi");
  fc.unlock("pbc_r", "parallel_omp");
  fc.unlock("pbc_c", "pbc_t");
  fc.unlock("pbc_c", "perturbation");
  fc.unlock("pbc_c", "perturbation_scaling");
  fc.unlock("pbc_c", "bond");
  fc.unlock("pbc_c", "angle");
  fc.unlock("pbc_c", "dihedral");
  fc.unlock("pbc_c", "improper");
  fc.unlock("pbc_c", "crf");
  fc.unlock("pbc_c", "lj");
  fc.unlock("pbc_c", "com_removal");
  fc.unlock("pbc_c", "rf_excluded");
  fc.unlock("pbc_c", "pairlist_standard");
  fc.unlock("pbc_c", "cutoff_atomic");
  fc.unlock("pbc_c", "cg_martini");
  fc.unlock("pbc_c", "cg_gromos");
  fc.unlock("pbc_c", "mixed_grain");
  fc.unlock("pbc_c", "temp_berendsen");
  fc.unlock("pbc_c", "temp_nosehoover");
  fc.unlock("pbc_c", "temp_nosehoover_chains");
  fc.unlock("pbc_c", "position_rest");
  fc.unlock("pbc_c", "position_const");
  fc.unlock("pbc_c", "position_const_scaled");
  fc.unlock("pbc_c", "distance_rest");
  fc.unlock("pbc_c", "dihedral_rest");
  fc.unlock("pbc_c", "dihedral_const");
  fc.unlock("pbc_c", "jvalue_rest");
  fc.unlock("pbc_c", "rdc_rest");
  fc.unlock("pbc_c", "perscale");
  fc.unlock("pbc_c", "rottrans");
  fc.unlock("pbc_c", "repex_temp");
  fc.unlock("pbc_c", "repex_lambda");
  fc.unlock("pbc_c", "multicell");
  fc.unlock("pbc_c", "analysis");
  fc.unlock("pbc_c", "no_integration");
  fc.unlock("pbc_c", "multistep");
  fc.unlock("pbc_c", "multistep_boost");
  fc.unlock("pbc_c", "montecarlo");
  fc.unlock("pbc_c", "polarisation_cos");
  fc.unlock("pbc_c", "polarisation_cos_damped");
  fc.unlock("pbc_c", "random_gromos");
  fc.unlock("pbc_c", "random_gsl");
  fc.unlock("pbc_c", "parallel_mpi");
  fc.unlock("pbc_c", "parallel_omp");
  fc.unlock("pbc_t", "perturbation");
  fc.unlock("pbc_t", "perturbation_scaling");
  fc.unlock("pbc_t", "bond");
  fc.unlock("pbc_t", "angle");
  fc.unlock("pbc_t", "dihedral");
  fc.unlock("pbc_t", "improper");
  fc.unlock("pbc_t", "crf");
  fc.unlock("pbc_t", "lj");
  fc.unlock("pbc_t", "com_removal");
  fc.unlock("pbc_t", "rf_excluded");
  fc.unlock("pbc_t", "pairlist_standard");
  fc.unlock("pbc_t", "cutoff_atomic");
  fc.unlock("pbc_t", "cg_martini");
  fc.unlock("pbc_t", "cg_gromos");
  fc.unlock("pbc_t", "mixed_grain");
  fc.unlock("pbc_t", "temp_berendsen");
  fc.unlock("pbc_t", "temp_nosehoover");
  fc.unlock("pbc_t", "temp_nosehoover_chains");
  fc.unlock("pbc_t", "position_rest");
  fc.unlock("pbc_t", "position_const");
  fc.unlock("pbc_t", "position_const_scaled");
  fc.unlock("pbc_t", "distance_rest");
  fc.unlock("pbc_t", "dihedral_rest");
  fc.unlock("pbc_t", "dihedral_const");
  fc.unlock("pbc_t", "jvalue_rest");
  fc.unlock("pbc_t", "rdc_rest");
  fc.unlock("pbc_t", "perscale");
  fc.unlock("pbc_t", "rottrans");
  fc.unlock("pbc_t", "repex_temp");
  fc.unlock("pbc_t", "repex_lambda");
  fc.unlock("pbc_t", "analysis");
  fc.unlock("pbc_t", "no_integration");
  fc.unlock("pbc_t", "multistep");
  fc.unlock("pbc_t", "multistep_boost");
  fc.unlock("pbc_t", "montecarlo");
  fc.unlock("pbc_t", "polarisation_cos");
  fc.unlock("pbc_t", "polarisation_cos_damped");
  fc.unlock("pbc_t", "random_gromos");
  fc.unlock("pbc_t", "random_gsl");
  fc.unlock("pbc_t", "parallel_mpi");
  fc.unlock("pbc_t", "parallel_omp");
  fc.unlock("pbc_c", "stochdyn");
  fc.unlock("perturbation", "perturbation_scaling");
  fc.unlock("perturbation", "slow_growth");
  fc.unlock("perturbation", "bond");
  fc.unlock("perturbation", "angle");
  fc.unlock("perturbation", "dihedral");
  fc.unlock("perturbation", "improper");
  fc.unlock("perturbation", "crf");
  fc.unlock("perturbation", "lj");
  fc.unlock("perturbation", "com_removal");
  fc.unlock("perturbation", "rf_excluded");
  fc.unlock("perturbation", "pairlist_standard");
  fc.unlock("perturbation", "pairlist_grid");
  fc.unlock("perturbation", "cutoff_atomic");
  fc.unlock("perturbation", "cg_martini");
  fc.unlock("perturbation", "cg_gromos");
  fc.unlock("perturbation", "mixed_grain");
  fc.unlock("perturbation", "temp_berendsen");
  fc.unlock("perturbation", "temp_nosehoover");
  fc.unlock("perturbation", "temp_nosehoover_chains");
  fc.unlock("perturbation", "position_rest");
  fc.unlock("perturbation", "distance_rest");
  fc.unlock("perturbation", "dihedral_rest");
  fc.unlock("perturbation", "dihedral_const");
  fc.unlock("perturbation", "jvalue_rest");
  fc.unlock("perturbation", "rdc_rest");
  fc.unlock("perturbation", "perscale");
  fc.unlock("perturbation", "rottrans");
  fc.unlock("perturbation", "repex_temp");
  fc.unlock("perturbation", "repex_lambda");
  fc.unlock("perturbation", "multicell");
  fc.unlock("perturbation", "analysis");
  fc.unlock("perturbation", "no_integration");
  fc.unlock("perturbation", "stochdyn");
  fc.unlock("perturbation", "multistep");
  fc.unlock("perturbation", "multistep_boost");
  fc.unlock("perturbation", "montecarlo");
  fc.unlock("perturbation", "polarisation_cos");
  fc.unlock("perturbation", "polarisation_cos_damped");
  fc.unlock("perturbation", "random_gromos");
  fc.unlock("perturbation", "random_gsl");
  fc.unlock("perturbation", "parallel_mpi");
  fc.unlock("perturbation", "parallel_omp");
  fc.unlock("perturbation", "innerloop_method_cuda");
  fc.unlock("perturbation", "eds");
  fc.unlock("perturbation", "aeds");
  //  fc.unlock("perturbation", "multiaeds");
  fc.unlock("perturbation_scaling", "bond");
  fc.unlock("perturbation_scaling", "angle");
  fc.unlock("perturbation_scaling", "dihedral");
  fc.unlock("perturbation_scaling", "improper");
  fc.unlock("perturbation_scaling", "crf");
  fc.unlock("perturbation_scaling", "lj");
  fc.unlock("perturbation_scaling", "com_removal");
  fc.unlock("perturbation_scaling", "rf_excluded");
  fc.unlock("perturbation_scaling", "pairlist_standard");
  fc.unlock("perturbation_scaling", "pairlist_grid");
  fc.unlock("perturbation_scaling", "cutoff_atomic");
  fc.unlock("perturbation_scaling", "temp_berendsen");
  fc.unlock("perturbation_scaling", "temp_nosehoover");
  fc.unlock("perturbation_scaling", "temp_nosehoover_chains");
  fc.unlock("perturbation_scaling", "position_rest");
  fc.unlock("perturbation_scaling", "distance_rest");
  fc.unlock("perturbation_scaling", "dihedral_rest");
  fc.unlock("perturbation_scaling", "dihedral_const");
  fc.unlock("perturbation_scaling", "jvalue_rest");
  fc.unlock("perturbation_scaling", "rdc_rest");
  fc.unlock("perturbation_scaling", "perscale");
  fc.unlock("perturbation_scaling", "rottrans");
  fc.unlock("perturbation_scaling", "repex_temp");
  fc.unlock("perturbation_scaling", "repex_lambda");
  fc.unlock("perturbation_scaling", "multicell");
  fc.unlock("perturbation_scaling", "analysis");
  fc.unlock("perturbation_scaling", "no_integration");
  fc.unlock("perturbation_scaling", "stochdyn");
  fc.unlock("perturbation_scaling", "multistep");
  fc.unlock("perturbation_scaling", "multistep_boost");
  fc.unlock("perturbation_scaling", "montecarlo");
  fc.unlock("perturbation_scaling", "random_gromos");
  fc.unlock("perturbation_scaling", "random_gsl");
  fc.unlock("perturbation_scaling", "parallel_mpi");
  fc.unlock("perturbation_scaling", "parallel_omp");
  fc.unlock("individual_lambdas", "solute");
  fc.unlock("individual_lambdas", "solvent");
  fc.unlock("individual_lambdas", "solvent_only");
  fc.unlock("individual_lambdas", "steepest_descent");
  fc.unlock("individual_lambdas", "solute_constraint_off");
  fc.unlock("individual_lambdas", "solute_shake");
  fc.unlock("individual_lambdas", "solute_lincs");
  fc.unlock("individual_lambdas", "solute_flexshake");
  fc.unlock("individual_lambdas", "solvent_constraint_off");
  fc.unlock("individual_lambdas", "solvent_shake");
  fc.unlock("individual_lambdas", "pressure_calculation");
  fc.unlock("individual_lambdas", "pressure_scale_berendsen");
  fc.unlock("individual_lambdas", "virial_off");
  fc.unlock("individual_lambdas", "virial_atomic");
  fc.unlock("individual_lambdas", "virial_molecular");
  fc.unlock("individual_lambdas", "vacuum");
  fc.unlock("individual_lambdas", "pbc_r");
  fc.unlock("individual_lambdas", "pbc_c");
  fc.unlock("individual_lambdas", "pbc_t");
  fc.unlock("individual_lambdas", "perturbation");
  fc.unlock("individual_lambdas", "perturbation_scaling");
  //  Chris: not tested yet
  //fc.unlock("individual_lambdas", "slow_growth");
  fc.unlock("individual_lambdas", "bond");
  fc.unlock("individual_lambdas", "angle");
  fc.unlock("individual_lambdas", "dihedral");
  fc.unlock("individual_lambdas", "improper");
  fc.unlock("individual_lambdas", "crf");
  fc.unlock("individual_lambdas", "lj");
  fc.unlock("individual_lambdas", "com_removal");
  fc.unlock("individual_lambdas", "rf_excluded");
  fc.unlock("individual_lambdas", "pairlist_standard");
  fc.unlock("individual_lambdas", "pairlist_grid");
  fc.unlock("individual_lambdas", "cutoff_atomic");
  fc.unlock("individual_lambdas", "cg_martini");
  fc.unlock("individual_lambdas", "cg_gromos");
  fc.unlock("individual_lambdas", "mixed_grain");
  fc.unlock("individual_lambdas", "temp_berendsen");
  fc.unlock("individual_lambdas", "temp_nosehoover");
  fc.unlock("individual_lambdas", "temp_nosehoover_chains");
  fc.unlock("individual_lambdas", "position_rest");
  fc.unlock("individual_lambdas", "distance_rest");
  fc.unlock("individual_lambdas", "dihedral_rest");
  fc.unlock("individual_lambdas", "dihedral_const");
  fc.unlock("individual_lambdas", "jvalue_rest");
  fc.unlock("individual_lambdas", "rdc_rest");
  fc.unlock("individual_lambdas", "perscale");
  fc.unlock("individual_lambdas", "rottrans");
  fc.unlock("individual_lambdas", "repex_temp");
  fc.unlock("individual_lambdas", "repex_lambda");
  fc.unlock("individual_lambdas", "multicell");
  fc.unlock("individual_lambdas", "analysis");
  fc.unlock("individual_lambdas", "no_integration");
  fc.unlock("individual_lambdas", "stochdyn");
  fc.unlock("individual_lambdas", "multistep");
  fc.unlock("individual_lambdas", "multistep_boost");
  fc.unlock("individual_lambdas", "montecarlo");
  fc.unlock("individual_lambdas", "polarisation_cos");
  fc.unlock("individual_lambdas", "polarisation_cos_damped");
  fc.unlock("individual_lambdas", "random_gromos");
  fc.unlock("individual_lambdas", "random_gsl");
  fc.unlock("individual_lambdas", "eds");
  fc.unlock("individual_lambdas", "parallel_mpi");
  fc.unlock("individual_lambdas", "parallel_omp");

  fc.unlock("bond", "angle");
  fc.unlock("bond", "dihedral");
  fc.unlock("bond", "improper");
  fc.unlock("bond", "crf");
  fc.unlock("bond", "lj");
  fc.unlock("bond", "com_removal");
  fc.unlock("bond", "rf_excluded");
  fc.unlock("bond", "pairlist_standard");
  fc.unlock("bond", "pairlist_grid");
  fc.unlock("bond", "cutoff_atomic");
  fc.unlock("bond", "cg_martini");
  fc.unlock("bond", "cg_gromos");
  fc.unlock("bond", "mixed_grain");
  fc.unlock("bond", "temp_berendsen");
  fc.unlock("bond", "temp_nosehoover");
  fc.unlock("bond", "temp_nosehoover_chains");
  fc.unlock("bond", "position_rest");
  fc.unlock("bond", "position_const");
  fc.unlock("bond", "position_const_scaled");
  fc.unlock("bond", "distance_rest");
  fc.unlock("bond", "dihedral_rest");
  fc.unlock("bond", "dihedral_const");
  fc.unlock("bond", "jvalue_rest");
  fc.unlock("bond", "rdc_rest");
  fc.unlock("bond", "perscale");
  fc.unlock("bond", "rottrans");
  fc.unlock("bond", "repex_temp");
  fc.unlock("bond", "repex_lambda");
  fc.unlock("bond", "multicell");
  fc.unlock("bond", "analysis");
  fc.unlock("bond", "no_integration");
  fc.unlock("bond", "stochdyn");
  fc.unlock("bond", "multistep");
  fc.unlock("bond", "multistep_boost");
  fc.unlock("bond", "montecarlo");
  fc.unlock("bond", "polarisation_cos");
  fc.unlock("bond", "polarisation_cos_damped");
  fc.unlock("bond", "random_gromos");
  fc.unlock("bond", "random_gsl");
  fc.unlock("bond", "parallel_mpi");
  fc.unlock("bond", "parallel_omp");
  fc.unlock("angle", "dihedral");
  fc.unlock("angle", "improper");
  fc.unlock("angle", "crf");
  fc.unlock("angle", "lj");
  fc.unlock("angle", "com_removal");
  fc.unlock("angle", "rf_excluded");
  fc.unlock("angle", "pairlist_standard");
  fc.unlock("angle", "pairlist_grid");
  fc.unlock("angle", "cutoff_atomic");
  fc.unlock("angle", "cg_martini");
  fc.unlock("angle", "cg_gromos");
  fc.unlock("angle", "mixed_grain");
  fc.unlock("angle", "temp_berendsen");
  fc.unlock("angle", "temp_nosehoover");
  fc.unlock("angle", "temp_nosehoover_chains");
  fc.unlock("angle", "position_rest");
  fc.unlock("angle", "position_const");
  fc.unlock("angle", "position_const_scaled");
  fc.unlock("angle", "distance_rest");
  fc.unlock("angle", "dihedral_rest");
  fc.unlock("angle", "dihedral_const");
  fc.unlock("angle", "jvalue_rest");
  fc.unlock("angle", "rdc_rest");
  fc.unlock("angle", "perscale");
  fc.unlock("angle", "rottrans");
  fc.unlock("angle", "repex_temp");
  fc.unlock("angle", "repex_lambda");
  fc.unlock("angle", "multicell");
  fc.unlock("angle", "analysis");
  fc.unlock("angle", "no_integration");
  fc.unlock("angle", "stochdyn");
  fc.unlock("angle", "multistep");
  fc.unlock("angle", "multistep_boost");
  fc.unlock("angle", "montecarlo");
  fc.unlock("angle", "polarisation_cos");
  fc.unlock("angle", "polarisation_cos_damped");
  fc.unlock("angle", "random_gromos");
  fc.unlock("angle", "random_gsl");
  fc.unlock("angle", "parallel_mpi");
  fc.unlock("angle", "parallel_omp");
  fc.unlock("dihedral", "improper");
  fc.unlock("dihedral", "crf");
  fc.unlock("dihedral", "lj");
  fc.unlock("dihedral", "com_removal");
  fc.unlock("dihedral", "rf_excluded");
  fc.unlock("dihedral", "pairlist_standard");
  fc.unlock("dihedral", "pairlist_grid");
  fc.unlock("dihedral", "cutoff_atomic");
  fc.unlock("dihedral", "cg_martini");
  fc.unlock("dihedral", "cg_gromos");
  fc.unlock("dihedral", "mixed_grain");
  fc.unlock("dihedral", "temp_berendsen");
  fc.unlock("dihedral", "temp_nosehoover");
  fc.unlock("dihedral", "temp_nosehoover_chains");
  fc.unlock("dihedral", "position_rest");
  fc.unlock("dihedral", "position_const");
  fc.unlock("dihedral", "position_const_scaled");
  fc.unlock("dihedral", "distance_rest");
  fc.unlock("dihedral", "dihedral_rest");
  fc.unlock("dihedral", "dihedral_const");
  fc.unlock("dihedral", "jvalue_rest");
  fc.unlock("dihedral", "rdc_rest");
  fc.unlock("dihedral", "perscale");
  fc.unlock("dihedral", "rottrans");
  fc.unlock("dihedral", "repex_temp");
  fc.unlock("dihedral", "repex_lambda");
  fc.unlock("dihedral", "multicell");
  fc.unlock("dihedral", "analysis");
  fc.unlock("dihedral", "no_integration");
  fc.unlock("dihedral", "stochdyn");
  fc.unlock("dihedral", "multistep");
  fc.unlock("dihedral", "multistep_boost");
  fc.unlock("dihedral", "montecarlo");
  fc.unlock("dihedral", "polarisation_cos");
  fc.unlock("dihedral", "polarisation_cos_damped");
  fc.unlock("dihedral", "random_gromos");
  fc.unlock("dihedral", "random_gsl");
  fc.unlock("dihedral", "parallel_mpi");
  fc.unlock("dihedral", "parallel_omp");
  fc.unlock("improper", "crf");
  fc.unlock("improper", "lj");
  fc.unlock("improper", "com_removal");
  fc.unlock("improper", "rf_excluded");
  fc.unlock("improper", "pairlist_standard");
  fc.unlock("improper", "pairlist_grid");
  fc.unlock("improper", "cutoff_atomic");
  fc.unlock("improper", "cg_martini");
  fc.unlock("improper", "cg_gromos");
  fc.unlock("improper", "mixed_grain");
  fc.unlock("improper", "temp_berendsen");
  fc.unlock("improper", "temp_nosehoover");
  fc.unlock("improper", "temp_nosehoover_chains");
  fc.unlock("improper", "position_rest");
  fc.unlock("improper", "position_const");
  fc.unlock("improper", "position_const_scaled");
  fc.unlock("improper", "distance_rest");
  fc.unlock("improper", "dihedral_rest");
  fc.unlock("improper", "dihedral_const");
  fc.unlock("improper", "jvalue_rest");
  fc.unlock("improper", "rdc_rest");
  fc.unlock("improper", "perscale");
  fc.unlock("improper", "perscale");
  fc.unlock("improper", "rottrans");
  fc.unlock("improper", "repex_temp");
  fc.unlock("improper", "repex_lambda");
  fc.unlock("improper", "multicell");
  fc.unlock("improper", "analysis");
  fc.unlock("improper", "no_integration");
  fc.unlock("improper", "stochdyn");
  fc.unlock("improper", "multistep");
  fc.unlock("improper", "multistep_boost");
  fc.unlock("improper", "montecarlo");
  fc.unlock("improper", "polarisation_cos");
  fc.unlock("improper", "polarisation_cos_damped");
  fc.unlock("improper", "random_gromos");
  fc.unlock("improper", "random_gsl");
  fc.unlock("improper", "parallel_mpi");
  fc.unlock("improper", "parallel_omp");
  fc.unlock("crf", "lj");
  fc.unlock("crf", "com_removal");
  fc.unlock("crf", "rf_excluded");
  fc.unlock("crf", "pairlist_standard");
  fc.unlock("crf", "pairlist_grid");
  fc.unlock("crf", "cutoff_atomic");
  fc.unlock("crf", "cg_martini");
  fc.unlock("crf", "cg_gromos");
  fc.unlock("crf", "mixed_grain");
  fc.unlock("crf", "temp_berendsen");
  fc.unlock("crf", "temp_nosehoover");
  fc.unlock("crf", "temp_nosehoover_chains");
  fc.unlock("crf", "position_rest");
  fc.unlock("crf", "position_const");
  fc.unlock("crf", "position_const_scaled");
  fc.unlock("crf", "distance_rest");
  fc.unlock("crf", "dihedral_rest");
  fc.unlock("crf", "dihedral_const");
  fc.unlock("crf", "jvalue_rest");
  fc.unlock("crf", "rdc_rest");
  fc.unlock("crf", "perscale");
  fc.unlock("crf", "rottrans");
  fc.unlock("crf", "repex_temp");
  fc.unlock("crf", "repex_lambda");
  fc.unlock("crf", "multicell");
  fc.unlock("crf", "analysis");
  fc.unlock("crf", "no_integration");
  fc.unlock("crf", "stochdyn");
  fc.unlock("crf", "multistep");
  fc.unlock("crf", "multistep_boost");
  fc.unlock("crf", "montecarlo");
  fc.unlock("crf", "polarisation_cos");
  fc.unlock("crf", "polarisation_cos_damped");
  fc.unlock("crf", "random_gromos");
  fc.unlock("crf", "random_gsl");
  fc.unlock("crf", "parallel_mpi");
  fc.unlock("crf", "parallel_omp");
  fc.unlock("lj", "com_removal");
  fc.unlock("lj", "rf_excluded");
  fc.unlock("lj", "pairlist_standard");
  fc.unlock("lj", "pairlist_grid");
  fc.unlock("lj", "cutoff_atomic");
  fc.unlock("lj", "cg_martini");
  fc.unlock("lj", "cg_gromos");
  fc.unlock("lj", "mixed_grain");
  fc.unlock("lj", "temp_berendsen");
  fc.unlock("lj", "temp_nosehoover");
  fc.unlock("lj", "temp_nosehoover_chains");
  fc.unlock("lj", "position_rest");
  fc.unlock("lj", "position_const");
  fc.unlock("lj", "position_const_scaled");
  fc.unlock("lj", "distance_rest");
  fc.unlock("lj", "dihedral_rest");
  fc.unlock("lj", "dihedral_const");
  fc.unlock("lj", "jvalue_rest");
  fc.unlock("lj", "rdc_rest");
  fc.unlock("lj", "perscale");
  fc.unlock("lj", "rottrans");
  fc.unlock("lj", "repex_temp");
  fc.unlock("lj", "repex_lambda");
  fc.unlock("lj", "multicell");
  fc.unlock("lj", "analysis");
  fc.unlock("lj", "no_integration");
  fc.unlock("lj", "stochdyn");
  fc.unlock("lj", "multistep");
  fc.unlock("lj", "multistep_boost");
  fc.unlock("lj", "montecarlo");
  fc.unlock("lj", "polarisation_cos");
  fc.unlock("lj", "polarisation_cos_damped");
  fc.unlock("lj", "random_gromos");
  fc.unlock("lj", "random_gsl");
  fc.unlock("lj", "parallel_mpi");
  fc.unlock("lj", "parallel_omp");
  fc.unlock("com_removal", "rf_excluded");
  fc.unlock("com_removal", "pairlist_standard");
  fc.unlock("com_removal", "pairlist_grid");
  fc.unlock("com_removal", "cutoff_atomic");
  fc.unlock("com_removal", "cg_martini");
  fc.unlock("com_removal", "cg_gromos");
  fc.unlock("com_removal", "mixed_grain");
  fc.unlock("com_removal", "temp_berendsen");
  fc.unlock("com_removal", "temp_nosehoover");
  fc.unlock("com_removal", "temp_nosehoover_chains");
  fc.unlock("com_removal", "position_rest");
  fc.unlock("com_removal", "distance_rest");
  fc.unlock("com_removal", "dihedral_rest");
  fc.unlock("com_removal", "dihedral_const");
  fc.unlock("com_removal", "jvalue_rest");
  fc.unlock("com_removal", "rdc_rest");
  fc.unlock("com_removal", "perscale");
  fc.unlock("com_removal", "rottrans");
  fc.unlock("com_removal", "repex_temp");
  fc.unlock("com_removal", "repex_lambda");
  fc.unlock("com_removal", "multicell");
  fc.unlock("com_removal", "analysis");
  fc.unlock("com_removal", "no_integration");
  fc.unlock("com_removal", "stochdyn");
  fc.unlock("com_removal", "multistep");
  fc.unlock("com_removal", "multistep_boost");
  fc.unlock("com_removal", "montecarlo");
  fc.unlock("com_removal", "polarisation_cos");
  fc.unlock("com_removal", "polarisation_cos_damped");
  fc.unlock("com_removal", "random_gromos");
  fc.unlock("com_removal", "random_gsl");
  fc.unlock("com_removal", "parallel_mpi");
  fc.unlock("com_removal", "parallel_omp");
  fc.unlock("rf_excluded", "pairlist_standard");
  fc.unlock("rf_excluded", "pairlist_grid");
  fc.unlock("rf_excluded", "cutoff_atomic");
  fc.unlock("rf_excluded", "cg_martini");
  fc.unlock("rf_excluded", "cg_gromos");
  fc.unlock("rf_excluded", "mixed_grain");
  fc.unlock("rf_excluded", "temp_berendsen");
  fc.unlock("rf_excluded", "temp_nosehoover");
  fc.unlock("rf_excluded", "temp_nosehoover_chains");
  fc.unlock("rf_excluded", "position_rest");
  fc.unlock("rf_excluded", "position_const");
  fc.unlock("rf_excluded", "position_const_scaled");
  fc.unlock("rf_excluded", "distance_rest");
  fc.unlock("rf_excluded", "dihedral_rest");
  fc.unlock("rf_excluded", "dihedral_const");
  fc.unlock("rf_excluded", "jvalue_rest");
  fc.unlock("rf_excluded", "rdc_rest");
  fc.unlock("rf_excluded", "perscale");
  fc.unlock("rf_excluded", "rottrans");
  fc.unlock("rf_excluded", "repex_temp");
  fc.unlock("rf_excluded", "repex_lambda");
  fc.unlock("rf_excluded", "multicell");
  fc.unlock("rf_excluded", "analysis");
  fc.unlock("rf_excluded", "no_integration");
  fc.unlock("rf_excluded", "stochdyn");
  fc.unlock("rf_excluded", "multistep");
  fc.unlock("rf_excluded", "multistep_boost");
  fc.unlock("rf_excluded", "montecarlo");
  fc.unlock("rf_excluded", "polarisation_cos");
  fc.unlock("rf_excluded", "polarisation_cos_damped");
  fc.unlock("rf_excluded", "random_gromos");
  fc.unlock("rf_excluded", "random_gsl");
  fc.unlock("rf_excluded", "parallel_mpi");
  fc.unlock("rf_excluded", "parallel_omp");
  fc.unlock("pairlist_standard", "cutoff_atomic");
  fc.unlock("pairlist_standard", "cg_martini");
  fc.unlock("pairlist_standard", "cg_gromos");
  fc.unlock("pairlist_standard", "mixed_grain");
  fc.unlock("pairlist_standard", "temp_berendsen");
  fc.unlock("pairlist_standard", "temp_nosehoover");
  fc.unlock("pairlist_standard", "temp_nosehoover_chains");
  fc.unlock("pairlist_standard", "position_rest");
  fc.unlock("pairlist_standard", "position_const");
  fc.unlock("pairlist_standard", "position_const_scaled");
  fc.unlock("pairlist_standard", "distance_rest");
  fc.unlock("pairlist_standard", "dihedral_rest");
  fc.unlock("pairlist_standard", "dihedral_const");
  fc.unlock("pairlist_standard", "jvalue_rest");
  fc.unlock("pairlist_standard", "rdc_rest");
  fc.unlock("pairlist_standard", "perscale");
  fc.unlock("pairlist_standard", "rottrans");
  fc.unlock("pairlist_standard", "repex_temp");
  fc.unlock("pairlist_standard", "repex_lambda");
  fc.unlock("pairlist_standard", "multicell");
  fc.unlock("pairlist_standard", "analysis");
  fc.unlock("pairlist_standard", "no_integration");
  fc.unlock("pairlist_standard", "stochdyn");
  fc.unlock("pairlist_standard", "multistep");
  fc.unlock("pairlist_standard", "multistep_boost");
  fc.unlock("pairlist_standard", "montecarlo");
  fc.unlock("pairlist_standard", "polarisation_cos");
  fc.unlock("pairlist_standard", "polarisation_cos_damped");
  fc.unlock("pairlist_standard", "random_gromos");
  fc.unlock("pairlist_standard", "random_gsl");
  fc.unlock("pairlist_standard", "parallel_mpi");
  fc.unlock("pairlist_standard", "parallel_omp");
  fc.unlock("pairlist_grid", "cg_martini");
  fc.unlock("pairlist_grid", "cg_gromos");
  fc.unlock("pairlist_grid", "cutoff_atomic");
  fc.unlock("pairlist_grid", "mixed_grain");
  fc.unlock("pairlist_grid", "temp_berendsen");
  fc.unlock("pairlist_grid", "temp_nosehoover");
  fc.unlock("pairlist_grid", "temp_nosehoover_chains");
  fc.unlock("pairlist_grid", "position_rest");
  fc.unlock("pairlist_grid", "position_const");
  fc.unlock("pairlist_grid", "position_const_scaled");
  fc.unlock("pairlist_grid", "distance_rest");
  fc.unlock("pairlist_grid", "dihedral_rest");
  fc.unlock("pairlist_grid", "dihedral_const");
  fc.unlock("pairlist_grid", "jvalue_rest");
  fc.unlock("pairlist_grid", "rdc_rest");
  fc.unlock("pairlist_grid", "perscale");
  fc.unlock("pairlist_grid", "rottrans");
  fc.unlock("pairlist_grid", "repex_temp");
  fc.unlock("pairlist_grid", "repex_lambda");
  fc.unlock("pairlist_grid", "multicell");
  fc.unlock("pairlist_grid", "analysis");
  fc.unlock("pairlist_grid", "no_integration");
  fc.unlock("pairlist_grid", "stochdyn");
  fc.unlock("pairlist_grid", "multistep");
  fc.unlock("pairlist_grid", "multistep_boost");
  fc.unlock("pairlist_grid", "montecarlo");
  fc.unlock("pairlist_grid", "polarisation_cos");
  fc.unlock("pairlist_grid", "polarisation_cos_damped");
  fc.unlock("pairlist_grid", "random_gromos");
  fc.unlock("pairlist_grid", "random_gsl");
  fc.unlock("pairlist_grid", "parallel_mpi");
  fc.unlock("pairlist_grid", "parallel_omp");
  fc.unlock("cutoff_atomic", "cg_martini");
  fc.unlock("cutoff_atomic", "cg_gromos");
  fc.unlock("cutoff_atomic", "mixed_grain");
  fc.unlock("cutoff_atomic", "temp_berendsen");
  fc.unlock("cutoff_atomic", "temp_nosehoover");
  fc.unlock("cutoff_atomic", "temp_nosehoover_chains");
  fc.unlock("cutoff_atomic", "position_rest");
  fc.unlock("cutoff_atomic", "position_const");
  fc.unlock("cutoff_atomic", "position_const_scaled");
  fc.unlock("cutoff_atomic", "distance_rest");
  fc.unlock("cutoff_atomic", "dihedral_rest");
  fc.unlock("cutoff_atomic", "dihedral_const");
  fc.unlock("cutoff_atomic", "jvalue_rest");
  fc.unlock("cutoff_atomic", "rdc_rest");
  fc.unlock("cutoff_atomic", "perscale");
  fc.unlock("cutoff_atomic", "rottrans");
  fc.unlock("cutoff_atomic", "repex_temp");
  fc.unlock("cutoff_atomic", "repex_lambda");
  fc.unlock("cutoff_atomic", "multicell");
  fc.unlock("cutoff_atomic", "analysis");
  fc.unlock("cutoff_atomic", "no_integration");
  fc.unlock("cutoff_atomic", "stochdyn");
  fc.unlock("cutoff_atomic", "multistep");
  fc.unlock("cutoff_atomic", "multistep_boost");
  fc.unlock("cutoff_atomic", "montecarlo");
  fc.unlock("cutoff_atomic", "polarisation_cos");
  fc.unlock("cutoff_atomic", "polarisation_cos_damped");
  fc.unlock("cutoff_atomic", "random_gromos");
  fc.unlock("cutoff_atomic", "random_gsl");
  fc.unlock("cutoff_atomic", "parallel_mpi");
  fc.unlock("cutoff_atomic", "parallel_omp");
  fc.unlock("cg_martini", "temp_berendsen");
  fc.unlock("cg_martini", "temp_nosehoover");
  fc.unlock("cg_martini", "temp_nosehoover_chains");
  fc.unlock("cg_martini", "position_rest");
  fc.unlock("cg_martini", "position_const");
  fc.unlock("cg_martini", "position_const_scaled");
  fc.unlock("cg_martini", "distance_rest");
  fc.unlock("cg_martini", "perscale");
  fc.unlock("cg_martini", "rottrans");
  fc.unlock("cg_martini", "repex_temp");
  fc.unlock("cg_martini", "repex_lambda");
  fc.unlock("cg_martini", "multicell");
  fc.unlock("cg_martini", "analysis");
  fc.unlock("cg_martini", "no_integration");
  fc.unlock("cg_martini", "stochdyn");
  fc.unlock("cg_martini", "multistep");
  fc.unlock("cg_martini", "multistep_boost");
  fc.unlock("cg_martini", "random_gromos");
  fc.unlock("cg_martini", "random_gsl");
  fc.unlock("cg_martini", "parallel_mpi");
  fc.unlock("cg_martini", "parallel_omp");
  fc.unlock("cg_gromos", "temp_berendsen");
  fc.unlock("cg_gromos", "temp_nosehoover");
  fc.unlock("cg_gromos", "temp_nosehoover_chains");
  fc.unlock("cg_gromos", "position_rest");
  fc.unlock("cg_gromos", "position_const");
  fc.unlock("cg_gromos", "position_const_scaled");
  fc.unlock("cg_gromos", "distance_rest");
  fc.unlock("cg_gromos", "perscale");
  fc.unlock("cg_gromos", "rottrans");
  fc.unlock("cg_gromos", "repex_temp");
  fc.unlock("cg_gromos", "repex_lambda");
  fc.unlock("cg_gromos", "multicell");
  fc.unlock("cg_gromos", "analysis");
  fc.unlock("cg_gromos", "no_integration");
  fc.unlock("cg_gromos", "stochdyn");
  fc.unlock("cg_gromos", "multistep");
  fc.unlock("cg_gromos", "multistep_boost");
  fc.unlock("cg_gromos", "random_gromos");
  fc.unlock("cg_gromos", "random_gsl");
  fc.unlock("cg_gromos", "parallel_mpi");
  fc.unlock("cg_gromos", "parallel_omp");
  fc.unlock("mixed_grain", "temp_berendsen");
  fc.unlock("mixed_grain", "temp_nosehoover");
  fc.unlock("mixed_grain", "temp_nosehoover_chains");
  fc.unlock("mixed_grain", "position_rest");
  fc.unlock("mixed_grain", "position_const");
  fc.unlock("mixed_grain", "position_const_scaled");
  fc.unlock("mixed_grain", "distance_rest");
  fc.unlock("mixed_grain", "perscale");
  fc.unlock("mixed_grain", "rottrans");
  fc.unlock("mixed_grain", "repex_temp");
  fc.unlock("mixed_grain", "repex_lambda");
  fc.unlock("mixed_grain", "multicell");
  fc.unlock("mixed_grain", "analysis");
  fc.unlock("mixed_grain", "no_integration");
  fc.unlock("mixed_grain", "stochdyn");
  fc.unlock("mixed_grain", "multistep");
  fc.unlock("mixed_grain", "multistep_boost");
  fc.unlock("mixed_grain", "random_gromos");
  fc.unlock("mixed_grain", "random_gsl");
  fc.unlock("mixed_grain", "parallel_mpi");
  fc.unlock("mixed_grain", "parallel_omp");
  fc.unlock("temp_berendsen", "position_rest");
  fc.unlock("temp_berendsen", "position_const");
  fc.unlock("temp_berendsen", "position_const_scaled");
  fc.unlock("temp_berendsen", "distance_rest");
  fc.unlock("temp_berendsen", "dihedral_rest");
  fc.unlock("temp_berendsen", "dihedral_const");
  fc.unlock("temp_berendsen", "jvalue_rest");
  fc.unlock("temp_berendsen", "rdc_rest");
  fc.unlock("temp_berendsen", "perscale");
  fc.unlock("temp_berendsen", "rottrans");
  fc.unlock("temp_berendsen", "repex_temp");
  fc.unlock("temp_berendsen", "repex_lambda");
  fc.unlock("temp_berendsen", "multicell");
  fc.unlock("temp_berendsen", "analysis");
  fc.unlock("temp_berendsen", "no_integration");
  fc.unlock("temp_berendsen", "stochdyn");
  fc.unlock("temp_berendsen", "multistep");
  fc.unlock("temp_berendsen", "multistep_boost");
  fc.unlock("temp_berendsen", "montecarlo");
  fc.unlock("temp_berendsen", "polarisation_cos");
  fc.unlock("temp_berendsen", "polarisation_cos_damped");
  fc.unlock("temp_berendsen", "random_gromos");
  fc.unlock("temp_berendsen", "random_gsl");
  fc.unlock("temp_berendsen", "parallel_mpi");
  fc.unlock("temp_berendsen", "parallel_omp");
  fc.unlock("temp_nosehoover", "position_rest");
  fc.unlock("temp_nosehoover", "position_const");
  fc.unlock("temp_nosehoover", "position_const_scaled");
  fc.unlock("temp_nosehoover", "distance_rest");
  fc.unlock("temp_nosehoover", "dihedral_rest");
  fc.unlock("temp_nosehoover", "dihedral_const");
  fc.unlock("temp_nosehoover", "jvalue_rest");
  fc.unlock("temp_nosehoover", "rdc_rest");
  fc.unlock("temp_nosehoover", "perscale");
  fc.unlock("temp_nosehoover", "rottrans");
  fc.unlock("temp_nosehoover", "repex_temp");
  fc.unlock("temp_nosehoover", "repex_lambda");
  fc.unlock("temp_nosehoover", "multicell");
  fc.unlock("temp_nosehoover", "analysis");
  fc.unlock("temp_nosehoover", "no_integration");
  fc.unlock("temp_nosehoover", "stochdyn");
  fc.unlock("temp_nosehoover", "multistep");
  fc.unlock("temp_nosehoover", "multistep_boost");
  fc.unlock("temp_nosehoover", "montecarlo");
  fc.unlock("temp_nosehoover", "polarisation_cos");
  fc.unlock("temp_nosehoover", "polarisation_cos_damped");
  fc.unlock("temp_nosehoover", "random_gromos");
  fc.unlock("temp_nosehoover", "random_gsl");
  fc.unlock("temp_nosehoover", "parallel_mpi");
  fc.unlock("temp_nosehoover", "parallel_omp");
  fc.unlock("temp_nosehoover_chains", "position_rest");
  fc.unlock("temp_nosehoover_chains", "position_const");
  fc.unlock("temp_nosehoover_chains", "position_const_scaled");
  fc.unlock("temp_nosehoover_chains", "distance_rest");
  fc.unlock("temp_nosehoover_chains", "dihedral_rest");
  fc.unlock("temp_nosehoover_chains", "dihedral_const");
  fc.unlock("temp_nosehoover_chains", "jvalue_rest");
  fc.unlock("temp_nosehoover_chains", "rdc_rest");
  fc.unlock("temp_nosehoover_chains", "perscale");
  fc.unlock("temp_nosehoover_chains", "rottrans");
  fc.unlock("temp_nosehoover_chains", "repex_temp");
  fc.unlock("temp_nosehoover_chains", "repex_lambda");
  fc.unlock("temp_nosehoover_chains", "multicell");
  fc.unlock("temp_nosehoover_chains", "analysis");
  fc.unlock("temp_nosehoover_chains", "no_integration");
  fc.unlock("temp_nosehoover_chains", "stochdyn");
  fc.unlock("temp_nosehoover_chains", "multistep");
  fc.unlock("temp_nosehoover_chains", "multistep_boost");
  fc.unlock("temp_nosehoover_chains", "montecarlo");
  fc.unlock("temp_nosehoover_chains", "polarisation_cos");
  fc.unlock("temp_nosehoover_chains", "polarisation_cos_damped");
  fc.unlock("temp_nosehoover_chains", "random_gromos");
  fc.unlock("temp_nosehoover_chains", "random_gsl");
  fc.unlock("temp_nosehoover_chains", "parallel_mpi");
  fc.unlock("temp_nosehoover_chains", "parallel_omp");
  fc.unlock("position_rest", "distance_rest");
  fc.unlock("position_rest", "dihedral_rest");
  fc.unlock("position_rest", "dihedral_const");
  fc.unlock("position_rest", "jvalue_rest");
  fc.unlock("position_rest", "rdc_rest");
  fc.unlock("position_rest", "perscale");
  fc.unlock("position_rest", "rottrans");
  fc.unlock("position_rest", "repex_temp");
  fc.unlock("position_rest", "repex_lambda");
  fc.unlock("position_rest", "multicell");
  fc.unlock("position_rest", "analysis");
  fc.unlock("position_rest", "no_integration");
  fc.unlock("position_rest", "stochdyn");
  fc.unlock("position_rest", "multistep");
  fc.unlock("position_rest", "multistep_boost");
  fc.unlock("position_rest", "montecarlo");
  fc.unlock("position_rest", "polarisation_cos");
  fc.unlock("position_rest", "polarisation_cos_damped");
  fc.unlock("position_rest", "random_gromos");
  fc.unlock("position_rest", "random_gsl");
  fc.unlock("position_rest", "parallel_mpi");
  fc.unlock("position_rest", "parallel_omp");
  fc.unlock("position_const", "distance_rest");
  fc.unlock("position_const", "dihedral_rest");
  fc.unlock("position_const", "jvalue_rest");
  fc.unlock("position_const", "rdc_rest");
  fc.unlock("position_const", "perscale");
  fc.unlock("position_const", "repex_temp");
  fc.unlock("position_const", "repex_lambda");
  fc.unlock("position_const", "multicell");
  fc.unlock("position_const", "analysis");
  fc.unlock("position_const", "no_integration");
  fc.unlock("position_const", "stochdyn");
  fc.unlock("position_const", "multistep");
  fc.unlock("position_const", "multistep_boost");
  fc.unlock("position_const", "montecarlo");
  fc.unlock("position_const", "polarisation_cos");
  fc.unlock("position_const", "polarisation_cos_damped");
  fc.unlock("position_const", "random_gromos");
  fc.unlock("position_const", "random_gsl");
  fc.unlock("position_const", "parallel_mpi");
  fc.unlock("position_const", "parallel_omp");
  fc.unlock("position_const_scaled", "distance_rest");
  fc.unlock("position_const_scaled", "dihedral_rest");
  fc.unlock("position_const_scaled", "jvalue_rest");
  fc.unlock("position_const_scaled", "rdc_rest");
  fc.unlock("position_const_scaled", "perscale");
  fc.unlock("position_const_scaled", "rottrans");
  fc.unlock("position_const_scaled", "repex_temp");
  fc.unlock("position_const_scaled", "repex_lambda");
  fc.unlock("position_const_scaled", "multicell");
  fc.unlock("position_const_scaled", "analysis");
  fc.unlock("position_const_scaled", "no_integration");
  fc.unlock("position_const_scaled", "stochdyn");
  fc.unlock("position_const_scaled", "multistep");
  fc.unlock("position_const_scaled", "multistep_boost");
  fc.unlock("position_const_scaled", "montecarlo");
  fc.unlock("position_const_scaled", "polarisation_cos");
  fc.unlock("position_const_scaled", "polarisation_cos_damped");
  fc.unlock("position_const_scaled", "random_gromos");
  fc.unlock("position_const_scaled", "random_gsl");
  fc.unlock("position_const_scaled", "parallel_mpi");
  fc.unlock("position_const_scaled", "parallel_omp");
  fc.unlock("distance_rest", "dihedral_rest");
  fc.unlock("distance_rest", "dihedral_const");
  fc.unlock("distance_rest", "jvalue_rest");
  fc.unlock("distance_rest", "rdc_rest");
  fc.unlock("distance_rest", "perscale");
  fc.unlock("distance_rest", "rottrans");
  fc.unlock("distance_rest", "repex_temp");
  fc.unlock("distance_rest", "repex_lambda");
  fc.unlock("distance_rest", "multicell");
  fc.unlock("distance_rest", "analysis");
  fc.unlock("distance_rest", "no_integration");
  fc.unlock("distance_rest", "stochdyn");
  fc.unlock("distance_rest", "multistep");
  fc.unlock("distance_rest", "multistep_boost");
  fc.unlock("distance_rest", "montecarlo");
  fc.unlock("distance_rest", "polarisation_cos");
  fc.unlock("distance_rest", "polarisation_cos_damped");
  fc.unlock("distance_rest", "random_gromos");
  fc.unlock("distance_rest", "random_gsl");
  fc.unlock("distance_rest", "parallel_mpi");
  fc.unlock("distance_rest", "parallel_omp");
  fc.unlock("dihedral_rest", "jvalue_rest");
  fc.unlock("dihedral_rest", "rdc_rest");
  fc.unlock("dihedral_rest", "perscale");
  fc.unlock("dihedral_rest", "rottrans");
  fc.unlock("dihedral_rest", "repex_temp");
  fc.unlock("dihedral_rest", "repex_lambda");
  fc.unlock("dihedral_rest", "multicell");
  fc.unlock("dihedral_rest", "analysis");
  fc.unlock("dihedral_rest", "no_integration");
  fc.unlock("dihedral_rest", "stochdyn");
  fc.unlock("dihedral_rest", "multistep");
  fc.unlock("dihedral_rest", "multistep_boost");
  fc.unlock("dihedral_rest", "montecarlo");
  fc.unlock("dihedral_rest", "polarisation_cos");
  fc.unlock("dihedral_rest", "polarisation_cos_damped");
  fc.unlock("dihedral_rest", "random_gromos");
  fc.unlock("dihedral_rest", "random_gsl");
  fc.unlock("dihedral_rest", "parallel_mpi");
  fc.unlock("dihedral_rest", "parallel_omp");
  fc.unlock("dihedral_const", "jvalue_rest");
  fc.unlock("dihedral_const", "rdc_rest");
  fc.unlock("dihedral_const", "perscale");
  fc.unlock("dihedral_const", "rottrans");
  fc.unlock("dihedral_const", "repex_temp");
  fc.unlock("dihedral_const", "repex_lambda");
  fc.unlock("dihedral_const", "multicell");
  fc.unlock("dihedral_const", "analysis");
  fc.unlock("dihedral_const", "no_integration");
  fc.unlock("dihedral_const", "stochdyn");
  fc.unlock("dihedral_const", "multistep");
  fc.unlock("dihedral_const", "multistep_boost");
  fc.unlock("dihedral_const", "montecarlo");
  fc.unlock("dihedral_const", "polarisation_cos");
  fc.unlock("dihedral_const", "polarisation_cos_damped");
  fc.unlock("dihedral_const", "random_gromos");
  fc.unlock("dihedral_const", "random_gsl");
  fc.unlock("dihedral_const", "parallel_mpi");
  fc.unlock("dihedral_const", "parallel_omp");
  fc.unlock("jvalue_rest", "rdc_rest");
  fc.unlock("jvalue_rest", "perscale");
  fc.unlock("jvalue_rest", "rottrans");
  fc.unlock("jvalue_rest", "repex_temp");
  fc.unlock("jvalue_rest", "repex_lambda");
  fc.unlock("jvalue_rest", "multicell");
  fc.unlock("jvalue_rest", "analysis");
  fc.unlock("jvalue_rest", "no_integration");
  fc.unlock("jvalue_rest", "stochdyn");
  fc.unlock("jvalue_rest", "multistep");
  fc.unlock("jvalue_rest", "multistep_boost");
  fc.unlock("jvalue_rest", "montecarlo");
  fc.unlock("jvalue_rest", "polarisation_cos");
  fc.unlock("jvalue_rest", "polarisation_cos_damped");
  fc.unlock("jvalue_rest", "random_gromos");
  fc.unlock("jvalue_rest", "random_gsl");
  fc.unlock("jvalue_rest", "parallel_mpi");
  fc.unlock("jvalue_rest", "parallel_omp");
  fc.unlock("rdc_rest", "perscale");
  fc.unlock("rdc_rest", "rottrans");
  fc.unlock("rdc_rest", "repex_temp");
  fc.unlock("rdc_rest", "repex_lambda");
  fc.unlock("rdc_rest", "multicell");
  fc.unlock("rdc_rest", "analysis");
  fc.unlock("rdc_rest", "no_integration");
  fc.unlock("rdc_rest", "stochdyn");
  fc.unlock("rdc_rest", "multistep");
  fc.unlock("rdc_rest", "multistep_boost");
  fc.unlock("rdc_rest", "montecarlo");
  fc.unlock("rdc_rest", "polarisation_cos");
  fc.unlock("rdc_rest", "polarisation_cos_damped");
  fc.unlock("rdc_rest", "random_gromos");
  fc.unlock("rdc_rest", "random_gsl");
  fc.unlock("rdc_rest", "parallel_mpi");
  fc.unlock("rdc_rest", "parallel_omp");
  fc.unlock("perscale", "rottrans");
  fc.unlock("perscale", "repex_temp");
  fc.unlock("perscale", "repex_lambda");
  fc.unlock("perscale", "multicell");
  fc.unlock("perscale", "analysis");
  fc.unlock("perscale", "no_integration");
  fc.unlock("perscale", "stochdyn");
  fc.unlock("perscale", "multistep");
  fc.unlock("perscale", "multistep_boost");
  fc.unlock("perscale", "montecarlo");
  fc.unlock("perscale", "polarisation_cos");
  fc.unlock("perscale", "polarisation_cos_damped");
  fc.unlock("perscale", "random_gromos");
  fc.unlock("perscale", "random_gsl");
  fc.unlock("perscale", "parallel_mpi");
  fc.unlock("perscale", "parallel_omp");
  fc.unlock("rottrans", "repex_temp");
  fc.unlock("rottrans", "repex_lambda");
  fc.unlock("rottrans", "multicell");
  fc.unlock("rottrans", "analysis");
  fc.unlock("rottrans", "no_integration");
  fc.unlock("rottrans", "stochdyn");
  fc.unlock("rottrans", "multistep");
  fc.unlock("rottrans", "multistep_boost");
  fc.unlock("rottrans", "montecarlo");
  fc.unlock("rottrans", "polarisation_cos");
  fc.unlock("rottrans", "polarisation_cos_damped");
  fc.unlock("rottrans", "random_gromos");
  fc.unlock("rottrans", "random_gsl");
  fc.unlock("rottrans", "parallel_mpi");
  fc.unlock("rottrans", "parallel_omp");
  fc.unlock("repex_temp", "repex_lambda");
  fc.unlock("repex_temp", "multicell");
  //fc.unlock("repex_temp", "analysis");
  fc.unlock("repex_temp", "no_integration");
  fc.unlock("repex_temp", "montecarlo");
  fc.unlock("repex_temp", "polarisation_cos");
  fc.unlock("repex_temp", "polarisation_cos_damped");
  fc.unlock("repex_temp", "random_gromos");
  fc.unlock("repex_temp", "random_gsl");
  fc.unlock("repex_temp", "parallel_mpi");
  fc.unlock("repex_temp", "parallel_omp");
  //fc.unlock("repex_temp", "stochdyn");
  fc.unlock("repex_lambda", "multicell");
  //fc.unlock("repex_lambda", "analysis");
  fc.unlock("repex_lambda", "no_integration");
  fc.unlock("repex_lambda", "polarisation_cos");
  fc.unlock("repex_lambda", "polarisation_cos_damped");
  fc.unlock("repex_lambda", "random_gromos");
  fc.unlock("repex_lambda", "random_gsl");
  fc.unlock("repex_lambda", "parallel_mpi");
  fc.unlock("repex_lambda", "parallel_omp");
  fc.unlock("repex_lambda", "stochdyn");
  fc.unlock("multicell", "analysis");
  fc.unlock("multicell", "no_integration");
  fc.unlock("multicell", "stochdyn");
  fc.unlock("multicell", "random_gromos");
  fc.unlock("multicell", "polarisation_cos");
  fc.unlock("multicell", "polarisation_cos_damped");
  fc.unlock("multicell", "analysis");
  fc.unlock("multicell", "parallel_omp");
  fc.unlock("analysis", "no_integration");
  //fc.unlock("analysis", "stochdyn");
  fc.unlock("analysis", "multistep");
  fc.unlock("analysis", "multistep_boost");
  fc.unlock("analysis", "montecarlo");
  fc.unlock("analysis", "random_gromos");
  fc.unlock("analysis", "random_gsl");
  fc.unlock("analysis", "parallel_mpi");
  fc.unlock("analysis", "parallel_omp");
  fc.unlock("no_integration", "multistep");
  fc.unlock("no_integration", "multistep_boost");
  fc.unlock("no_integration", "random_gromos");
  fc.unlock("no_integration", "random_gsl");
  fc.unlock("no_integration", "parallel_mpi");
  fc.unlock("no_integration", "parallel_omp");
  fc.unlock("stochdyn", "multistep");
  fc.unlock("stochdyn", "multistep_boost");
  fc.unlock("stochdyn", "montecarlo");
  fc.unlock("stochdyn", "polarisation_cos");
  fc.unlock("stochdyn", "polarisation_cos_damped");
  fc.unlock("stochdyn", "random_gromos");
  fc.unlock("stochdyn", "random_gsl");
  fc.unlock("stochdyn", "parallel_mpi");
  fc.unlock("stochdyn", "parallel_omp");
  fc.unlock("stochdyn", "solvent");
  fc.unlock("multistep", "multistep_boost");
  fc.unlock("multistep", "montecarlo");
  fc.unlock("multistep", "polarisation_cos");
  fc.unlock("multistep", "polarisation_cos_damped");
  fc.unlock("multistep", "random_gromos");
  fc.unlock("multistep", "random_gsl");
  fc.unlock("multistep", "parallel_mpi");
  fc.unlock("multistep", "parallel_omp");
  fc.unlock("multistep_boost", "montecarlo");
  fc.unlock("multistep_boost", "polarisation_cos");
  fc.unlock("multistep_boost", "polarisation_cos_damped");
  fc.unlock("multistep_boost", "random_gromos");
  fc.unlock("multistep_boost", "random_gsl");
  fc.unlock("multistep_boost", "parallel_mpi");
  fc.unlock("multistep_boost", "parallel_omp");
  fc.unlock("montecarlo", "polarisation_cos");
  fc.unlock("montecarlo", "polarisation_cos_damped");
  fc.unlock("montecarlo", "random_gsl");
  fc.unlock("montecarlo", "parallel_mpi");
  fc.unlock("montecarlo", "parallel_omp");
  fc.unlock("polarisation_cos", "polarisation_cos_damped");
  fc.unlock("polarisation_cos", "random_gromos");
  fc.unlock("polarisation_cos", "random_gsl");
  fc.unlock("polarisation_cos", "parallel_mpi");
  fc.unlock("polarisation_cos", "parallel_omp");
  fc.unlock("polarisation_cos_damped", "random_gromos");
  fc.unlock("polarisation_cos_damped", "random_gsl");
  fc.unlock("polarisation_cos_damped", "parallel_mpi");
  fc.unlock("random_gromos", "parallel_mpi");
  fc.unlock("random_gromos", "parallel_omp");
  fc.unlock("random_gsl", "parallel_mpi");
  fc.unlock("random_gsl", "parallel_omp");
  fc.unlock("slow_growth", "solute");
  fc.unlock("slow_growth", "solvent");
  fc.unlock("slow_growth", "solvent_only");
  fc.unlock("slow_growth", "steepest_descent");
  fc.unlock("slow_growth", "solute_constraint_off");
  fc.unlock("slow_growth", "solute_shake");
  fc.unlock("slow_growth", "solute_lincs");
  fc.unlock("slow_growth", "solute_flexshake");
  fc.unlock("slow_growth", "solvent_constraint_off");
  fc.unlock("slow_growth", "solvent_shake");
  fc.unlock("slow_growth", "pressure_calculation");
  fc.unlock("slow_growth", "pressure_scale_berendsen");
  fc.unlock("slow_growth", "virial_off");
  fc.unlock("slow_growth", "virial_atomic");
  fc.unlock("slow_growth", "virial_molecular");
  fc.unlock("slow_growth", "vacuum");
  fc.unlock("slow_growth", "pbc_r");
  fc.unlock("slow_growth", "pbc_c");
  fc.unlock("slow_growth", "pbc_t");
  fc.unlock("slow_growth", "bond");
  fc.unlock("slow_growth", "angle");
  fc.unlock("slow_growth", "dihedral");
  fc.unlock("slow_growth", "improper");
  fc.unlock("slow_growth", "crf");
  fc.unlock("slow_growth", "lj");
  fc.unlock("slow_growth", "com_removal");
  fc.unlock("slow_growth", "rf_excluded");
  fc.unlock("slow_growth", "pairlist_standard");
  fc.unlock("slow_growth", "pairlist_grid");
  fc.unlock("slow_growth", "cutoff_atomic");
  fc.unlock("slow_growth", "cg_martini");
  fc.unlock("slow_growth", "cg_gromos");
  fc.unlock("slow_growth", "mixed_grain");
  fc.unlock("slow_growth", "temp_berendsen");
  fc.unlock("slow_growth", "temp_nosehoover");
  fc.unlock("slow_growth", "temp_nosehoover_chains");
  fc.unlock("slow_growth", "position_rest");
  fc.unlock("slow_growth", "distance_rest");
  fc.unlock("slow_growth", "dihedral_rest");
  fc.unlock("slow_growth", "dihedral_const");
  fc.unlock("slow_growth", "jvalue_rest");
  fc.unlock("slow_growth", "rdc_rest");
  fc.unlock("slow_growth", "perscale");
  fc.unlock("slow_growth", "rottrans");
  fc.unlock("slow_growth", "repex_temp");
  fc.unlock("slow_growth", "multicell");
  fc.unlock("slow_growth", "analysis");
  fc.unlock("slow_growth", "no_integration");
  fc.unlock("slow_growth", "stochdyn");
  fc.unlock("slow_growth", "multistep");
  fc.unlock("slow_growth", "multistep_boost");
  fc.unlock("slow_growth", "polarisation_cos");
  fc.unlock("slow_growth", "polarisation_cos_damped");
  fc.unlock("slow_growth", "random_gromos");
  fc.unlock("slow_growth", "random_gsl");
  fc.unlock("slow_growth", "parallel_mpi");
  fc.unlock("slow_growth", "parallel_omp");
  fc.unlock("eds", "solute");
  fc.unlock("eds", "solvent");
  fc.unlock("eds", "steepest_descent");
  fc.unlock("eds", "solute_constraint_off");
  fc.unlock("eds", "solute_shake");
  fc.unlock("eds", "solute_lincs");
  //fc.unlock("eds", "solute_flexshake"); // probably works
  //fc.unlock("eds", "solvent_constraint_off");
  fc.unlock("eds", "solvent_shake");
  fc.unlock("eds", "pressure_calculation");
  fc.unlock("eds", "pressure_scale_berendsen");
  fc.unlock("eds", "virial_off");
  fc.unlock("eds", "virial_atomic");
  fc.unlock("eds", "virial_molecular");
  fc.unlock("eds", "vacuum");
  fc.unlock("eds", "pbc_r");
  //fc.unlock("eds", "pbc_c"); // probably works - test!
  //fc.unlock("eds", "pbc_t"); // probably works - test!
  //fc.unlock("eds", "perturbation");
  //fc.unlock("eds", "perturbation_scaling");
  //fc.unlock("eds", "slow_growth");
  fc.unlock("eds", "bond");
  fc.unlock("eds", "angle");
  fc.unlock("eds", "dihedral");
  fc.unlock("eds", "improper");
  fc.unlock("eds", "crf");
  fc.unlock("eds", "lj");
  fc.unlock("eds", "com_removal");
  fc.unlock("eds", "rf_excluded"); // fix!
  fc.unlock("eds", "pairlist_standard");
  fc.unlock("eds", "pairlist_grid");
  fc.unlock("eds", "cutoff_atomic");
  //fc.unlock("eds", "cg_martini");
  //fc.unlock("eds", "cg_gromos");
  fc.unlock("eds", "mixed_grain");
  fc.unlock("eds", "temp_berendsen");
  fc.unlock("eds", "temp_nosehoover");
  fc.unlock("eds", "temp_nosehoover_chains");
  fc.unlock("eds", "position_rest");
  fc.unlock("eds", "distance_rest");
  fc.unlock("eds", "dihedral_rest");
  fc.unlock("eds", "dihedral_const");
  //fc.unlock("eds", "jvalue_rest");
  //fc.unlock("eds", "perscale");
  fc.unlock("eds", "rottrans");
  //fc.unlock("eds", "repex_temp");
  fc.unlock("eds", "repex_lambda");
  //fc.unlock("eds", "multicell");
  //fc.unlock("eds", "analysis");
  //fc.unlock("eds", "no_integration");
  fc.unlock("eds", "stochdyn"); // test! probably works!
  //fc.unlock("eds", "multistep");
  //fc.unlock("eds", "multistep_boost");
  //fc.unlock("eds", "montecarlo");
  //fc.unlock("eds", "polarisation_cos");
  // fc.unlock("eds", "polarisation_cos_damped");
  fc.unlock("eds", "random_gromos");
  fc.unlock("eds", "random_gsl");
  fc.unlock("eds", "parallel_mpi");
  fc.unlock("eds", "parallel_omp");

  fc.unlock("aeds", "solute");
  fc.unlock("aeds", "solvent");
  fc.unlock("aeds", "solvent_only");
  //fc.unlock("aeds", "steepest_descent");
  fc.unlock("aeds", "solute_constraint_off");
  fc.unlock("aeds", "solute_shake");
  fc.unlock("aeds", "solute_lincs");
  fc.unlock("aeds", "solute_flexshake");
  fc.unlock("aeds", "solvent_constraint_off");
  fc.unlock("aeds", "solvent_shake");
  fc.unlock("aeds", "solvent_lincs");
  fc.unlock("aeds", "solvent_settle");
  fc.unlock("aeds", "pressure_calculation");
  fc.unlock("aeds", "pressure_scale_berendsen");
  fc.unlock("aeds", "virial_off");
  fc.unlock("aeds", "virial_atomic");
  fc.unlock("aeds", "virial_molecular");
  fc.unlock("aeds", "vacuum");
  fc.unlock("aeds", "pbc_r");
  fc.unlock("aeds", "pbc_c");
  fc.unlock("aeds", "pbc_t");
  //fc.unlock("aeds", "perturbation");
  //fc.unlock("aeds", "perturbation_scaling");
  //fc.unlock("aeds", "slow_growth");
  //fc.unlock("aeds", "individual_lambdas");
  //fc.unlock("aeds", "precalculate_lambdas");
  fc.unlock("aeds", "bond");
  fc.unlock("aeds", "angle");
  fc.unlock("aeds", "dihedral");
  fc.unlock("aeds", "improper");
  fc.unlock("aeds", "crf");
  fc.unlock("aeds", "lj");
  fc.unlock("aeds", "com_removal");
  fc.unlock("aeds", "rf_excluded");
  fc.unlock("aeds", "pairlist_standard");
  fc.unlock("aeds", "pairlist_grid");
  fc.unlock("aeds", "pairlist_gridcell");
  fc.unlock("aeds", "cutoff_atomic");
  fc.unlock("aeds", "cutoff_cg");
  //fc.unlock("aeds", "cg_martini");
  //fc.unlock("aeds", "cg_gromos");
  //fc.unlock("aeds", "mixed_grain");
  fc.unlock("aeds", "temp_berendsen");
  fc.unlock("aeds", "temp_nosehoover");
  fc.unlock("aeds", "temp_nosehoover_chains");
  fc.unlock("aeds", "position_rest");
  fc.unlock("aeds", "position_const");
  fc.unlock("aeds", "position_const_scaled");
  fc.unlock("aeds", "distance_rest");
  fc.unlock("aeds", "distance_field");
  fc.unlock("aeds", "dihedral_rest");
  fc.unlock("aeds", "dihedral_const");
  fc.unlock("aeds", "jvalue_rest");
  fc.unlock("aeds", "rdc_rest");
  //fc.unlock("aeds", "perscale");
  fc.unlock("aeds", "rottrans");
  fc.unlock("aeds", "innerloop_method_off");
  fc.unlock("aeds", "innerloop_method_generic");
  fc.unlock("aeds", "innerloop_method_hardcode");
  fc.unlock("aeds", "innerloop_method_table");
  fc.unlock("aeds", "innerloop_method_cuda");
  fc.unlock("aeds", "innerloop_solvent_topology");
  fc.unlock("aeds", "innerloop_solvent_spc");
  //fc.unlock("aeds", "repex_temp");
  //fc.unlock("aeds", "repex_lambda");
  //fc.unlock("aeds", "multicell");
  //fc.unlock("aeds", "analysis");
  //fc.unlock("aeds", "no_integration");
  fc.unlock("aeds", "stochdyn");
  fc.unlock("aeds", "multistep");
  //fc.unlock("aeds", "multistep_boost");
  //fc.unlock("aeds", "montecarlo");
  //fc.unlock("aeds", "polarisation_cos");
  //fc.unlock("aeds", "polarisation_cos_damped");
  //fc.unlock("aeds", "sasa");
  //fc.unlock("aeds", "sasavol");
  fc.unlock("aeds", "random_gromos");
  fc.unlock("aeds", "random_gsl");
  fc.unlock("aeds", "parallel_mpi");
  fc.unlock("aeds", "parallel_omp");
  fc.unlock("aeds", "mult_energy_groups");
  //fc.unlock("aeds", "ewald");
  //fc.unlock("aeds", "p3m");
  //fc.unlock("aeds", "leus");
  //fc.unlock("aeds", "bsleus");
  //fc.unlock("aeds", "xray");
  //fc.unlock("aeds", "force_groups");

  fc.unlock("multiaeds", "solute");
  fc.unlock("multiaeds", "solvent");
  fc.unlock("multiaeds", "solvent_only");
  //fc.unlock("multiaeds", "steepest_descent");
  fc.unlock("multiaeds", "solute_constraint_off");
  fc.unlock("multiaeds", "solute_shake");
  fc.unlock("multiaeds", "solute_lincs");
  fc.unlock("multiaeds", "solute_flexshake");
  fc.unlock("multiaeds", "solvent_constraint_off");
  fc.unlock("multiaeds", "solvent_shake");
  fc.unlock("multiaeds", "solvent_lincs");
  fc.unlock("multiaeds", "solvent_settle");
  fc.unlock("multiaeds", "pressure_calculation");
  fc.unlock("multiaeds", "pressure_scale_berendsen");
  fc.unlock("multiaeds", "virial_off");
  fc.unlock("multiaeds", "virial_atomic");
  fc.unlock("multiaeds", "virial_molecular");
  fc.unlock("multiaeds", "vacuum");
  fc.unlock("multiaeds", "pbc_r");
  fc.unlock("multiaeds", "pbc_c");
  fc.unlock("multiaeds", "pbc_t");
  //fc.unlock("multiaeds", "perturbation");
  //fc.unlock("multiaeds", "perturbation_scaling");
  //fc.unlock("multiaeds", "slow_growth");
  //fc.unlock("multiaeds", "individual_lambdas");
  //fc.unlock("multiaeds", "precalculate_lambdas");
  fc.unlock("multiaeds", "bond");
  fc.unlock("multiaeds", "angle");
  fc.unlock("multiaeds", "dihedral");
  fc.unlock("multiaeds", "improper");
  fc.unlock("multiaeds", "crf");
  fc.unlock("multiaeds", "lj");
  fc.unlock("multiaeds", "com_removal");
  fc.unlock("multiaeds", "rf_excluded");
  fc.unlock("multiaeds", "pairlist_standard");
  fc.unlock("multiaeds", "pairlist_grid");
  fc.unlock("multiaeds", "pairlist_gridcell");
  fc.unlock("multiaeds", "cutoff_atomic");
  fc.unlock("multiaeds", "cutoff_cg");
  //fc.unlock("multiaeds", "cg_martini");
  //fc.unlock("multiaeds", "cg_gromos");
  //fc.unlock("multiaeds", "mixed_grain");
  fc.unlock("multiaeds", "temp_berendsen");
  fc.unlock("multiaeds", "temp_nosehoover");
  fc.unlock("multiaeds", "temp_nosehoover_chains");
  fc.unlock("multiaeds", "position_rest");
  fc.unlock("multiaeds", "position_const");
  fc.unlock("multiaeds", "position_const_scaled");
  fc.unlock("multiaeds", "distance_rest");
  fc.unlock("multiaeds", "distance_field");
  fc.unlock("multiaeds", "dihedral_rest");
  fc.unlock("multiaeds", "dihedral_const");
  fc.unlock("multiaeds", "jvalue_rest");
  fc.unlock("multiaeds", "rdc_rest");
  //fc.unlock("multiaeds", "perscale");
  fc.unlock("multiaeds", "rottrans");
  fc.unlock("multiaeds", "innerloop_method_off");
  fc.unlock("multiaeds", "innerloop_method_generic");
  fc.unlock("multiaeds", "innerloop_method_hardcode");
  fc.unlock("multiaeds", "innerloop_method_table");
  fc.unlock("multiaeds", "innerloop_method_cuda");
  fc.unlock("multiaeds", "innerloop_solvent_topology");
  fc.unlock("multiaeds", "innerloop_solvent_spc");
  //fc.unlock("multiaeds", "repex_temp");
  //fc.unlock("multiaeds", "repex_lambda");
  //fc.unlock("multiaeds", "multicell");
  //fc.unlock("multiaeds", "analysis");
  //fc.unlock("multiaeds", "no_integration");
  fc.unlock("multiaeds", "stochdyn");
  fc.unlock("multiaeds", "multistep");
  //fc.unlock("multiaeds", "multistep_boost");
  //fc.unlock("multiaeds", "montecarlo");
  //fc.unlock("multiaeds", "polarisation_cos");
  //fc.unlock("multiaeds", "polarisation_cos_damped");
  //fc.unlock("multiaeds", "sasa");
  //fc.unlock("multiaeds", "sasavol");
  fc.unlock("multiaeds", "random_gromos");
  fc.unlock("multiaeds", "random_gsl");
  fc.unlock("multiaeds", "parallel_mpi");
  fc.unlock("multiaeds", "parallel_omp");
  fc.unlock("multiaeds", "mult_energy_groups");
  //fc.unlock("multiaeds", "ewald");
  //fc.unlock("multiaeds", "p3m");
  //fc.unlock("multiaeds", "leus");
  //fc.unlock("multiaeds", "bsleus");
  //fc.unlock("multiaeds", "xray");
  //fc.unlock("multiaeds", "force_groups");

  fc.unlock("mult_energy_groups", "solute");
  fc.unlock("mult_energy_groups", "solvent");
  fc.unlock("mult_energy_groups", "solvent_only");
  fc.unlock("mult_energy_groups", "steepest_descent");
  fc.unlock("mult_energy_groups", "solute_constraint_off");
  fc.unlock("mult_energy_groups", "solute_shake");
  fc.unlock("mult_energy_groups", "solute_lincs");
  fc.unlock("mult_energy_groups", "solute_flexshake");
  fc.unlock("mult_energy_groups", "solvent_constraint_off");
  fc.unlock("mult_energy_groups", "solvent_shake");
  fc.unlock("mult_energy_groups", "pressure_calculation");
  fc.unlock("mult_energy_groups", "pressure_scale_berendsen");
  fc.unlock("mult_energy_groups", "virial_off");
  fc.unlock("mult_energy_groups", "virial_atomic");
  fc.unlock("mult_energy_groups", "virial_molecular");
  fc.unlock("mult_energy_groups", "vacuum");
  fc.unlock("mult_energy_groups", "pbc_r");
  fc.unlock("mult_energy_groups", "pbc_c");
  fc.unlock("mult_energy_groups", "pbc_t");
  fc.unlock("mult_energy_groups", "perturbation");
  fc.unlock("mult_energy_groups", "perturbation_scaling");
  fc.unlock("mult_energy_groups", "slow_growth");
  fc.unlock("mult_energy_groups", "individual_lambdas");
  fc.unlock("mult_energy_groups", "bond");
  fc.unlock("mult_energy_groups", "angle");
  fc.unlock("mult_energy_groups", "dihedral");
  fc.unlock("mult_energy_groups", "improper");
  fc.unlock("mult_energy_groups", "crf");
  fc.unlock("mult_energy_groups", "lj");
  fc.unlock("mult_energy_groups", "com_removal");
  fc.unlock("mult_energy_groups", "rf_excluded");
  fc.unlock("mult_energy_groups", "pairlist_standard");
  fc.unlock("mult_energy_groups", "pairlist_grid");
  fc.unlock("mult_energy_groups", "cutoff_atomic");
  fc.unlock("mult_energy_groups", "cg_martini");
  fc.unlock("mult_energy_groups", "cg_gromos");
  fc.unlock("mult_energy_groups", "mixed_grain");
  fc.unlock("mult_energy_groups", "temp_berendsen");
  fc.unlock("mult_energy_groups", "temp_nosehoover");
  fc.unlock("mult_energy_groups", "temp_nosehoover_chains");
  fc.unlock("mult_energy_groups", "position_rest");
  fc.unlock("mult_energy_groups", "position_const");
  fc.unlock("mult_energy_groups", "position_const_scaled");
  fc.unlock("mult_energy_groups", "distance_rest");
  fc.unlock("mult_energy_groups", "dihedral_rest");
  fc.unlock("mult_energy_groups", "dihedral_const");
  fc.unlock("mult_energy_groups", "jvalue_rest");
  fc.unlock("mult_energy_groups", "rdc_rest");
  fc.unlock("mult_energy_groups", "perscale");
  fc.unlock("mult_energy_groups", "rottrans");
  fc.unlock("mult_energy_groups", "repex_temp");
  fc.unlock("mult_energy_groups", "repex_lambda");
  fc.unlock("mult_energy_groups", "multicell");
  fc.unlock("mult_energy_groups", "analysis");
  fc.unlock("mult_energy_groups", "no_integration");
  fc.unlock("mult_energy_groups", "stochdyn");
  fc.unlock("mult_energy_groups", "multistep");
  fc.unlock("mult_energy_groups", "multistep_boost");
  fc.unlock("mult_energy_groups", "montecarlo");
  fc.unlock("mult_energy_groups", "polarisation_cos");
  fc.unlock("mult_energy_groups", "polarisation_cos_damped");
  fc.unlock("mult_energy_groups", "random_gromos");
  fc.unlock("mult_energy_groups", "random_gsl");
  fc.unlock("mult_energy_groups", "eds");
  fc.unlock("mult_energy_groups", "parallel_mpi");
  fc.unlock("mult_energy_groups", "parallel_omp");

  // unlocking features for Ewald sum electrostatics
  fc.unlock("ewald", "solute");
  fc.unlock("ewald", "solvent");
  fc.unlock("ewald", "solvent_only");
  fc.unlock("ewald", "steepest_descent");
  fc.unlock("ewald", "solute_constraint_off");
  fc.unlock("ewald", "solute_shake");
  fc.unlock("ewald", "solute_lincs");
  fc.unlock("ewald", "solute_flexshake");
  fc.unlock("ewald", "solvent_constraint_off");
  fc.unlock("ewald", "solvent_shake");
  fc.unlock("ewald", "pressure_calculation");
  fc.unlock("ewald", "pressure_scale_berendsen");
  fc.unlock("ewald", "virial_off");
  fc.unlock("ewald", "virial_atomic");
  fc.unlock("ewald", "virial_molecular");
  //fc.unlock("ewald", "vacuum");
  fc.unlock("ewald", "pbc_r");
  fc.unlock("ewald", "pbc_c");
  //fc.unlock("ewald", "pbc_t");
  //fc.unlock("ewald", "perturbation");
  //fc.unlock("ewald", "perturbation_scaling");
  //fc.unlock("ewald", "slow_growth");
  //fc.unlock("ewald", "individual_lambdas");
  fc.unlock("ewald", "bond");
  fc.unlock("ewald", "angle");
  fc.unlock("ewald", "dihedral");
  fc.unlock("ewald", "improper");
  fc.unlock("ewald", "crf");
  fc.unlock("ewald", "lj");
  fc.unlock("ewald", "com_removal");
  //fc.unlock("ewald", "rf_excluded");
  fc.unlock("ewald", "pairlist_standard");
  fc.unlock("ewald", "pairlist_grid");
  fc.unlock("ewald", "cutoff_atomic");
  //fc.unlock("ewald", "cg_martini");
  //fc.unlock("ewald", "cg_gromos");
  //fc.unlock("ewald", "mixed_grain");
  fc.unlock("ewald", "temp_berendsen");
  fc.unlock("ewald", "temp_nosehoover");
  fc.unlock("ewald", "temp_nosehoover_chains");
  fc.unlock("ewald", "position_rest");
  fc.unlock("ewald", "position_const");
  fc.unlock("ewald", "position_const_scaled");
  fc.unlock("ewald", "distance_rest");
  fc.unlock("ewald", "dihedral_rest");
  fc.unlock("ewald", "dihedral_const");
  fc.unlock("ewald", "jvalue_rest");
  fc.unlock("ewald", "rdc_rest");
  fc.unlock("ewald", "perscale");
  fc.unlock("ewald", "rottrans");
  //fc.unlock("ewald", "innerloop_spc");
  //fc.unlock("ewald", "repex_temp"); --probably works
  //fc.unlock("ewald", "repex_lambda"); --probably works
  fc.unlock("ewald", "multicell");
  //fc.unlock("ewald", "analysis"); --works if box invariant (recalculation of infl. func. necessary otherwise)
  fc.unlock("ewald", "no_integration");
  //fc.unlock("ewald", "stochdyn");
  //fc.unlock("ewald", "multistep");
  //fc.unlock("ewald", "multistep_boost");
  //fc.unlock("ewald", "montecarlo");
  //fc.unlock("ewald", "polarisation_cos");
  //fc.unlock("ewald", "polarisation_cos_damped");
  fc.unlock("ewald", "random_gromos");
  fc.unlock("ewald", "random_gsl");
  //fc.unlock("ewald", "eds");
  fc.unlock("ewald", "parallel_mpi");
  //fc.unlock("ewald", "parallel_omp");
  //fc.unlock("ewald", "mult_energy_groups");
  //fc.unlock("ewald", "p3m");

  // unlocking features for P3M electrostatics
  fc.unlock("p3m", "solute");
  fc.unlock("p3m", "solvent");
  fc.unlock("p3m", "solvent_only");
  fc.unlock("p3m", "steepest_descent");
  fc.unlock("p3m", "solute_constraint_off");
  fc.unlock("p3m", "solute_shake");
  fc.unlock("p3m", "solute_lincs");
  fc.unlock("p3m", "solute_flexshake");
  fc.unlock("p3m", "solvent_constraint_off");
  fc.unlock("p3m", "solvent_shake");
  fc.unlock("p3m", "pressure_calculation");
  fc.unlock("p3m", "pressure_scale_berendsen");
  fc.unlock("p3m", "virial_off");
  fc.unlock("p3m", "virial_atomic");
  fc.unlock("p3m", "virial_molecular");
  //fc.unlock("p3m", "vacuum");
  fc.unlock("p3m", "pbc_r");
  fc.unlock("p3m", "pbc_c");
  //fc.unlock("p3m", "pbc_t");
  //fc.unlock("p3m", "perturbation");
  //fc.unlock("p3m", "perturbation_scaling");
  //fc.unlock("p3m", "slow_growth");
  //fc.unlock("p3m", "individual_lambdas");
  fc.unlock("p3m", "bond");
  fc.unlock("p3m", "angle");
  fc.unlock("p3m", "dihedral");
  fc.unlock("p3m", "improper");
  fc.unlock("p3m", "crf");
  fc.unlock("p3m", "lj");
  fc.unlock("p3m", "com_removal");
  //fc.unlock("p3m", "rf_excluded");
  fc.unlock("p3m", "pairlist_standard");
  fc.unlock("p3m", "pairlist_grid");
  fc.unlock("p3m", "cutoff_atomic");
  //fc.unlock("p3m", "cg_martini");
  //fc.unlock("p3m", "cg_gromos");
  //fc.unlock("p3m", "mixed_grain");
  fc.unlock("p3m", "temp_berendsen");
  fc.unlock("p3m", "temp_nosehoover");
  fc.unlock("p3m", "temp_nosehoover_chains");
  fc.unlock("p3m", "position_rest");
  fc.unlock("p3m", "position_const");
  fc.unlock("p3m", "position_const_scaled");
  fc.unlock("p3m", "distance_rest");
  fc.unlock("p3m", "dihedral_rest");
  fc.unlock("p3m", "dihedral_const");
  fc.unlock("p3m", "jvalue_rest");
  fc.unlock("p3m", "rdc_rest");
  fc.unlock("p3m", "perscale");
  fc.unlock("p3m", "rottrans");
  //fc.unlock("p3m", "innerloop_spc");
  fc.unlock("p3m", "repex_temp");
  fc.unlock("p3m", "repex_lambda");
  fc.unlock("p3m", "multicell");
  //fc.unlock("p3m", "analysis");  --works if box invariant (recalculation of infl. func. necessary otherwise)
  fc.unlock("p3m", "no_integration");
  //fc.unlock("p3m", "stochdyn");
  //fc.unlock("p3m", "multistep");
  //fc.unlock("p3m", "multistep_boost");
  //fc.unlock("p3m", "montecarlo");
  //fc.unlock("p3m", "polarisation_cos");
  //fc.unlock("p3m", "polarisation_cos_damped");
  fc.unlock("p3m", "random_gromos");
  fc.unlock("p3m", "random_gsl");
  //fc.unlock("p3m", "eds");
  fc.unlock("p3m", "parallel_mpi");
  fc.unlock("p3m", "parallel_omp");
  //fc.unlock("p3m", "mult_energy_groups");
  //fc.unlock("p3m", "ewald");

  fc.unlock("innerloop_method_off", "solute");
  fc.unlock("innerloop_method_off", "solvent");
  fc.unlock("innerloop_method_off", "solvent_only");
  fc.unlock("innerloop_method_off", "steepest_descent");
  fc.unlock("innerloop_method_off", "solute_constraint_off");
  fc.unlock("innerloop_method_off", "solute_shake");
  fc.unlock("innerloop_method_off", "solute_lincs");
  fc.unlock("innerloop_method_off", "solute_flexshake");
  fc.unlock("innerloop_method_off", "solvent_constraint_off");
  fc.unlock("innerloop_method_off", "solvent_shake");
  fc.unlock("innerloop_method_off", "pressure_calculation");
  fc.unlock("innerloop_method_off", "pressure_scale_berendsen");
  fc.unlock("innerloop_method_off", "virial_off");
  fc.unlock("innerloop_method_off", "virial_atomic");
  fc.unlock("innerloop_method_off", "virial_molecular");
  fc.unlock("innerloop_method_off", "vacuum");
  fc.unlock("innerloop_method_off", "pbc_r");
  fc.unlock("innerloop_method_off", "pbc_c");
  fc.unlock("innerloop_method_off", "pbc_t");
  fc.unlock("innerloop_method_off", "perturbation");
  fc.unlock("innerloop_method_off", "perturbation_scaling");
  fc.unlock("innerloop_method_off", "slow_growth");
  fc.unlock("innerloop_method_off", "individual_lambdas");
  fc.unlock("innerloop_method_off", "bond");
  fc.unlock("innerloop_method_off", "angle");
  fc.unlock("innerloop_method_off", "dihedral");
  fc.unlock("innerloop_method_off", "improper");
  fc.unlock("innerloop_method_off", "crf");
  fc.unlock("innerloop_method_off", "lj");
  fc.unlock("innerloop_method_off", "com_removal");
  fc.unlock("innerloop_method_off", "rf_excluded");
  fc.unlock("innerloop_method_off", "pairlist_standard");
  fc.unlock("innerloop_method_off", "pairlist_grid");
  fc.unlock("innerloop_method_off", "cutoff_atomic");
  fc.unlock("innerloop_method_off", "cg_martini");
  fc.unlock("innerloop_method_off", "cg_gromos");
  fc.unlock("innerloop_method_off", "mixed_grain");
  fc.unlock("innerloop_method_off", "temp_berendsen");
  fc.unlock("innerloop_method_off", "temp_nosehoover");
  fc.unlock("innerloop_method_off", "temp_nosehoover_chains");
  fc.unlock("innerloop_method_off", "position_rest");
  fc.unlock("innerloop_method_off", "position_const");
  fc.unlock("innerloop_method_off", "position_const_scaled");
  fc.unlock("innerloop_method_off", "distance_rest");
  fc.unlock("innerloop_method_off", "dihedral_rest");
  fc.unlock("innerloop_method_off", "dihedral_const");
  fc.unlock("innerloop_method_off", "jvalue_rest");
  fc.unlock("innerloop_method_off", "rdc_rest");
  fc.unlock("innerloop_method_off", "perscale");
  fc.unlock("innerloop_method_off", "rottrans");
  fc.unlock("innerloop_method_off", "innerloop_solvent_topology");
  fc.unlock("innerloop_method_off", "repex_temp");
  fc.unlock("innerloop_method_off", "repex_lambda");
  fc.unlock("innerloop_method_off", "multicell");
  fc.unlock("innerloop_method_off", "analysis");
  fc.unlock("innerloop_method_off", "no_integration");
  fc.unlock("innerloop_method_off", "stochdyn");
  fc.unlock("innerloop_method_off", "multistep");
  fc.unlock("innerloop_method_off", "multistep_boost");
  fc.unlock("innerloop_method_off", "montecarlo");
  fc.unlock("innerloop_method_off", "polarisation_cos");
  fc.unlock("innerloop_method_off", "polarisation_cos_damped");
  fc.unlock("innerloop_method_off", "random_gromos");
  fc.unlock("innerloop_method_off", "random_gsl");
  fc.unlock("innerloop_method_off", "eds");
  fc.unlock("innerloop_method_off", "parallel_mpi");
  fc.unlock("innerloop_method_off", "parallel_omp");
  fc.unlock("innerloop_method_off", "mult_energy_groups");
  fc.unlock("innerloop_method_off", "ewald");
  fc.unlock("innerloop_method_off", "p3m");

    fc.unlock("innerloop_method_generic", "solute");
  fc.unlock("innerloop_method_generic", "solvent");
  fc.unlock("innerloop_method_generic", "solvent_only");
  fc.unlock("innerloop_method_generic", "steepest_descent");
  fc.unlock("innerloop_method_generic", "solute_constraint_off");
  fc.unlock("innerloop_method_generic", "solute_shake");
  fc.unlock("innerloop_method_generic", "solute_lincs");
  fc.unlock("innerloop_method_generic", "solute_flexshake");
  fc.unlock("innerloop_method_generic", "solvent_constraint_off");
  fc.unlock("innerloop_method_generic", "solvent_shake");
  fc.unlock("innerloop_method_generic", "pressure_calculation");
  fc.unlock("innerloop_method_generic", "pressure_scale_berendsen");
  fc.unlock("innerloop_method_generic", "virial_off");
  fc.unlock("innerloop_method_generic", "virial_atomic");
  fc.unlock("innerloop_method_generic", "virial_molecular");
  fc.unlock("innerloop_method_generic", "vacuum");
  fc.unlock("innerloop_method_generic", "pbc_r");
  fc.unlock("innerloop_method_generic", "pbc_c");
  fc.unlock("innerloop_method_generic", "pbc_t");
  fc.unlock("innerloop_method_generic", "perturbation");
  fc.unlock("innerloop_method_generic", "perturbation_scaling");
  fc.unlock("innerloop_method_generic", "slow_growth");
  fc.unlock("innerloop_method_generic", "individual_lambdas");
  fc.unlock("innerloop_method_generic", "bond");
  fc.unlock("innerloop_method_generic", "angle");
  fc.unlock("innerloop_method_generic", "dihedral");
  fc.unlock("innerloop_method_generic", "improper");
  fc.unlock("innerloop_method_generic", "crf");
  fc.unlock("innerloop_method_generic", "lj");
  fc.unlock("innerloop_method_generic", "com_removal");
  fc.unlock("innerloop_method_generic", "rf_excluded");
  fc.unlock("innerloop_method_generic", "pairlist_standard");
  fc.unlock("innerloop_method_generic", "pairlist_grid");
  fc.unlock("innerloop_method_generic", "temp_berendsen");
  fc.unlock("innerloop_method_generic", "temp_nosehoover");
  fc.unlock("innerloop_method_generic", "temp_nosehoover_chains");
  fc.unlock("innerloop_method_generic", "position_rest");
  fc.unlock("innerloop_method_generic", "position_const");
  fc.unlock("innerloop_method_generic", "position_const_scaled");
  fc.unlock("innerloop_method_generic", "distance_rest");
  fc.unlock("innerloop_method_generic", "dihedral_rest");
  fc.unlock("innerloop_method_generic", "dihedral_const");
  fc.unlock("innerloop_method_generic", "jvalue_rest");
  fc.unlock("innerloop_method_generic", "rdc_rest");
  fc.unlock("innerloop_method_generic", "perscale");
  fc.unlock("innerloop_method_generic", "rottrans");
  fc.unlock("innerloop_method_generic", "innerloop_solvent_topology");
  fc.unlock("innerloop_method_generic", "innerloop_solvent_spc");
  fc.unlock("innerloop_method_generic", "repex_temp");
  fc.unlock("innerloop_method_generic", "repex_lambda");
  fc.unlock("innerloop_method_generic", "multicell");
  fc.unlock("innerloop_method_generic", "analysis");
  fc.unlock("innerloop_method_generic", "no_integration");
  fc.unlock("innerloop_method_generic", "stochdyn");
  fc.unlock("innerloop_method_generic", "multistep");
  fc.unlock("innerloop_method_generic", "multistep_boost");
  fc.unlock("innerloop_method_generic", "montecarlo");
  fc.unlock("innerloop_method_generic", "random_gromos");
  fc.unlock("innerloop_method_generic", "random_gsl");
  fc.unlock("innerloop_method_generic", "eds");
  fc.unlock("innerloop_method_generic", "parallel_mpi");
  fc.unlock("innerloop_method_generic", "parallel_omp");
  fc.unlock("innerloop_method_generic", "mult_energy_groups");

    fc.unlock("innerloop_method_hardcode", "solute");
  fc.unlock("innerloop_method_hardcode", "solvent");
  fc.unlock("innerloop_method_hardcode", "solvent_only");
  fc.unlock("innerloop_method_hardcode", "steepest_descent");
  fc.unlock("innerloop_method_hardcode", "solute_constraint_off");
  fc.unlock("innerloop_method_hardcode", "solute_shake");
  fc.unlock("innerloop_method_hardcode", "solute_lincs");
  fc.unlock("innerloop_method_hardcode", "solute_flexshake");
  fc.unlock("innerloop_method_hardcode", "solvent_constraint_off");
  fc.unlock("innerloop_method_hardcode", "solvent_shake");
  fc.unlock("innerloop_method_hardcode", "pressure_calculation");
  fc.unlock("innerloop_method_hardcode", "pressure_scale_berendsen");
  fc.unlock("innerloop_method_hardcode", "virial_off");
  fc.unlock("innerloop_method_hardcode", "virial_atomic");
  fc.unlock("innerloop_method_hardcode", "virial_molecular");
  fc.unlock("innerloop_method_hardcode", "vacuum");
  fc.unlock("innerloop_method_hardcode", "pbc_r");
  fc.unlock("innerloop_method_hardcode", "pbc_c");
  fc.unlock("innerloop_method_hardcode", "pbc_t");
  fc.unlock("innerloop_method_hardcode", "perturbation");
  fc.unlock("innerloop_method_hardcode", "perturbation_scaling");
  fc.unlock("innerloop_method_hardcode", "slow_growth");
  fc.unlock("innerloop_method_hardcode", "individual_lambdas");
  fc.unlock("innerloop_method_hardcode", "bond");
  fc.unlock("innerloop_method_hardcode", "angle");
  fc.unlock("innerloop_method_hardcode", "dihedral");
  fc.unlock("innerloop_method_hardcode", "improper");
  fc.unlock("innerloop_method_hardcode", "crf");
  fc.unlock("innerloop_method_hardcode", "lj");
  fc.unlock("innerloop_method_hardcode", "com_removal");
  fc.unlock("innerloop_method_hardcode", "rf_excluded");
  fc.unlock("innerloop_method_hardcode", "pairlist_standard");
  fc.unlock("innerloop_method_hardcode", "pairlist_grid");
  fc.unlock("innerloop_method_hardcode", "temp_berendsen");
  fc.unlock("innerloop_method_hardcode", "temp_nosehoover");
  fc.unlock("innerloop_method_hardcode", "temp_nosehoover_chains");
  fc.unlock("innerloop_method_hardcode", "position_rest");
  fc.unlock("innerloop_method_hardcode", "position_const");
  fc.unlock("innerloop_method_hardcode", "position_const_scaled");
  fc.unlock("innerloop_method_hardcode", "distance_rest");
  fc.unlock("innerloop_method_hardcode", "dihedral_rest");
  fc.unlock("innerloop_method_hardcode", "dihedral_const");
  fc.unlock("innerloop_method_hardcode", "jvalue_rest");
  fc.unlock("innerloop_method_hardcode", "rdc_rest");
  fc.unlock("innerloop_method_hardcode", "perscale");
  fc.unlock("innerloop_method_hardcode", "rottrans");
  fc.unlock("innerloop_method_hardcode", "innerloop_solvent_spc");
  fc.unlock("innerloop_method_hardcode", "repex_temp");
  fc.unlock("innerloop_method_hardcode", "repex_lambda");
  fc.unlock("innerloop_method_hardcode", "multicell");
  fc.unlock("innerloop_method_hardcode", "analysis");
  fc.unlock("innerloop_method_hardcode", "no_integration");
  fc.unlock("innerloop_method_hardcode", "stochdyn");
  fc.unlock("innerloop_method_hardcode", "multistep");
  fc.unlock("innerloop_method_hardcode", "multistep_boost");
  fc.unlock("innerloop_method_hardcode", "montecarlo");
  fc.unlock("innerloop_method_hardcode", "random_gromos");
  fc.unlock("innerloop_method_hardcode", "random_gsl");
  fc.unlock("innerloop_method_hardcode", "eds");
  fc.unlock("innerloop_method_hardcode", "parallel_mpi");
  fc.unlock("innerloop_method_hardcode", "parallel_omp");
  fc.unlock("innerloop_method_hardcode", "mult_energy_groups");

  fc.unlock("innerloop_method_table", "solute");
  fc.unlock("innerloop_method_table", "solvent");
  fc.unlock("innerloop_method_table", "solvent_only");
  fc.unlock("innerloop_method_table", "steepest_descent");
  fc.unlock("innerloop_method_table", "solute_constraint_off");
  fc.unlock("innerloop_method_table", "solute_shake");
  fc.unlock("innerloop_method_table", "solute_lincs");
  fc.unlock("innerloop_method_table", "solute_flexshake");
  fc.unlock("innerloop_method_table", "solvent_constraint_off");
  fc.unlock("innerloop_method_table", "solvent_shake");
  fc.unlock("innerloop_method_table", "pressure_calculation");
  fc.unlock("innerloop_method_table", "pressure_scale_berendsen");
  fc.unlock("innerloop_method_table", "virial_off");
  fc.unlock("innerloop_method_table", "virial_atomic");
  fc.unlock("innerloop_method_table", "virial_molecular");
  fc.unlock("innerloop_method_table", "vacuum");
  fc.unlock("innerloop_method_table", "pbc_r");
  fc.unlock("innerloop_method_table", "pbc_c");
  fc.unlock("innerloop_method_table", "pbc_t");
  fc.unlock("innerloop_method_table", "perturbation");
  fc.unlock("innerloop_method_table", "perturbation_scaling");
  fc.unlock("innerloop_method_table", "slow_growth");
  fc.unlock("innerloop_method_table", "individual_lambdas");
  fc.unlock("innerloop_method_table", "bond");
  fc.unlock("innerloop_method_table", "angle");
  fc.unlock("innerloop_method_table", "dihedral");
  fc.unlock("innerloop_method_table", "improper");
  fc.unlock("innerloop_method_table", "crf");
  fc.unlock("innerloop_method_table", "lj");
  fc.unlock("innerloop_method_table", "com_removal");
  fc.unlock("innerloop_method_table", "rf_excluded");
  fc.unlock("innerloop_method_table", "pairlist_standard");
  fc.unlock("innerloop_method_table", "pairlist_grid");
  fc.unlock("innerloop_method_table", "temp_berendsen");
  fc.unlock("innerloop_method_table", "temp_nosehoover");
  fc.unlock("innerloop_method_table", "temp_nosehoover_chains");
  fc.unlock("innerloop_method_table", "position_rest");
  fc.unlock("innerloop_method_table", "position_const");
  fc.unlock("innerloop_method_table", "position_const_scaled");
  fc.unlock("innerloop_method_table", "distance_rest");
  fc.unlock("innerloop_method_table", "dihedral_rest");
  fc.unlock("innerloop_method_table", "dihedral_const");
  fc.unlock("innerloop_method_table", "jvalue_rest");
  fc.unlock("innerloop_method_table", "rdc_rest");
  fc.unlock("innerloop_method_table", "perscale");
  fc.unlock("innerloop_method_table", "rottrans");
  fc.unlock("innerloop_method_table", "innerloop_solvent_spc");
  fc.unlock("innerloop_method_table", "repex_temp");
  fc.unlock("innerloop_method_table", "repex_lambda");
  fc.unlock("innerloop_method_table", "multicell");
  fc.unlock("innerloop_method_table", "analysis");
  fc.unlock("innerloop_method_table", "no_integration");
  fc.unlock("innerloop_method_table", "stochdyn");
  fc.unlock("innerloop_method_table", "multistep");
  fc.unlock("innerloop_method_table", "multistep_boost");
  fc.unlock("innerloop_method_table", "montecarlo");
  fc.unlock("innerloop_method_table", "random_gromos");
  fc.unlock("innerloop_method_table", "random_gsl");
  fc.unlock("innerloop_method_table", "eds");
  fc.unlock("innerloop_method_table", "parallel_mpi");
  fc.unlock("innerloop_method_table", "parallel_omp");
  fc.unlock("innerloop_method_table", "mult_energy_groups");

  fc.unlock("innerloop_solvent_topology", "solute");
  fc.unlock("innerloop_solvent_topology", "solvent");
  fc.unlock("innerloop_solvent_topology", "solvent_only");
  fc.unlock("innerloop_solvent_topology", "steepest_descent");
  fc.unlock("innerloop_solvent_topology", "solute_constraint_off");
  fc.unlock("innerloop_solvent_topology", "solute_shake");
  fc.unlock("innerloop_solvent_topology", "solute_lincs");
  fc.unlock("innerloop_solvent_topology", "solute_flexshake");
  fc.unlock("innerloop_solvent_topology", "solvent_constraint_off");
  fc.unlock("innerloop_solvent_topology", "solvent_shake");
  fc.unlock("innerloop_solvent_topology", "pressure_calculation");
  fc.unlock("innerloop_solvent_topology", "pressure_scale_berendsen");
  fc.unlock("innerloop_solvent_topology", "virial_off");
  fc.unlock("innerloop_solvent_topology", "virial_atomic");
  fc.unlock("innerloop_solvent_topology", "virial_molecular");
  fc.unlock("innerloop_solvent_topology", "vacuum");
  fc.unlock("innerloop_solvent_topology", "pbc_r");
  fc.unlock("innerloop_solvent_topology", "pbc_c");
  fc.unlock("innerloop_solvent_topology", "pbc_t");
  fc.unlock("innerloop_solvent_topology", "perturbation");
  fc.unlock("innerloop_solvent_topology", "perturbation_scaling");
  fc.unlock("innerloop_solvent_topology", "slow_growth");
  fc.unlock("innerloop_solvent_topology", "individual_lambdas");
  fc.unlock("innerloop_solvent_topology", "bond");
  fc.unlock("innerloop_solvent_topology", "angle");
  fc.unlock("innerloop_solvent_topology", "dihedral");
  fc.unlock("innerloop_solvent_topology", "improper");
  fc.unlock("innerloop_solvent_topology", "crf");
  fc.unlock("innerloop_solvent_topology", "lj");
  fc.unlock("innerloop_solvent_topology", "com_removal");
  fc.unlock("innerloop_solvent_topology", "rf_excluded");
  fc.unlock("innerloop_solvent_topology", "pairlist_standard");
  fc.unlock("innerloop_solvent_topology", "pairlist_grid");
  fc.unlock("innerloop_solvent_topology", "cutoff_atomic");
  fc.unlock("innerloop_solvent_topology", "cg_martini");
  fc.unlock("innerloop_solvent_topology", "cg_gromos");
  fc.unlock("innerloop_solvent_topology", "mixed_grain");
  fc.unlock("innerloop_solvent_topology", "temp_berendsen");
  fc.unlock("innerloop_solvent_topology", "temp_nosehoover");
  fc.unlock("innerloop_solvent_topology", "temp_nosehoover_chains");
  fc.unlock("innerloop_solvent_topology", "position_rest");
  fc.unlock("innerloop_solvent_topology", "position_const");
  fc.unlock("innerloop_solvent_topology", "position_const_scaled");
  fc.unlock("innerloop_solvent_topology", "distance_rest");
  fc.unlock("innerloop_solvent_topology", "dihedral_rest");
  fc.unlock("innerloop_solvent_topology", "dihedral_const");
  fc.unlock("innerloop_solvent_topology", "jvalue_rest");
  fc.unlock("innerloop_solvent_topology", "rdc_rest");
  fc.unlock("innerloop_solvent_topology", "perscale");
  fc.unlock("innerloop_solvent_topology", "rottrans");
  fc.unlock("innerloop_solvent_topology", "repex_temp");
  fc.unlock("innerloop_solvent_topology", "repex_lambda");
  fc.unlock("innerloop_solvent_topology", "multicell");
  fc.unlock("innerloop_solvent_topology", "analysis");
  fc.unlock("innerloop_solvent_topology", "no_integration");
  fc.unlock("innerloop_solvent_topology", "stochdyn");
  fc.unlock("innerloop_solvent_topology", "multistep");
  fc.unlock("innerloop_solvent_topology", "multistep_boost");
  fc.unlock("innerloop_solvent_topology", "montecarlo");
  fc.unlock("innerloop_solvent_topology", "polarisation_cos");
  fc.unlock("innerloop_solvent_topology", "polarisation_cos_damped");
  fc.unlock("innerloop_solvent_topology", "random_gromos");
  fc.unlock("innerloop_solvent_topology", "random_gsl");
  fc.unlock("innerloop_solvent_topology", "eds");
  fc.unlock("innerloop_solvent_topology", "parallel_mpi");
  fc.unlock("innerloop_solvent_topology", "parallel_omp");
  fc.unlock("innerloop_solvent_topology", "mult_energy_groups");
  fc.unlock("innerloop_solvent_topology", "ewald");
  fc.unlock("innerloop_solvent_topology", "p3m");
  fc.unlock("innerloop_solvent_spc", "solute");
  fc.unlock("innerloop_solvent_spc", "solvent");
  fc.unlock("innerloop_solvent_spc", "solvent_only");
  fc.unlock("innerloop_solvent_spc", "steepest_descent");
  fc.unlock("innerloop_solvent_spc", "solute_constraint_off");
  fc.unlock("innerloop_solvent_spc", "solute_shake");
  fc.unlock("innerloop_solvent_spc", "solute_lincs");
  fc.unlock("innerloop_solvent_spc", "solute_flexshake");
  fc.unlock("innerloop_solvent_spc", "solvent_constraint_off");
  fc.unlock("innerloop_solvent_spc", "solvent_shake");
  fc.unlock("innerloop_solvent_spc", "pressure_calculation");
  fc.unlock("innerloop_solvent_spc", "pressure_scale_berendsen");
  fc.unlock("innerloop_solvent_spc", "virial_off");
  fc.unlock("innerloop_solvent_spc", "virial_atomic");
  fc.unlock("innerloop_solvent_spc", "virial_molecular");
  fc.unlock("innerloop_solvent_spc", "vacuum");
  fc.unlock("innerloop_solvent_spc", "pbc_r");
  fc.unlock("innerloop_solvent_spc", "pbc_c");
  fc.unlock("innerloop_solvent_spc", "pbc_t");
  fc.unlock("innerloop_solvent_spc", "perturbation");
  fc.unlock("innerloop_solvent_spc", "perturbation_scaling");
  fc.unlock("innerloop_solvent_spc", "slow_growth");
  fc.unlock("innerloop_solvent_spc", "individual_lambdas");
  fc.unlock("innerloop_solvent_spc", "bond");
  fc.unlock("innerloop_solvent_spc", "angle");
  fc.unlock("innerloop_solvent_spc", "dihedral");
  fc.unlock("innerloop_solvent_spc", "improper");
  fc.unlock("innerloop_solvent_spc", "crf");
  fc.unlock("innerloop_solvent_spc", "lj");
  fc.unlock("innerloop_solvent_spc", "com_removal");
  fc.unlock("innerloop_solvent_spc", "rf_excluded");
  fc.unlock("innerloop_solvent_spc", "pairlist_standard");
  fc.unlock("innerloop_solvent_spc", "pairlist_grid");
  fc.unlock("innerloop_solvent_spc", "cutoff_atomic");
  fc.unlock("innerloop_solvent_spc", "cg_martini");
  fc.unlock("innerloop_solvent_spc", "cg_gromos");
  fc.unlock("innerloop_solvent_spc", "mixed_grain");
  fc.unlock("innerloop_solvent_spc", "temp_berendsen");
  fc.unlock("innerloop_solvent_spc", "temp_nosehoover");
  fc.unlock("innerloop_solvent_spc", "temp_nosehoover_chains");
  fc.unlock("innerloop_solvent_spc", "position_rest");
  fc.unlock("innerloop_solvent_spc", "position_const");
  fc.unlock("innerloop_solvent_spc", "position_const_scaled");
  fc.unlock("innerloop_solvent_spc", "distance_rest");
  fc.unlock("innerloop_solvent_spc", "dihedral_rest");
  fc.unlock("innerloop_solvent_spc", "dihedral_const");
  fc.unlock("innerloop_solvent_spc", "jvalue_rest");
  fc.unlock("innerloop_solvent_spc", "rdc_rest");
  fc.unlock("innerloop_solvent_spc", "perscale");
  fc.unlock("innerloop_solvent_spc", "rottrans");
  fc.unlock("innerloop_solvent_spc", "repex_temp");
  fc.unlock("innerloop_solvent_spc", "repex_lambda");
  fc.unlock("innerloop_solvent_spc", "multicell");
  fc.unlock("innerloop_solvent_spc", "analysis");
  fc.unlock("innerloop_solvent_spc", "no_integration");
  fc.unlock("innerloop_solvent_spc", "stochdyn");
  fc.unlock("innerloop_solvent_spc", "multistep");
  fc.unlock("innerloop_solvent_spc", "multistep_boost");
  fc.unlock("innerloop_solvent_spc", "montecarlo");
  fc.unlock("innerloop_solvent_spc", "polarisation_cos");
  fc.unlock("innerloop_solvent_spc", "polarisation_cos_damped");
  fc.unlock("innerloop_solvent_spc", "random_gromos");
  fc.unlock("innerloop_solvent_spc", "random_gsl");
  fc.unlock("innerloop_solvent_spc", "eds");
  fc.unlock("innerloop_solvent_spc", "parallel_mpi");
  fc.unlock("innerloop_solvent_spc", "parallel_omp");
  fc.unlock("innerloop_solvent_spc", "mult_energy_groups");

  fc.unlock("solvent_lincs", "solute");
  fc.unlock("solvent_lincs", "solvent");
  fc.unlock("solvent_lincs", "solvent_only");
  fc.unlock("solvent_lincs", "steepest_descent");
  fc.unlock("solvent_lincs", "solute_constraint_off");
  fc.unlock("solvent_lincs", "solute_shake");
  fc.unlock("solvent_lincs", "solute_lincs");
  fc.unlock("solvent_lincs", "solute_flexshake");
  fc.unlock("solvent_lincs", "pressure_calculation");
  fc.unlock("solvent_lincs", "pressure_scale_berendsen");
  fc.unlock("solvent_lincs", "virial_off");
  fc.unlock("solvent_lincs", "virial_atomic");
  fc.unlock("solvent_lincs", "virial_molecular");
  fc.unlock("solvent_lincs", "vacuum");
  fc.unlock("solvent_lincs", "pbc_r");
  fc.unlock("solvent_lincs", "pbc_c");
  fc.unlock("solvent_lincs", "pbc_t");
  fc.unlock("solvent_lincs", "perturbation");
  fc.unlock("solvent_lincs", "perturbation_scaling");
  fc.unlock("solvent_lincs", "slow_growth");
  fc.unlock("solvent_lincs", "individual_lambdas");
  fc.unlock("solvent_lincs", "bond");
  fc.unlock("solvent_lincs", "angle");
  fc.unlock("solvent_lincs", "dihedral");
  fc.unlock("solvent_lincs", "improper");
  fc.unlock("solvent_lincs", "crf");
  fc.unlock("solvent_lincs", "lj");
  fc.unlock("solvent_lincs", "com_removal");
  fc.unlock("solvent_lincs", "rf_excluded");
  fc.unlock("solvent_lincs", "pairlist_standard");
  fc.unlock("solvent_lincs", "pairlist_grid");
  fc.unlock("solvent_lincs", "cutoff_atomic");
  fc.unlock("solvent_lincs", "cg_martini");
  fc.unlock("solvent_lincs", "cg_gromos");
  fc.unlock("solvent_lincs", "mixed_grain");
  fc.unlock("solvent_lincs", "temp_berendsen");
  fc.unlock("solvent_lincs", "temp_nosehoover");
  fc.unlock("solvent_lincs", "temp_nosehoover_chains");
  fc.unlock("solvent_lincs", "position_rest");
  fc.unlock("solvent_lincs", "distance_rest");
  fc.unlock("solvent_lincs", "dihedral_rest");
  fc.unlock("solvent_lincs", "dihedral_const");
  fc.unlock("solvent_lincs", "jvalue_rest");
  fc.unlock("solvent_lincs", "rdc_rest");
  fc.unlock("solvent_lincs", "perscale");
  fc.unlock("solvent_lincs", "rottrans");
  fc.unlock("solvent_lincs", "innerloop_method_off");
  fc.unlock("solvent_lincs", "innerloop_method_generic");
  fc.unlock("solvent_lincs", "innerloop_method_hardcode");
  fc.unlock("solvent_lincs", "innerloop_method_table");
  fc.unlock("solvent_lincs", "innerloop_solvent_topology");
  fc.unlock("solvent_lincs", "innerloop_solvent_spc");
  fc.unlock("solvent_lincs", "repex_temp");
  fc.unlock("solvent_lincs", "repex_lambda");
  fc.unlock("solvent_lincs", "multicell");
  fc.unlock("solvent_lincs", "analysis");
  fc.unlock("solvent_lincs", "no_integration");
  fc.unlock("solvent_lincs", "stochdyn");
  fc.unlock("solvent_lincs", "multistep");
  fc.unlock("solvent_lincs", "multistep_boost");
  fc.unlock("solvent_lincs", "montecarlo");
  fc.unlock("solvent_lincs", "polarisation_cos");
  fc.unlock("solvent_lincs", "polarisation_cos_damped");
  fc.unlock("solvent_lincs", "random_gromos");
  fc.unlock("solvent_lincs", "random_gsl");
  fc.unlock("solvent_lincs", "eds");
  fc.unlock("solvent_lincs", "parallel_mpi");
  fc.unlock("solvent_lincs", "parallel_omp");
  fc.unlock("solvent_lincs", "mult_energy_groups");
  fc.unlock("solvent_lincs", "ewald");
  fc.unlock("solvent_lincs", "p3m");

  fc.unlock("solvent_settle", "solute");
  fc.unlock("solvent_settle", "solvent");
  fc.unlock("solvent_settle", "solvent_only");
  fc.unlock("solvent_settle", "steepest_descent");
  fc.unlock("solvent_settle", "solute_constraint_off");
  fc.unlock("solvent_settle", "solute_shake");
  fc.unlock("solvent_settle", "solute_lincs");
  fc.unlock("solvent_settle", "solute_flexshake");
  fc.unlock("solvent_settle", "pressure_calculation");
  fc.unlock("solvent_settle", "pressure_scale_berendsen");
  fc.unlock("solvent_settle", "virial_off");
  fc.unlock("solvent_settle", "virial_atomic");
  fc.unlock("solvent_settle", "virial_molecular");
  fc.unlock("solvent_settle", "vacuum");
  fc.unlock("solvent_settle", "pbc_r");
  fc.unlock("solvent_settle", "pbc_c");
  fc.unlock("solvent_settle", "pbc_t");
  fc.unlock("solvent_settle", "perturbation");
  fc.unlock("solvent_settle", "perturbation_scaling");
  fc.unlock("solvent_settle", "slow_growth");
  fc.unlock("solvent_settle", "individual_lambdas");
  fc.unlock("solvent_settle", "bond");
  fc.unlock("solvent_settle", "angle");
  fc.unlock("solvent_settle", "dihedral");
  fc.unlock("solvent_settle", "improper");
  fc.unlock("solvent_settle", "crf");
  fc.unlock("solvent_settle", "lj");
  fc.unlock("solvent_settle", "com_removal");
  fc.unlock("solvent_settle", "rf_excluded");
  fc.unlock("solvent_settle", "pairlist_standard");
  fc.unlock("solvent_settle", "pairlist_grid");
  fc.unlock("solvent_settle", "cutoff_atomic");
  fc.unlock("solvent_settle", "cg_martini");
  fc.unlock("solvent_settle", "cg_gromos");
  fc.unlock("solvent_settle", "mixed_grain");
  fc.unlock("solvent_settle", "temp_berendsen");
  fc.unlock("solvent_settle", "temp_nosehoover");
  fc.unlock("solvent_settle", "temp_nosehoover_chains");
  fc.unlock("solvent_settle", "position_rest");
  fc.unlock("solvent_settle", "distance_rest");
  fc.unlock("solvent_settle", "dihedral_rest");
  fc.unlock("solvent_settle", "dihedral_const");
  fc.unlock("solvent_settle", "jvalue_rest");
  fc.unlock("solvent_settle", "rdc_rest");
  fc.unlock("solvent_settle", "perscale");
  fc.unlock("solvent_settle", "rottrans");
  fc.unlock("solvent_settle", "innerloop_method_off");
  fc.unlock("solvent_settle", "innerloop_method_generic");
  fc.unlock("solvent_settle", "innerloop_method_hardcode");
  fc.unlock("solvent_settle", "innerloop_method_table");
  fc.unlock("solvent_settle", "innerloop_solvent_topology");
  fc.unlock("solvent_settle", "innerloop_solvent_spc");
  fc.unlock("solvent_settle", "repex_temp");
  fc.unlock("solvent_settle", "repex_lambda");
  fc.unlock("solvent_settle", "multicell");
  fc.unlock("solvent_settle", "analysis");
  fc.unlock("solvent_settle", "no_integration");
  fc.unlock("solvent_settle", "stochdyn");
  fc.unlock("solvent_settle", "multistep");
  fc.unlock("solvent_settle", "multistep_boost");
  fc.unlock("solvent_settle", "montecarlo");
  fc.unlock("solvent_settle", "polarisation_cos");
  fc.unlock("solvent_settle", "polarisation_cos_damped");
  fc.unlock("solvent_settle", "random_gromos");
  fc.unlock("solvent_settle", "random_gsl");
  fc.unlock("solvent_settle", "eds");
  fc.unlock("solvent_settle", "parallel_mpi");
  fc.unlock("solvent_settle", "parallel_omp");
  fc.unlock("solvent_settle", "mult_energy_groups");
  fc.unlock("solvent_settle", "ewald");
  fc.unlock("solvent_settle", "p3m");

  fc.unlock("innerloop_method_cuda", "solute");
  fc.unlock("innerloop_method_cuda", "solvent");
  fc.unlock("innerloop_method_cuda", "solvent_only");
  fc.unlock("innerloop_method_cuda", "steepest_descent");
  fc.unlock("innerloop_method_cuda", "solute_constraint_off");
  fc.unlock("innerloop_method_cuda", "solute_shake");
  fc.unlock("innerloop_method_cuda", "solute_lincs");
  fc.unlock("innerloop_method_cuda", "solute_flexshake");
  fc.unlock("innerloop_method_cuda", "solvent_constraint_off");
  fc.unlock("innerloop_method_cuda", "solvent_shake");
  fc.unlock("innerloop_method_cuda", "solvent_settle");
  fc.unlock("innerloop_method_cuda", "solvent_lincs");
  fc.unlock("innerloop_method_cuda", "virial_off");
  fc.unlock("innerloop_method_cuda", "pbc_r");
  fc.unlock("innerloop_method_cuda", "bond");
  fc.unlock("innerloop_method_cuda", "angle");
  fc.unlock("innerloop_method_cuda", "dihedral");
  fc.unlock("innerloop_method_cuda", "improper");
  fc.unlock("innerloop_method_cuda", "crf");
  fc.unlock("innerloop_method_cuda", "lj");
  fc.unlock("innerloop_method_cuda", "com_removal");
  fc.unlock("innerloop_method_cuda", "rf_excluded");
  fc.unlock("innerloop_method_cuda", "pairlist_standard");
  fc.unlock("innerloop_method_cuda", "pairlist_grid");
  fc.unlock("innerloop_method_cuda", "temp_berendsen");
  fc.unlock("innerloop_method_cuda", "temp_nosehoover");
  fc.unlock("innerloop_method_cuda", "temp_nosehoover_chains");
  fc.unlock("innerloop_method_cuda", "position_rest");
  fc.unlock("innerloop_method_cuda", "position_const");
  fc.unlock("innerloop_method_cuda", "position_const_scaled");
  fc.unlock("innerloop_method_cuda", "distance_rest");
  fc.unlock("innerloop_method_cuda", "dihedral_rest");
  fc.unlock("innerloop_method_cuda", "dihedral_const");
  fc.unlock("innerloop_method_cuda", "jvalue_rest");
  fc.unlock("innerloop_method_cuda", "rdc_rest");
  fc.unlock("innerloop_method_cuda", "perscale");
  fc.unlock("innerloop_method_cuda", "rottrans");
  fc.unlock("innerloop_method_cuda", "innerloop_solvent_topology");
  fc.unlock("innerloop_method_cuda", "repex_temp");
  fc.unlock("innerloop_method_cuda", "repex_lambda");
  fc.unlock("innerloop_method_cuda", "analysis");
  fc.unlock("innerloop_method_cuda", "no_integration");
  fc.unlock("innerloop_method_cuda", "stochdyn");
  fc.unlock("innerloop_method_cuda", "random_gromos");
  fc.unlock("innerloop_method_cuda", "random_gsl");
  fc.unlock("innerloop_method_cuda", "pressure_calculation");
  fc.unlock("innerloop_method_cuda", "pressure_scale_berendsen");
  fc.unlock("innerloop_method_cuda", "virial_off");
  fc.unlock("innerloop_method_cuda", "virial_atomic");
  fc.unlock("innerloop_method_cuda", "virial_molecular");
  fc.unlock("innerloop_method_cuda", "parallel_omp");
  fc.unlock("innerloop_method_cuda", "individual_lambdas");
  //allow multiple energy groups
  fc.unlock("innerloop_method_cuda", "mult_energy_groups");


  fc.unlock("leus", "solute");
  fc.unlock("leus", "solvent");
  fc.unlock("leus", "solvent_only");
  fc.unlock("leus", "steepest_descent");
  fc.unlock("leus", "solute_constraint_off");
  fc.unlock("leus", "solute_shake");
  fc.unlock("leus", "solute_lincs");
  fc.unlock("leus", "solute_flexshake");
  fc.unlock("leus", "solvent_constraint_off");
  fc.unlock("leus", "solvent_shake");
  fc.unlock("leus", "solvent_lincs");
  fc.unlock("leus", "solvent_settle");
  fc.unlock("leus", "pressure_calculation");
  fc.unlock("leus", "pressure_scale_berendsen");
  fc.unlock("leus", "virial_off");
  fc.unlock("leus", "virial_atomic");
  fc.unlock("leus", "virial_molecular");
  fc.unlock("leus", "vacuum");
  fc.unlock("leus", "pbc_r");
  fc.unlock("leus", "pbc_c");
  fc.unlock("leus", "pbc_t");
  fc.unlock("leus", "perturbation");
  fc.unlock("leus", "perturbation_scaling");
  fc.unlock("leus", "slow_growth");
  fc.unlock("leus", "individual_lambdas");
  fc.unlock("leus", "bond");
  fc.unlock("leus", "angle");
  fc.unlock("leus", "dihedral");
  fc.unlock("leus", "improper");
  fc.unlock("leus", "crf");
  fc.unlock("leus", "lj");
  fc.unlock("leus", "com_removal");
  fc.unlock("leus", "rf_excluded");
  fc.unlock("leus", "pairlist_standard");
  fc.unlock("leus", "pairlist_grid");
  fc.unlock("leus", "cutoff_atomic");
  fc.unlock("leus", "cg_martini");
  fc.unlock("leus", "cg_gromos");
  fc.unlock("leus", "mixed_grain");
  fc.unlock("leus", "temp_berendsen");
  fc.unlock("leus", "temp_nosehoover");
  fc.unlock("leus", "temp_nosehoover_chains");
  fc.unlock("leus", "position_rest");
  fc.unlock("leus", "position_const");
  fc.unlock("leus", "position_const_scaled");
  fc.unlock("leus", "distance_rest");
  fc.unlock("leus", "dihedral_rest");
  fc.unlock("leus", "dihedral_const");
  fc.unlock("leus", "jvalue_rest");
  fc.unlock("leus", "rdc_rest");
  fc.unlock("leus", "perscale");
  fc.unlock("leus", "rottrans");
  fc.unlock("leus", "innerloop_method_off");
  fc.unlock("leus", "innerloop_method_generic");
  fc.unlock("leus", "innerloop_method_hardcode");
  fc.unlock("leus", "innerloop_method_table");
  fc.unlock("leus", "innerloop_method_cuda");
  fc.unlock("leus", "innerloop_solvent_topology");
  fc.unlock("leus", "innerloop_solvent_spc");
// The leus memory is not passed on between replicas (maybe it shouldn't)
// until this is clarified we lock the combination
//  fc.unlock("leus", "repex_temp");
//  fc.unlock("leus", "repex_lambda");
  fc.unlock("leus", "multicell");
  fc.unlock("leus", "analysis");
  fc.unlock("leus", "no_integration");
  fc.unlock("leus", "stochdyn");
  fc.unlock("leus", "multistep");
  fc.unlock("leus", "multistep_boost");
  fc.unlock("leus", "montecarlo");
  fc.unlock("leus", "polarisation_cos");
  fc.unlock("leus", "polarisation_cos_damped");
  fc.unlock("leus", "random_gromos");
  fc.unlock("leus", "random_gsl");
  fc.unlock("leus", "eds");
  fc.unlock("leus", "parallel_mpi");
  fc.unlock("leus", "parallel_omp");
  fc.unlock("leus", "mult_energy_groups");
  fc.unlock("leus", "ewald");
  fc.unlock("leus", "p3m");


  fc.unlock("xray", "solute");
  fc.unlock("xray", "solvent");
  fc.unlock("xray", "solvent_only");
  fc.unlock("xray", "steepest_descent");
  fc.unlock("xray", "solute_constraint_off");
  fc.unlock("xray", "solute_shake");
  fc.unlock("xray", "solute_lincs");
  fc.unlock("xray", "solute_flexshake");
  fc.unlock("xray", "solvent_constraint_off");
  fc.unlock("xray", "solvent_shake");
  fc.unlock("xray", "solvent_lincs");
  fc.unlock("xray", "solvent_settle");
  fc.unlock("xray", "pressure_calculation");
  fc.unlock("xray", "pressure_scale_berendsen", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("xray", "virial_off");
  fc.unlock("xray", "virial_atomic");
  fc.unlock("xray", "virial_molecular");
  fc.unlock("xray", "vacuum");
  fc.unlock("xray", "pbc_r");
  fc.unlock("xray", "pbc_c");
  fc.unlock("xray", "pbc_t");
  fc.unlock("xray", "perturbation");
  fc.unlock("xray", "perturbation_scaling");
  fc.unlock("xray", "slow_growth");
  fc.unlock("xray", "individual_lambdas");
  fc.unlock("xray", "bond");
  fc.unlock("xray", "angle");
  fc.unlock("xray", "dihedral");
  fc.unlock("xray", "improper");
  fc.unlock("xray", "crf");
  fc.unlock("xray", "lj");
  fc.unlock("xray", "com_removal");
  fc.unlock("xray", "rf_excluded");
  fc.unlock("xray", "pairlist_standard");
  fc.unlock("xray", "pairlist_grid");
  fc.unlock("xray", "cutoff_atomic");
  fc.unlock("xray", "cg_martini");
  fc.unlock("xray", "cg_gromos");
  fc.unlock("xray", "mixed_grain");
  fc.unlock("xray", "temp_berendsen");
  fc.unlock("xray", "temp_nosehoover");
  fc.unlock("xray", "temp_nosehoover_chains");
  fc.unlock("xray", "position_rest");
  fc.unlock("xray", "position_const");
  fc.unlock("xray", "position_const_scaled");
  fc.unlock("xray", "distance_rest");
  fc.unlock("xray", "dihedral_rest");
  fc.unlock("xray", "dihedral_const");
  fc.unlock("xray", "jvalue_rest");
  fc.unlock("xray", "rdc_rest");
  fc.unlock("xray", "perscale");
  fc.unlock("xray", "rottrans");
  fc.unlock("xray", "innerloop_method_off");
  fc.unlock("xray", "innerloop_method_generic");
  fc.unlock("xray", "innerloop_method_hardcode");
  fc.unlock("xray", "innerloop_method_table");
  fc.unlock("xray", "innerloop_method_cuda");
  fc.unlock("xray", "innerloop_solvent_topology");
  fc.unlock("xray", "innerloop_solvent_spc");
  fc.unlock("xray", "repex_temp");
  fc.unlock("xray", "repex_lambda");
  fc.unlock("xray", "multicell");
  fc.unlock("xray", "analysis");
  fc.unlock("xray", "no_integration");
  fc.unlock("xray", "stochdyn");
  fc.unlock("xray", "multistep");
  fc.unlock("xray", "multistep_boost");
  fc.unlock("xray", "montecarlo");
  fc.unlock("xray", "polarisation_cos");
  fc.unlock("xray", "polarisation_cos_damped");
  fc.unlock("xray", "random_gromos");
  fc.unlock("xray", "random_gsl");
  fc.unlock("xray", "eds");
  fc.unlock("xray", "parallel_mpi", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("xray", "parallel_omp");
  fc.unlock("xray", "mult_energy_groups");
  fc.unlock("xray", "ewald");
  fc.unlock("xray", "p3m");
  fc.unlock("xray", "leus");

  fc.unlock("sasa", "solute");
  //fc.unlock("sasa", "solvent");
  //fc.unlock("sasa", "solvent_only");
  fc.unlock("sasa", "steepest_descent");
  fc.unlock("sasa", "solute_constraint_off");
  fc.unlock("sasa", "solute_shake");
  fc.unlock("sasa", "solute_lincs");
  fc.unlock("sasa", "solute_flexshake");
  fc.unlock("sasa", "solvent_constraint_off");
  fc.unlock("sasa", "solvent_shake");
  fc.unlock("sasa", "solvent_lincs");
  fc.unlock("sasa", "solvent_settle");
  //fc.unlock("sasa", "solvent_gpu_settle");
  //fc.unlock("sasa", "pressure_calculation");
  //fc.unlock("sasa", "pressure_scale_berendsen");
  fc.unlock("sasa", "virial_off");
  fc.unlock("sasa", "virial_atomic");
  fc.unlock("sasa", "virial_molecular");
  fc.unlock("sasa", "vacuum");
  //fc.unlock("sasa", "pbc_r");
  //fc.unlock("sasa", "pbc_c");
  //fc.unlock("sasa", "pbc_t");
  fc.unlock("sasa", "perturbation");
  fc.unlock("sasa", "perturbation_scaling");
  fc.unlock("sasa", "slow_growth");
  fc.unlock("sasa", "individual_lambdas");
  fc.unlock("sasa", "bond");
  fc.unlock("sasa", "angle");
  fc.unlock("sasa", "dihedral");
  fc.unlock("sasa", "improper");
  fc.unlock("sasa", "crf");
  fc.unlock("sasa", "lj");
  fc.unlock("sasa", "com_removal");
  fc.unlock("sasa", "rf_excluded");
  fc.unlock("sasa", "pairlist_standard");
  fc.unlock("sasa", "pairlist_grid");
  fc.unlock("sasa", "cutoff_atomic");
  //fc.unlock("sasa", "cg_martini");
  //fc.unlock("sasa", "cg_gromos");
  //fc.unlock("sasa", "mixed_grain");
  fc.unlock("sasa", "temp_berendsen");
  fc.unlock("sasa", "temp_nosehoover");
  fc.unlock("sasa", "temp_nosehoover_chains");
  fc.unlock("sasa", "position_rest");
  fc.unlock("sasa", "position_const");
  fc.unlock("sasa", "position_const_scaled");
  fc.unlock("sasa", "distance_rest");
  fc.unlock("sasa", "dihedral_rest");
  fc.unlock("sasa", "dihedral_const");
  fc.unlock("sasa", "jvalue_rest");
  fc.unlock("sasa", "rdc_rest");
  fc.unlock("sasa", "perscale");
  fc.unlock("sasa", "rottrans");
  fc.unlock("sasa", "innerloop_method_off");
  fc.unlock("sasa", "innerloop_method_generic");
  fc.unlock("sasa", "innerloop_method_hardcode");
  fc.unlock("sasa", "innerloop_method_table");
  fc.unlock("sasa", "innerloop_method_cuda");
  fc.unlock("sasa", "innerloop_solvent_topology");
  //fc.unlock("sasa", "innerloop_solvent_spc");
  fc.unlock("sasa", "repex_temp");
  fc.unlock("sasa", "repex_lambda");
  //fc.unlock("sasa", "multicell");
  fc.unlock("sasa", "analysis");
  fc.unlock("sasa", "no_integration");
  fc.unlock("sasa", "stochdyn");
  fc.unlock("sasa", "multistep");
  fc.unlock("sasa", "multistep_boost");
  fc.unlock("sasa", "montecarlo");
  //fc.unlock("sasa", "polarisation_cos");
  //fc.unlock("sasa", "polarisation_cos_damped");
  //fc.unlock("sasa", "sasavol");
  fc.unlock("sasa", "random_gromos");
  fc.unlock("sasa", "random_gsl");
  fc.unlock("sasa", "eds");
  fc.unlock("sasa", "parallel_mpi");
  fc.unlock("sasa", "parallel_omp");
  fc.unlock("sasa", "mult_energy_groups");
  fc.unlock("sasa", "ewald");
  fc.unlock("sasa", "p3m");
  fc.unlock("sasa", "leus");
  fc.unlock("sasa", "xray");

  fc.unlock("sasavol", "solute");
  //fc.unlock("sasavol", "solvent");
  //fc.unlock("sasavol", "solvent_only");
  fc.unlock("sasavol", "steepest_descent");
  fc.unlock("sasavol", "solute_constraint_off");
  fc.unlock("sasavol", "solute_shake");
  fc.unlock("sasavol", "solute_lincs");
  fc.unlock("sasavol", "solute_flexshake");
  fc.unlock("sasavol", "solvent_constraint_off");
  fc.unlock("sasavol", "solvent_shake");
  fc.unlock("sasavol", "solvent_lincs");
  fc.unlock("sasavol", "solvent_settle");
  //fc.unlock("sasavol", "solvent_gpu_settle");
  //fc.unlock("sasavol", "pressure_calculation");
  //fc.unlock("sasavol", "pressure_scale_berendsen");
  fc.unlock("sasavol", "virial_off");
  fc.unlock("sasavol", "virial_atomic");
  fc.unlock("sasavol", "virial_molecular");
  fc.unlock("sasavol", "vacuum");
  //fc.unlock("sasavol", "pbc_r");
  //fc.unlock("sasavol", "pbc_c");
  //fc.unlock("sasavol", "pbc_t");
  fc.unlock("sasavol", "perturbation");
  fc.unlock("sasavol", "perturbation_scaling");
  fc.unlock("sasavol", "slow_growth");
  fc.unlock("sasavol", "individual_lambdas");
  fc.unlock("sasavol", "bond");
  fc.unlock("sasavol", "angle");
  fc.unlock("sasavol", "dihedral");
  fc.unlock("sasavol", "improper");
  fc.unlock("sasavol", "crf");
  fc.unlock("sasavol", "lj");
  fc.unlock("sasavol", "com_removal");
  fc.unlock("sasavol", "rf_excluded");
  fc.unlock("sasavol", "pairlist_standard");
  fc.unlock("sasavol", "pairlist_grid");
  fc.unlock("sasavol", "cutoff_atomic");
  //fc.unlock("sasavol", "cg_martini");
  //fc.unlock("sasavol", "cg_gromos");
  //fc.unlock("sasavol", "mixed_grain");
  fc.unlock("sasavol", "temp_berendsen");
  fc.unlock("sasavol", "temp_nosehoover");
  fc.unlock("sasavol", "temp_nosehoover_chains");
  fc.unlock("sasavol", "position_rest");
  fc.unlock("sasavol", "position_const");
  fc.unlock("sasavol", "position_const_scaled");
  fc.unlock("sasavol", "distance_rest");
  fc.unlock("sasavol", "dihedral_rest");
  fc.unlock("sasavol", "dihedral_const");
  fc.unlock("sasavol", "jvalue_rest");
  fc.unlock("sasavol", "rdc_rest");
  fc.unlock("sasavol", "perscale");
  fc.unlock("sasavol", "rottrans");
  fc.unlock("sasavol", "innerloop_method_off");
  fc.unlock("sasavol", "innerloop_method_generic");
  fc.unlock("sasavol", "innerloop_method_hardcode");
  fc.unlock("sasavol", "innerloop_method_table");
  fc.unlock("sasavol", "innerloop_method_cuda");
  fc.unlock("sasavol", "innerloop_solvent_topology");
  //fc.unlock("sasavol", "innerloop_solvent_spc");
  fc.unlock("sasavol", "repex_temp");
  fc.unlock("sasavol", "repex_lambda");
  //fc.unlock("sasavol", "multicell");
  fc.unlock("sasavol", "analysis");
  fc.unlock("sasavol", "no_integration");
  fc.unlock("sasavol", "stochdyn");
  fc.unlock("sasavol", "multistep");
  fc.unlock("sasavol", "multistep_boost");
  fc.unlock("sasavol", "montecarlo");
  //fc.unlock("sasavol", "polarisation_cos");
  //fc.unlock("sasavol", "polarisation_cos_damped");
  //fc.unlock("sasavol", "sasa");
  fc.unlock("sasavol", "random_gromos");
  fc.unlock("sasavol", "random_gsl");
  fc.unlock("sasavol", "eds");
  fc.unlock("sasavol", "parallel_mpi");
  fc.unlock("sasavol", "parallel_omp");
  fc.unlock("sasavol", "mult_energy_groups");
  fc.unlock("sasavol", "ewald");
  fc.unlock("sasavol", "p3m");
  fc.unlock("sasavol", "leus");
  fc.unlock("sasavol", "xray");

  fc.unlock("pairlist_gridcell", "solute");
  fc.unlock("pairlist_gridcell", "solvent");
  fc.unlock("pairlist_gridcell", "solvent_only");
  fc.unlock("pairlist_gridcell", "steepest_descent");
  fc.unlock("pairlist_gridcell", "solute_constraint_off");
  fc.unlock("pairlist_gridcell", "solute_shake");
  fc.unlock("pairlist_gridcell", "solute_lincs");
  fc.unlock("pairlist_gridcell", "solute_flexshake");
  fc.unlock("pairlist_gridcell", "solvent_constraint_off");
  fc.unlock("pairlist_gridcell", "solvent_shake");
  fc.unlock("pairlist_gridcell", "solvent_lincs");
  fc.unlock("pairlist_gridcell", "solvent_settle");
  fc.unlock("pairlist_gridcell", "pressure_calculation");
  fc.unlock("pairlist_gridcell", "pressure_scale_berendsen");
  fc.unlock("pairlist_gridcell", "virial_off");
  fc.unlock("pairlist_gridcell", "virial_atomic");
  fc.unlock("pairlist_gridcell", "virial_molecular");
  //fc.unlock("pairlist_gridcell", "vacuum");
  fc.unlock("pairlist_gridcell", "pbc_r");
  fc.unlock("pairlist_gridcell", "pbc_c");
  fc.unlock("pairlist_gridcell", "pbc_t");
  fc.unlock("pairlist_gridcell", "perturbation");
  fc.unlock("pairlist_gridcell", "perturbation_scaling"); // candide: testing unlock
  fc.unlock("pairlist_gridcell", "slow_growth");
  fc.unlock("pairlist_gridcell", "individual_lambdas");
  fc.unlock("pairlist_gridcell", "bond");
  fc.unlock("pairlist_gridcell", "angle");
  fc.unlock("pairlist_gridcell", "dihedral");
  fc.unlock("pairlist_gridcell", "improper");
  fc.unlock("pairlist_gridcell", "crf");
  fc.unlock("pairlist_gridcell", "lj");
  fc.unlock("pairlist_gridcell", "com_removal");
  fc.unlock("pairlist_gridcell", "rf_excluded");
  fc.unlock("pairlist_gridcell", "cutoff_atomic");
  fc.unlock("pairlist_gridcell", "cg_martini");
  fc.unlock("pairlist_gridcell", "cg_gromos");
  fc.unlock("pairlist_gridcell", "mixed_grain");
  fc.unlock("pairlist_gridcell", "temp_berendsen");
  fc.unlock("pairlist_gridcell", "temp_nosehoover");
  fc.unlock("pairlist_gridcell", "temp_nosehoover_chains");
  fc.unlock("pairlist_gridcell", "position_rest");
  fc.unlock("pairlist_gridcell", "position_const");
  fc.unlock("pairlist_gridcell", "position_const_scaled");
  fc.unlock("pairlist_gridcell", "distance_rest");
  fc.unlock("pairlist_gridcell", "dihedral_rest");
  fc.unlock("pairlist_gridcell", "dihedral_const");
  fc.unlock("pairlist_gridcell", "jvalue_rest");
  fc.unlock("pairlist_gridcell", "rdc_rest");
  fc.unlock("pairlist_gridcell", "perscale");
  fc.unlock("pairlist_gridcell", "rottrans");
  fc.unlock("pairlist_gridcell", "innerloop_method_off");
  fc.unlock("pairlist_gridcell", "innerloop_method_generic");
  fc.unlock("pairlist_gridcell", "innerloop_method_hardcode");
  fc.unlock("pairlist_gridcell", "innerloop_method_table");
  fc.unlock("pairlist_gridcell", "innerloop_method_cuda");
  fc.unlock("pairlist_gridcell", "innerloop_solvent_topology");
  fc.unlock("pairlist_gridcell", "innerloop_solvent_spc");
  fc.unlock("pairlist_gridcell", "repex_temp");
  fc.unlock("pairlist_gridcell", "repex_lambda");
  fc.unlock("pairlist_gridcell", "multicell");
  fc.unlock("pairlist_gridcell", "analysis");
  fc.unlock("pairlist_gridcell", "no_integration");
  fc.unlock("pairlist_gridcell", "stochdyn");
  fc.unlock("pairlist_gridcell", "multistep");
  fc.unlock("pairlist_gridcell", "multistep_boost");
  fc.unlock("pairlist_gridcell", "montecarlo");
  fc.unlock("pairlist_gridcell", "polarisation_cos");
  fc.unlock("pairlist_gridcell", "polarisation_cos_damped");
  fc.unlock("pairlist_gridcell", "sasa");
  fc.unlock("pairlist_gridcell", "sasavol");
  fc.unlock("pairlist_gridcell", "random_gromos");
  fc.unlock("pairlist_gridcell", "random_gsl");
  fc.unlock("pairlist_gridcell", "eds");
  fc.unlock("pairlist_gridcell", "parallel_mpi");
  fc.unlock("pairlist_gridcell", "parallel_omp");
  fc.unlock("pairlist_gridcell", "mult_energy_groups");
  fc.unlock("pairlist_gridcell", "ewald");
  fc.unlock("pairlist_gridcell", "p3m");
  fc.unlock("pairlist_gridcell", "leus");
  fc.unlock("pairlist_gridcell", "xray");

  fc.unlock("cutoff_cg", "solute");
  fc.unlock("cutoff_cg", "solvent");
  fc.unlock("cutoff_cg", "solvent_only");
  fc.unlock("cutoff_cg", "steepest_descent");
  fc.unlock("cutoff_cg", "solute_constraint_off");
  fc.unlock("cutoff_cg", "solute_shake");
  fc.unlock("cutoff_cg", "solute_lincs");
  fc.unlock("cutoff_cg", "solute_flexshake");
  fc.unlock("cutoff_cg", "solvent_constraint_off");
  fc.unlock("cutoff_cg", "solvent_shake");
  fc.unlock("cutoff_cg", "solvent_lincs");
  fc.unlock("cutoff_cg", "solvent_settle");
  fc.unlock("cutoff_cg", "pressure_calculation");
  fc.unlock("cutoff_cg", "pressure_scale_berendsen");
  fc.unlock("cutoff_cg", "virial_off");
  fc.unlock("cutoff_cg", "virial_atomic");
  fc.unlock("cutoff_cg", "virial_molecular");
  fc.unlock("cutoff_cg", "vacuum");
  fc.unlock("cutoff_cg", "pbc_r");
  fc.unlock("cutoff_cg", "pbc_c");
  fc.unlock("cutoff_cg", "pbc_t");
  fc.unlock("cutoff_cg", "perturbation");
  fc.unlock("cutoff_cg", "perturbation_scaling");
  fc.unlock("cutoff_cg", "slow_growth");
  fc.unlock("cutoff_cg", "individual_lambdas");
  fc.unlock("cutoff_cg", "bond");
  fc.unlock("cutoff_cg", "angle");
  fc.unlock("cutoff_cg", "dihedral");
  fc.unlock("cutoff_cg", "improper");
  fc.unlock("cutoff_cg", "crf");
  fc.unlock("cutoff_cg", "lj");
  fc.unlock("cutoff_cg", "com_removal");
  fc.unlock("cutoff_cg", "rf_excluded");
  fc.unlock("cutoff_cg", "pairlist_standard");
  fc.unlock("cutoff_cg", "pairlist_grid");
  fc.unlock("cutoff_cg", "pairlist_gridcell");
  fc.unlock("cutoff_cg", "cutoff_atomic");
  fc.unlock("cutoff_cg", "cg_martini");
  fc.unlock("cutoff_cg", "cg_gromos");
  fc.unlock("cutoff_cg", "mixed_grain");
  fc.unlock("cutoff_cg", "temp_berendsen");
  fc.unlock("cutoff_cg", "temp_nosehoover");
  fc.unlock("cutoff_cg", "temp_nosehoover_chains");
  fc.unlock("cutoff_cg", "position_rest");
  fc.unlock("cutoff_cg", "position_const");
  fc.unlock("cutoff_cg", "position_const_scaled");
  fc.unlock("cutoff_cg", "distance_rest");
  fc.unlock("cutoff_cg", "dihedral_rest");
  fc.unlock("cutoff_cg", "dihedral_const");
  fc.unlock("cutoff_cg", "jvalue_rest");
  fc.unlock("cutoff_cg", "rdc_rest");
  fc.unlock("cutoff_cg", "perscale");
  fc.unlock("cutoff_cg", "rottrans");
  fc.unlock("cutoff_cg", "innerloop_method_off");
  fc.unlock("cutoff_cg", "innerloop_method_generic");
  fc.unlock("cutoff_cg", "innerloop_method_hardcode");
  fc.unlock("cutoff_cg", "innerloop_method_table");
  fc.unlock("cutoff_cg", "innerloop_method_cuda");
  fc.unlock("cutoff_cg", "innerloop_solvent_topology");
  fc.unlock("cutoff_cg", "innerloop_solvent_spc");
  fc.unlock("cutoff_cg", "repex_temp");
  fc.unlock("cutoff_cg", "repex_lambda");
  fc.unlock("cutoff_cg", "multicell");
  fc.unlock("cutoff_cg", "analysis");
  fc.unlock("cutoff_cg", "no_integration");
  fc.unlock("cutoff_cg", "stochdyn");
  fc.unlock("cutoff_cg", "multistep");
  fc.unlock("cutoff_cg", "multistep_boost");
  fc.unlock("cutoff_cg", "montecarlo");
  fc.unlock("cutoff_cg", "polarisation_cos");
  fc.unlock("cutoff_cg", "polarisation_cos_damped");
  fc.unlock("cutoff_cg", "sasa");
  fc.unlock("cutoff_cg", "sasavol");
  fc.unlock("cutoff_cg", "random_gromos");
  fc.unlock("cutoff_cg", "random_gsl");
  fc.unlock("cutoff_cg", "eds");
  fc.unlock("cutoff_cg", "parallel_mpi");
  fc.unlock("cutoff_cg", "parallel_omp");
  fc.unlock("cutoff_cg", "mult_energy_groups");
  fc.unlock("cutoff_cg", "leus");
  fc.unlock("cutoff_cg", "xray");

  fc.unlock("force_groups", "solute");
  fc.unlock("force_groups", "solvent");
  fc.unlock("force_groups", "solvent_only");
  fc.unlock("force_groups", "steepest_descent");
  fc.unlock("force_groups", "solute_constraint_off");
  fc.unlock("force_groups", "solute_shake");
  fc.unlock("force_groups", "solute_lincs");
  fc.unlock("force_groups", "solute_flexshake");
  fc.unlock("force_groups", "solvent_constraint_off");
  fc.unlock("force_groups", "solvent_shake");
  fc.unlock("force_groups", "solvent_lincs");
  fc.unlock("force_groups", "solvent_settle");
  fc.unlock("force_groups", "pressure_calculation");
  fc.unlock("force_groups", "pressure_scale_berendsen");
  fc.unlock("force_groups", "virial_off");
  fc.unlock("force_groups", "virial_atomic");
  fc.unlock("force_groups", "virial_molecular");
  fc.unlock("force_groups", "vacuum");
  fc.unlock("force_groups", "pbc_r");
  fc.unlock("force_groups", "pbc_c");
  fc.unlock("force_groups", "pbc_t");
  fc.unlock("force_groups", "bond");
  fc.unlock("force_groups", "angle");
  fc.unlock("force_groups", "dihedral");
  fc.unlock("force_groups", "improper");
  fc.unlock("force_groups", "crf");
  fc.unlock("force_groups", "lj");
  fc.unlock("force_groups", "com_removal");
  fc.unlock("force_groups", "rf_excluded");
  fc.unlock("force_groups", "pairlist_standard");
  fc.unlock("force_groups", "pairlist_grid");
  fc.unlock("force_groups", "pairlist_gridcell");
  fc.unlock("force_groups", "cutoff_atomic");
  fc.unlock("force_groups", "cutoff_cg");
  fc.unlock("force_groups", "cg_martini");
  fc.unlock("force_groups", "cg_gromos");
  fc.unlock("force_groups", "mixed_grain");
  fc.unlock("force_groups", "temp_berendsen");
  fc.unlock("force_groups", "temp_nosehoover");
  fc.unlock("force_groups", "temp_nosehoover_chains");
  fc.unlock("force_groups", "position_rest");
  fc.unlock("force_groups", "position_const");
  fc.unlock("force_groups", "position_const_scaled");
  fc.unlock("force_groups", "distance_rest");
  fc.unlock("force_groups", "dihedral_rest");
  fc.unlock("force_groups", "dihedral_const");
  fc.unlock("force_groups", "jvalue_rest");
  fc.unlock("force_groups", "rdc_rest");
  fc.unlock("force_groups", "perscale");
  fc.unlock("force_groups", "rottrans");
  fc.unlock("force_groups", "innerloop_method_off");
  fc.unlock("force_groups", "innerloop_solvent_topology");
  fc.unlock("force_groups", "repex_temp");
  fc.unlock("force_groups", "repex_lambda");
  fc.unlock("force_groups", "analysis");
  fc.unlock("force_groups", "no_integration");
  fc.unlock("force_groups", "stochdyn");
  fc.unlock("force_groups", "random_gromos");
  fc.unlock("force_groups", "random_gsl");
  fc.unlock("force_groups", "parallel_mpi");
  fc.unlock("force_groups", "parallel_omp");
  fc.unlock("force_groups", "mult_energy_groups");
  fc.unlock("force_groups", "leus");
  fc.unlock("force_groups", "xray");
  fc.unlock("distance_field", "solute");
  fc.unlock("distance_field", "solvent");
  //  fc.unlock("distance_field", "solvent_only");
  //  fc.unlock("distance_field", "steepest_descent");
  fc.unlock("distance_field", "solute_constraint_off");
  fc.unlock("distance_field", "solute_shake");
  fc.unlock("distance_field", "solute_lincs");
  fc.unlock("distance_field", "solute_flexshake");
  fc.unlock("distance_field", "solvent_constraint_off");
  fc.unlock("distance_field", "solvent_shake");
  fc.unlock("distance_field", "solvent_lincs");
  fc.unlock("distance_field", "solvent_settle");
  //  fc.unlock("distance_field", "pressure_calculation");
  //  fc.unlock("distance_field", "pressure_scale_berendsen");
  fc.unlock("distance_field", "virial_off");
  //  fc.unlock("distance_field", "virial_atomic");
  //  fc.unlock("distance_field", "virial_molecular");
  // fc.unlock("distance_field", "vacuum");
  fc.unlock("distance_field", "pbc_r");
  // fc.unlock("distance_field", "pbc_c");
  // fc.unlock("distance_field", "pbc_t");
  fc.unlock("distance_field", "perturbation");
  fc.unlock("distance_field", "perturbation_scaling");
  fc.unlock("distance_field", "slow_growth");
  fc.unlock("distance_field", "individual_lambdas");
  fc.unlock("distance_field", "bond");
  fc.unlock("distance_field", "angle");
  fc.unlock("distance_field", "dihedral");
  fc.unlock("distance_field", "improper");
  fc.unlock("distance_field", "crf");
  fc.unlock("distance_field", "lj");
  fc.unlock("distance_field", "com_removal");
  fc.unlock("distance_field", "rf_excluded");
  fc.unlock("distance_field", "pairlist_standard");
  fc.unlock("distance_field", "pairlist_grid");
  fc.unlock("distance_field", "pairlist_gridcell");
  fc.unlock("distance_field", "cutoff_atomic");
  fc.unlock("distance_field", "cutoff_cg");
  //  fc.unlock("distance_field", "cg_martini");
  //  fc.unlock("distance_field", "multi_grain");
  //  fc.unlock("distance_field", "cg_gromos");
  //  fc.unlock("distance_field", "mixed_grain");
  fc.unlock("distance_field", "temp_berendsen");
  fc.unlock("distance_field", "temp_nosehoover");
  fc.unlock("distance_field", "temp_nosehoover_chains");
  fc.unlock("distance_field", "position_rest");
  //  fc.unlock("distance_field", "position_const");
  //  fc.unlock("distance_field", "position_const_scaled");
  fc.unlock("distance_field", "distance_rest");
  fc.unlock("distance_field", "dihedral_rest");
  fc.unlock("distance_field", "dihedral_const");
  fc.unlock("distance_field", "jvalue_rest");
  fc.unlock("distance_field", "rdc_rest");
  //  fc.unlock("distance_field", "perscale");
  fc.unlock("distance_field", "rottrans");
  fc.unlock("distance_field", "innerloop_method_off");
  fc.unlock("distance_field", "innerloop_method_generic");
  fc.unlock("distance_field", "innerloop_method_hardcode");
  fc.unlock("distance_field", "innerloop_method_table");
  fc.unlock("distance_field", "innerloop_method_cuda");
  fc.unlock("distance_field", "innerloop_solvent_topology");
  fc.unlock("distance_field", "innerloop_solvent_spc");
  fc.unlock("distance_field", "repex_temp");
  fc.unlock("distance_field", "repex_lambda");
  //  fc.unlock("distance_field", "multicell");
  //  fc.unlock("distance_field", "analysis");
  //  fc.unlock("distance_field", "no_integration");
  //  fc.unlock("distance_field", "stochdyn");
  //  fc.unlock("distance_field", "multistep");
  //  fc.unlock("distance_field", "multistep_boost");
  //  fc.unlock("distance_field", "montecarlo");
  //  fc.unlock("distance_field", "polarisation_cos");
  // fc.unlock("distance_field", "polarisation_cos_damped");
  //  fc.unlock("distance_field", "sasa");
  //  fc.unlock("distance_field", "sasavol");
  fc.unlock("distance_field", "random_gromos");
  fc.unlock("distance_field", "random_gsl");
  //  fc.unlock("distance_field", "eds");
  fc.unlock("distance_field", "parallel_mpi");
  fc.unlock("distance_field", "parallel_omp");
  fc.unlock("distance_field", "mult_energy_groups");
  fc.unlock("distance_field", "ewald");
  fc.unlock("distance_field", "p3m");
  fc.unlock("distance_field", "leus");
  //  fc.unlock("distance_field", "xray");
  //  fc.unlock("distance_field", "force_groups");
  fc.unlock("bsleus", "solute");
  fc.unlock("bsleus", "solvent");
  fc.unlock("bsleus", "solvent_only");
  fc.unlock("bsleus", "steepest_descent");
  fc.unlock("bsleus", "solute_constraint_off");
  fc.unlock("bsleus", "solute_shake");
  fc.unlock("bsleus", "solute_lincs");
  fc.unlock("bsleus", "solute_flexshake");
  fc.unlock("bsleus", "solvent_constraint_off");
  fc.unlock("bsleus", "solvent_shake");
  fc.unlock("bsleus", "solvent_lincs");
  fc.unlock("bsleus", "solvent_settle");
  fc.unlock("bsleus", "pressure_calculation");
  fc.unlock("bsleus", "pressure_scale_berendsen");
  fc.unlock("bsleus", "virial_off");
  fc.unlock("bsleus", "virial_atomic");
  fc.unlock("bsleus", "virial_molecular");
  fc.unlock("bsleus", "vacuum");
  fc.unlock("bsleus", "pbc_r");
  fc.unlock("bsleus", "pbc_c");
  fc.unlock("bsleus", "pbc_t");
  fc.unlock("bsleus", "perturbation");
  fc.unlock("bsleus", "perturbation_scaling");
  fc.unlock("bsleus", "slow_growth");
  fc.unlock("bsleus", "individual_lambdas");
  fc.unlock("bsleus", "bond");
  fc.unlock("bsleus", "angle");
  fc.unlock("bsleus", "dihedral");
  fc.unlock("bsleus", "improper");
  fc.unlock("bsleus", "crf");
  fc.unlock("bsleus", "lj");
  fc.unlock("bsleus", "com_removal");
  fc.unlock("bsleus", "rf_excluded");
  fc.unlock("bsleus", "pairlist_standard");
  fc.unlock("bsleus", "pairlist_grid");
  fc.unlock("bsleus", "pairlist_gridcell");
  fc.unlock("bsleus", "cutoff_atomic");
  fc.unlock("bsleus", "cutoff_cg");
  fc.unlock("bsleus", "cg_martini");
  fc.unlock("bsleus", "cg_gromos");
  fc.unlock("bsleus", "mixed_grain");
  fc.unlock("bsleus", "temp_berendsen");
  fc.unlock("bsleus", "temp_nosehoover");
  fc.unlock("bsleus", "temp_nosehoover_chains");
  fc.unlock("bsleus", "position_rest");
  fc.unlock("bsleus", "position_const");
  fc.unlock("bsleus", "position_const_scaled");
  fc.unlock("bsleus", "distance_rest");
  fc.unlock("bsleus", "dihedral_rest");
  fc.unlock("bsleus", "dihedral_const");
  fc.unlock("bsleus", "jvalue_rest");
  fc.unlock("bsleus", "rdc_rest");
  fc.unlock("bsleus", "perscale");
  fc.unlock("bsleus", "rottrans");
  fc.unlock("bsleus", "innerloop_method_off");
  fc.unlock("bsleus", "innerloop_method_generic");
  fc.unlock("bsleus", "innerloop_method_hardcode");
  fc.unlock("bsleus", "innerloop_method_table");
  fc.unlock("bsleus", "innerloop_method_cuda");
  fc.unlock("bsleus", "innerloop_solvent_topology");
  fc.unlock("bsleus", "innerloop_solvent_spc");
// The leus memory is not passed on between replicas (maybe it shouldn't)
// until this is clarified we lock the combination
//  fc.unlock("bsleus", "repex_temp");
//  fc.unlock("bsleus", "repex_lambda");
  fc.unlock("bsleus", "multicell");
  fc.unlock("bsleus", "analysis");
  fc.unlock("bsleus", "no_integration");
  fc.unlock("bsleus", "stochdyn");
  fc.unlock("bsleus", "multistep");
  fc.unlock("bsleus", "multistep_boost");
  fc.unlock("bsleus", "polarisation_cos");
  fc.unlock("bsleus", "polarisation_cos_damped");
  fc.unlock("bsleus", "sasa");
  fc.unlock("bsleus", "sasavol");
  fc.unlock("bsleus", "random_gromos");
  fc.unlock("bsleus", "random_gsl");
  fc.unlock("bsleus", "eds");
  fc.unlock("bsleus", "parallel_mpi");
  fc.unlock("bsleus", "parallel_omp");
  fc.unlock("bsleus", "mult_energy_groups");
  fc.unlock("bsleus", "ewald");
  fc.unlock("bsleus", "p3m");
  fc.unlock("bsleus", "xray");
  fc.unlock("bsleus", "force_groups");

  // ANITA
  fc.unlock("precalculate_lambdas", "solute");
  fc.unlock("precalculate_lambdas", "solvent");
  fc.unlock("precalculate_lambdas", "solvent_only");
  fc.unlock("precalculate_lambdas", "steepest_descent");
  fc.unlock("precalculate_lambdas", "solute_constraint_off");
  fc.unlock("precalculate_lambdas", "solute_shake");
  fc.unlock("precalculate_lambdas", "solute_lincs");
  fc.unlock("precalculate_lambdas", "solute_flexshake");
  fc.unlock("precalculate_lambdas", "solvent_constraint_off");
  fc.unlock("precalculate_lambdas", "solvent_shake");
  fc.unlock("precalculate_lambdas", "solvent_lincs");
  fc.unlock("precalculate_lambdas", "solvent_settle");
  fc.unlock("precalculate_lambdas", "pressure_calculation");
  fc.unlock("precalculate_lambdas", "pressure_scale_berendsen");
  fc.unlock("precalculate_lambdas", "virial_off");
  fc.unlock("precalculate_lambdas", "virial_atomic");
  fc.unlock("precalculate_lambdas", "virial_molecular");
  fc.unlock("precalculate_lambdas", "vacuum");
  fc.unlock("precalculate_lambdas", "pbc_r");
  fc.unlock("precalculate_lambdas", "pbc_c");
  fc.unlock("precalculate_lambdas", "pbc_t");
  fc.unlock("precalculate_lambdas", "perturbation");
//  fc.unlock("precalculate_lambdas", "perturbation_scaling");
//  fc.unlock("precalculate_lambdas", "slow_growth");
  fc.unlock("precalculate_lambdas", "individual_lambdas");
  fc.unlock("precalculate_lambdas", "bond");
  fc.unlock("precalculate_lambdas", "angle");
  fc.unlock("precalculate_lambdas", "dihedral");
  fc.unlock("precalculate_lambdas", "improper");
  fc.unlock("precalculate_lambdas", "crf");
  fc.unlock("precalculate_lambdas", "lj");
  fc.unlock("precalculate_lambdas", "com_removal");
  fc.unlock("precalculate_lambdas", "rf_excluded");
  fc.unlock("precalculate_lambdas", "pairlist_standard");
  fc.unlock("precalculate_lambdas", "pairlist_grid");
  fc.unlock("precalculate_lambdas", "pairlist_gridcell");
  fc.unlock("precalculate_lambdas", "cutoff_atomic");
  fc.unlock("precalculate_lambdas", "cutoff_cg");
//  fc.unlock("precalculate_lambdas", "cg_martini");
//  fc.unlock("precalculate_lambdas", "cg_gromos");
//  fc.unlock("precalculate_lambdas", "mixed_grain");
  fc.unlock("precalculate_lambdas", "temp_berendsen");
  fc.unlock("precalculate_lambdas", "temp_nosehoover");
  fc.unlock("precalculate_lambdas", "temp_nosehoover_chains");
  fc.unlock("precalculate_lambdas", "position_rest");
  fc.unlock("precalculate_lambdas", "position_const");
  fc.unlock("precalculate_lambdas", "position_const_scaled");
  fc.unlock("precalculate_lambdas", "distance_rest");
  fc.unlock("precalculate_lambdas", "distance_field");
  fc.unlock("precalculate_lambdas", "dihedral_rest");
  //fc.unlock("precalculate_lambdas", "dihedral_const");
  fc.unlock("precalculate_lambdas", "jvalue_rest");
  fc.unlock("precalculate_lambdas", "rdc_rest");
  fc.unlock("precalculate_lambdas", "perscale");
  fc.unlock("precalculate_lambdas", "rottrans");
  fc.unlock("precalculate_lambdas", "innerloop_method_off");
  fc.unlock("precalculate_lambdas", "innerloop_method_generic");
  fc.unlock("precalculate_lambdas", "innerloop_method_hardcode");
  fc.unlock("precalculate_lambdas", "innerloop_method_table");
  fc.unlock("precalculate_lambdas", "innerloop_method_cuda");
  fc.unlock("precalculate_lambdas", "innerloop_solvent_topology");
  fc.unlock("precalculate_lambdas", "innerloop_solvent_spc");
  fc.unlock("precalculate_lambdas", "repex_temp");
  fc.unlock("precalculate_lambdas", "repex_lambda");
//  fc.unlock("precalculate_lambdas", "multicell");
  fc.unlock("precalculate_lambdas", "analysis");
  fc.unlock("precalculate_lambdas", "no_integration");
  fc.unlock("precalculate_lambdas", "stochdyn");
  fc.unlock("precalculate_lambdas", "multistep");
  fc.unlock("precalculate_lambdas", "multistep_boost");
  fc.unlock("precalculate_lambdas", "montecarlo");
//  fc.unlock("precalculate_lambdas", "polarisation_cos");
//  fc.unlock("precalculate_lambdas", "polarisation_cos_damped");
  fc.unlock("precalculate_lambdas", "sasa");
  fc.unlock("precalculate_lambdas", "sasavol");
  fc.unlock("precalculate_lambdas", "random_gromos");
  fc.unlock("precalculate_lambdas", "random_gsl");
//  fc.unlock("precalculate_lambdas", "eds");
  fc.unlock("precalculate_lambdas", "parallel_mpi");
  fc.unlock("precalculate_lambdas", "parallel_omp");
  fc.unlock("precalculate_lambdas", "mult_energy_groups");
//  fc.unlock("precalculate_lambdas", "ewald");
//  fc.unlock("precalculate_lambdas", "p3m");
  fc.unlock("precalculate_lambdas", "leus");
  fc.unlock("precalculate_lambdas", "bsleus");
  fc.unlock("precalculate_lambdas", "xray");
//  fc.unlock("precalculate_lambdas", "force_groups");
  // ANITA

  fc.unlock("angle_rest", "solute");
  fc.unlock("angle_rest", "solvent");
  fc.unlock("angle_rest", "solvent_only");
  fc.unlock("angle_rest", "steepest_descent");
  fc.unlock("angle_rest", "solute_constraint_off");
  fc.unlock("angle_rest", "solute_shake");
  fc.unlock("angle_rest", "solute_lincs");
  fc.unlock("angle_rest", "solute_flexshake");
  fc.unlock("angle_rest", "solvent_constraint_off");
  fc.unlock("angle_rest", "solvent_shake");
  fc.unlock("angle_rest", "solvent_lincs");
  fc.unlock("angle_rest", "solvent_settle");
  fc.unlock("angle_rest", "pressure_calculation");
  fc.unlock("angle_rest", "pressure_scale_berendsen");
  fc.unlock("angle_rest", "virial_off");
  fc.unlock("angle_rest", "virial_atomic");
  fc.unlock("angle_rest", "virial_molecular");
  fc.unlock("angle_rest", "vacuum");
  fc.unlock("angle_rest", "pbc_r");
  fc.unlock("angle_rest", "pbc_c");
  fc.unlock("angle_rest", "pbc_t");
  fc.unlock("angle_rest", "perturbation");
  //fc.unlock("angle_rest", "perturbation_scaling");
  fc.unlock("angle_rest", "slow_growth");
  fc.unlock("angle_rest", "individual_lambdas");
  fc.unlock("angle_rest", "precalculate_lambdas");
  fc.unlock("angle_rest", "bond");
  fc.unlock("angle_rest", "angle");
  fc.unlock("angle_rest", "dihedral");
  fc.unlock("angle_rest", "improper");
  fc.unlock("angle_rest", "crf");
  fc.unlock("angle_rest", "lj");
  fc.unlock("angle_rest", "com_removal");
  fc.unlock("angle_rest", "rf_excluded");
  fc.unlock("angle_rest", "pairlist_standard");
  fc.unlock("angle_rest", "pairlist_grid");
  fc.unlock("angle_rest", "pairlist_gridcell");
  fc.unlock("angle_rest", "cutoff_atomic");
  fc.unlock("angle_rest", "cutoff_cg");
  fc.unlock("angle_rest", "cg_martini");
  fc.unlock("angle_rest", "cg_gromos");
  fc.unlock("angle_rest", "mixed_grain");
  fc.unlock("angle_rest", "temp_berendsen");
  fc.unlock("angle_rest", "temp_nosehoover");
  fc.unlock("angle_rest", "temp_nosehoover_chains");
  fc.unlock("angle_rest", "position_rest");
  fc.unlock("angle_rest", "position_const");
  fc.unlock("angle_rest", "position_const_scaled");
  fc.unlock("angle_rest", "distance_rest");
  fc.unlock("angle_rest", "distance_field");
  fc.unlock("angle_rest", "angle_const");
  fc.unlock("angle_rest", "dihedral_rest");
  fc.unlock("angle_rest", "dihedral_const");
  fc.unlock("angle_rest", "jvalue_rest");
  fc.unlock("angle_rest", "rdc_rest");
  fc.unlock("angle_rest", "perscale");
  fc.unlock("angle_rest", "rottrans");
  fc.unlock("angle_rest", "innerloop_method_off");
  fc.unlock("angle_rest", "innerloop_method_generic");
  fc.unlock("angle_rest", "innerloop_method_hardcode");
  fc.unlock("angle_rest", "innerloop_method_table");
  fc.unlock("angle_rest", "innerloop_method_cuda");
  fc.unlock("angle_rest", "innerloop_solvent_topology");
  fc.unlock("angle_rest", "innerloop_solvent_spc");
  fc.unlock("angle_rest", "repex_temp");
  fc.unlock("angle_rest", "repex_lambda");
  fc.unlock("angle_rest", "multicell");
  fc.unlock("angle_rest", "analysis");
  fc.unlock("angle_rest", "no_integration");
  fc.unlock("angle_rest", "stochdyn");
  fc.unlock("angle_rest", "multistep");
  fc.unlock("angle_rest", "multistep_boost");
  fc.unlock("angle_rest", "montecarlo");
  fc.unlock("angle_rest", "polarisation_cos");
  fc.unlock("angle_rest", "polarisation_cos_damped");
  fc.unlock("angle_rest", "sasa");
  fc.unlock("angle_rest", "sasavol");
  fc.unlock("angle_rest", "random_gromos");
  fc.unlock("angle_rest", "random_gsl");
  fc.unlock("angle_rest", "eds");
  fc.unlock("angle_rest", "aeds");
  fc.unlock("angle_rest", "multiaeds");
  fc.unlock("angle_rest", "parallel_mpi");
  fc.unlock("angle_rest", "parallel_omp");
  fc.unlock("angle_rest", "mult_energy_groups");
  fc.unlock("angle_rest", "ewald");
  fc.unlock("angle_rest", "p3m");
  fc.unlock("angle_rest", "leus");
  fc.unlock("angle_rest", "bsleus");
  fc.unlock("angle_rest", "xray");
  fc.unlock("angle_rest", "force_groups");
  fc.unlock("angle_const", "solute");
  fc.unlock("angle_const", "solvent");
  fc.unlock("angle_const", "solvent_only");
  fc.unlock("angle_const", "steepest_descent");
  fc.unlock("angle_const", "solute_constraint_off");
  fc.unlock("angle_const", "solute_shake");
  fc.unlock("angle_const", "solute_lincs");
  fc.unlock("angle_const", "solute_flexshake");
  fc.unlock("angle_const", "solvent_constraint_off");
  fc.unlock("angle_const", "solvent_shake");
  fc.unlock("angle_const", "solvent_lincs");
  fc.unlock("angle_const", "solvent_settle");
  fc.unlock("angle_const", "pressure_calculation");
  fc.unlock("angle_const", "pressure_scale_berendsen");
  fc.unlock("angle_const", "virial_off");
  fc.unlock("angle_const", "virial_atomic");
  fc.unlock("angle_const", "virial_molecular");
  fc.unlock("angle_const", "vacuum");
  fc.unlock("angle_const", "pbc_r");
  fc.unlock("angle_const", "pbc_c");
  fc.unlock("angle_const", "pbc_t");
  fc.unlock("angle_const", "perturbation");
  //fc.unlock("angle_const", "perturbation_scaling");
  fc.unlock("angle_const", "slow_growth");
  fc.unlock("angle_const", "individual_lambdas");
  //fc.unlock("angle_const", "precalculate_lambdas");
  fc.unlock("angle_const", "bond");
  fc.unlock("angle_const", "angle");
  fc.unlock("angle_const", "dihedral");
  fc.unlock("angle_const", "improper");
  fc.unlock("angle_const", "crf");
  fc.unlock("angle_const", "lj");
  fc.unlock("angle_const", "com_removal");
  fc.unlock("angle_const", "rf_excluded");
  fc.unlock("angle_const", "pairlist_standard");
  fc.unlock("angle_const", "pairlist_grid");
  fc.unlock("angle_const", "pairlist_gridcell");
  fc.unlock("angle_const", "cutoff_atomic");
  fc.unlock("angle_const", "cutoff_cg");
  fc.unlock("angle_const", "cg_martini");
  fc.unlock("angle_const", "cg_gromos");
  fc.unlock("angle_const", "mixed_grain");
  fc.unlock("angle_const", "temp_berendsen");
  fc.unlock("angle_const", "temp_nosehoover");
  fc.unlock("angle_const", "temp_nosehoover_chains");
  fc.unlock("angle_const", "position_rest");
  fc.unlock("angle_const", "position_const");
  fc.unlock("angle_const", "position_const_scaled");
  fc.unlock("angle_const", "distance_rest");
  fc.unlock("angle_const", "distance_field");
  fc.unlock("angle_const", "angle_rest");
  fc.unlock("angle_const", "dihedral_rest");
  fc.unlock("angle_const", "dihedral_const");
  fc.unlock("angle_const", "jvalue_rest");
  fc.unlock("angle_const", "rdc_rest");
  fc.unlock("angle_const", "perscale");
  fc.unlock("angle_const", "rottrans");
  fc.unlock("angle_const", "innerloop_method_off");
  fc.unlock("angle_const", "innerloop_method_generic");
  fc.unlock("angle_const", "innerloop_method_hardcode");
  fc.unlock("angle_const", "innerloop_method_table");
  fc.unlock("angle_const", "innerloop_method_cuda");
  fc.unlock("angle_const", "innerloop_solvent_topology");
  fc.unlock("angle_const", "innerloop_solvent_spc");
  fc.unlock("angle_const", "repex_temp");
  fc.unlock("angle_const", "repex_lambda");
  fc.unlock("angle_const", "multicell");
  fc.unlock("angle_const", "analysis");
  fc.unlock("angle_const", "no_integration");
  fc.unlock("angle_const", "stochdyn");
  fc.unlock("angle_const", "multistep");
  fc.unlock("angle_const", "multistep_boost");
  fc.unlock("angle_const", "montecarlo");
  fc.unlock("angle_const", "polarisation_cos");
  fc.unlock("angle_const", "polarisation_cos_damped");
  fc.unlock("angle_const", "sasa");
  fc.unlock("angle_const", "sasavol");
  fc.unlock("angle_const", "random_gromos");
  fc.unlock("angle_const", "random_gsl");
  fc.unlock("angle_const", "eds");
  fc.unlock("angle_const", "aeds");
  fc.unlock("angle_const", "multiaeds");
  fc.unlock("angle_const", "parallel_mpi");
  fc.unlock("angle_const", "parallel_omp");
  fc.unlock("angle_const", "mult_energy_groups");
  fc.unlock("angle_const", "ewald");
  fc.unlock("angle_const", "p3m");
  fc.unlock("angle_const", "leus");
  fc.unlock("angle_const", "bsleus");
  fc.unlock("angle_const", "xray");
  fc.unlock("angle_const", "force_groups");



  // Conjugate gradient minimisation
  fc.unlock("conjugate_gradient", "solute");
  fc.unlock("conjugate_gradient", "solvent");
  fc.unlock("conjugate_gradient", "solvent_only");
  fc.unlock("conjugate_gradient", "solute_constraint_off");
  fc.unlock("conjugate_gradient", "solute_shake");
  // fc.unlock("conjugate_gradient", "solute_lincs");
  // fc.unlock("conjugate_gradient", "solute_flexshake");
  fc.unlock("conjugate_gradient", "solvent_constraint_off");
  fc.unlock("conjugate_gradient", "solvent_shake");
  // fc.unlock("conjugate_gradient", "solvent_lincs");
  // fc.unlock("conjugate_gradient", "solvent_settle");
  fc.unlock("conjugate_gradient", "pressure_calculation");
  //fc.unlock("conjugate_gradient", "pressure_scale_berendsen");
  fc.unlock("conjugate_gradient", "virial_off");
  fc.unlock("conjugate_gradient", "virial_atomic");
  fc.unlock("conjugate_gradient", "virial_molecular");
  fc.unlock("conjugate_gradient", "vacuum");
  fc.unlock("conjugate_gradient", "pbc_r");
  fc.unlock("conjugate_gradient", "pbc_c");
  fc.unlock("conjugate_gradient", "pbc_t");
  //fc.unlock("conjugate_gradient", "perturbation");
  //fc.unlock("conjugate_gradient", "perturbation_scaling");
  //fc.unlock("conjugate_gradient", "slow_growth");
  //fc.unlock("conjugate_gradient", "individual_lambdas");
  //fc.unlock("conjugate_gradient", "precalculate_lambdas");
  fc.unlock("conjugate_gradient", "bond");
  fc.unlock("conjugate_gradient", "angle");
  fc.unlock("conjugate_gradient", "dihedral");
  fc.unlock("conjugate_gradient", "improper");
  fc.unlock("conjugate_gradient", "crf");
  fc.unlock("conjugate_gradient", "lj");
  fc.unlock("conjugate_gradient", "com_removal");
  fc.unlock("conjugate_gradient", "rf_excluded");
  fc.unlock("conjugate_gradient", "pairlist_standard");
  fc.unlock("conjugate_gradient", "pairlist_grid");
  fc.unlock("conjugate_gradient", "pairlist_gridcell");
  fc.unlock("conjugate_gradient", "cutoff_atomic");
  fc.unlock("conjugate_gradient", "cutoff_cg");
  fc.unlock("conjugate_gradient", "cg_martini");
  fc.unlock("conjugate_gradient", "cg_gromos");
  fc.unlock("conjugate_gradient", "mixed_grain");
  fc.unlock("conjugate_gradient", "temp_berendsen");
  fc.unlock("conjugate_gradient", "temp_nosehoover");
  fc.unlock("conjugate_gradient", "temp_nosehoover_chains");
  fc.unlock("conjugate_gradient", "position_rest");
  fc.unlock("conjugate_gradient", "position_const");
  fc.unlock("conjugate_gradient", "position_const_scaled");
  fc.unlock("conjugate_gradient", "distance_rest");
  fc.unlock("conjugate_gradient", "distance_field");
  fc.unlock("conjugate_gradient", "dihedral_rest");
  fc.unlock("conjugate_gradient", "dihedral_const");
  fc.unlock("conjugate_gradient", "jvalue_rest");
  fc.unlock("conjugate_gradient", "rdc_rest");
  fc.unlock("conjugate_gradient", "perscale");
  fc.unlock("conjugate_gradient", "rottrans");
  fc.unlock("conjugate_gradient", "innerloop_method_off");
  fc.unlock("conjugate_gradient", "innerloop_method_generic");
  fc.unlock("conjugate_gradient", "innerloop_method_hardcode");
  fc.unlock("conjugate_gradient", "innerloop_method_table");
  fc.unlock("conjugate_gradient", "innerloop_method_cuda");
  fc.unlock("conjugate_gradient", "innerloop_solvent_topology");
  fc.unlock("conjugate_gradient", "innerloop_solvent_spc");
  // fc.unlock("conjugate_gradient", "repex_temp");
  // fc.unlock("conjugate_gradient", "repex_lambda");
  // fc.unlock("conjugate_gradient", "multicell");
  fc.unlock("conjugate_gradient", "analysis");
  fc.unlock("conjugate_gradient", "no_integration");
  // fc.unlock("conjugate_gradient", "stochdyn");
  // fc.unlock("conjugate_gradient", "multistep");
  // fc.unlock("conjugate_gradient", "multistep_boost");
  // fc.unlock("conjugate_gradient", "montecarlo");
  fc.unlock("conjugate_gradient", "polarisation_cos");
  fc.unlock("conjugate_gradient", "polarisation_cos_damped");
  // fc.unlock("conjugate_gradient", "sasa");
  // fc.unlock("conjugate_gradient", "sasavol");
  fc.unlock("conjugate_gradient", "random_gromos");
  fc.unlock("conjugate_gradient", "random_gsl");
  // fc.unlock("conjugate_gradient", "eds");
  // fc.unlock("conjugate_gradient", "aeds");
  // fc.unlock("conjugate_gradient", "parallel_mpi");
  fc.unlock("conjugate_gradient", "parallel_omp");
  fc.unlock("conjugate_gradient", "mult_energy_groups");
  fc.unlock("conjugate_gradient", "ewald");
  fc.unlock("conjugate_gradient", "p3m");
  // fc.unlock("conjugate_gradient", "leus");
  // fc.unlock("conjugate_gradient", "bsleus");
  fc.unlock("conjugate_gradient", "xray");
  fc.unlock("conjugate_gradient", "force_groups");
  fc.unlock("conjugate_gradient", "eds");

  //amber block
  fc.unlock("amber", "conjugate_gradient");
  fc.unlock("amber", "solute");
  fc.unlock("amber", "solvent");
  fc.unlock("amber", "solvent_only");
  fc.unlock("amber", "steepest_descent");
  fc.unlock("amber", "solute_constraint_off");
  fc.unlock("amber", "solute_shake");
  fc.unlock("amber", "solute_lincs");
  fc.unlock("amber", "solute_flexshake");
  fc.unlock("amber", "solvent_constraint_off");
  fc.unlock("amber", "solvent_shake");
  fc.unlock("amber", "solvent_lincs");
  fc.unlock("amber", "solvent_settle");
  fc.unlock("amber", "pressure_calculation");
  fc.unlock("amber", "pressure_scale_berendsen");
  fc.unlock("amber", "virial_off");
  //fc.unlock("amber", "virial_atomic");
  fc.unlock("amber", "virial_molecular");
  fc.unlock("amber", "vacuum");
  fc.unlock("amber", "pbc_r");
  //fc.unlock("amber", "pbc_c");
  //fc.unlock("amber", "pbc_t");
  fc.unlock("amber", "perturbation");
  fc.unlock("amber", "perturbation_scaling");
  //fc.unlock("amber", "slow_growth");
  //fc.unlock("amber", "individual_lambdas");
  fc.unlock("amber", "precalculate_lambdas");
  fc.unlock("amber", "bond");
  fc.unlock("amber", "angle");
  fc.unlock("amber", "dihedral");
  fc.unlock("amber", "improper");
  fc.unlock("amber", "crf");
  fc.unlock("amber", "lj");
  fc.unlock("amber", "com_removal");
  fc.unlock("amber", "rf_excluded");
  fc.unlock("amber", "pairlist_standard");
  fc.unlock("amber", "pairlist_grid");
  fc.unlock("amber", "pairlist_gridcell");
  fc.unlock("amber", "cutoff_atomic");
  fc.unlock("amber", "cutoff_cg");
  //fc.unlock("amber", "cg_martini");
  //fc.unlock("amber", "cg_gromos");
  //fc.unlock("amber", "mixed_grain");
  fc.unlock("amber", "temp_berendsen");
  fc.unlock("amber", "temp_nosehoover");
  fc.unlock("amber", "temp_nosehoover_chains");
  fc.unlock("amber", "position_rest");
  fc.unlock("amber", "position_const");
  fc.unlock("amber", "position_const_scaled");
  fc.unlock("amber", "distance_rest");
  //fc.unlock("amber", "distance_field");
  fc.unlock("amber", "dihedral_rest");
  fc.unlock("amber", "dihedral_const");
  //fc.unlock("amber", "jvalue_rest");
  //fc.unlock("amber", "rdc_rest");
  //fc.unlock("amber", "perscale");
  //fc.unlock("amber", "rottrans");
  fc.unlock("amber", "innerloop_method_off");
  fc.unlock("amber", "innerloop_method_generic");
  fc.unlock("amber", "innerloop_method_hardcode");
  fc.unlock("amber", "innerloop_method_table");
  fc.unlock("amber", "innerloop_method_cuda");
  fc.unlock("amber", "innerloop_solvent_topology");
  fc.unlock("amber", "innerloop_solvent_spc");
  fc.unlock("amber", "repex_temp");
  fc.unlock("amber", "repex_lambda");
  fc.unlock("amber", "multicell");
  fc.unlock("amber", "analysis");
  fc.unlock("amber", "no_integration");
  fc.unlock("amber", "stochdyn");
  fc.unlock("amber", "multistep");
  fc.unlock("amber", "multistep_boost");
  //fc.unlock("amber", "montecarlo");
  //fc.unlock("amber", "polarisation_cos");
  //fc.unlock("amber", "polarisation_cos_damped");
  //fc.unlock("amber", "sasa");
  //fc.unlock("amber", "sasavol");
  fc.unlock("amber", "random_gromos");
  fc.unlock("amber", "random_gsl");
  fc.unlock("amber", "eds");
  fc.unlock("amber", "parallel_mpi");
  fc.unlock("amber", "parallel_omp");
  fc.unlock("amber", "mult_energy_groups");
  //fc.unlock("amber", "ewald");
  //fc.unlock("amber", "p3m");
  //fc.unlock("amber", "leus");
  //fc.unlock("amber", "bsleus");
  //fc.unlock("amber", "xray");
  //fc.unlock("amber", "force_groups");

  // QMMM
  fc.unlock("qmmm", "steepest_descent");
  fc.unlock("qmmm", "conjugate_gradient");
  fc.unlock("qmmm", "solute");
  fc.unlock("qmmm", "solvent");
  //fc.unlock("qmmm", "solvent_only"); // Not allowed
  fc.unlock("qmmm", "solute_constraint_off");
  fc.unlock("qmmm", "solute_shake");
  fc.unlock("qmmm", "solute_lincs");
  //fc.unlock("qmmm", "solute_flexshake"); // Needs Hessian, not implemented
  fc.unlock("qmmm", "solvent_constraint_off");
  fc.unlock("qmmm", "solvent_shake");
  fc.unlock("qmmm", "solvent_lincs");
  fc.unlock("qmmm", "solvent_settle");
  fc.unlock("qmmm", "pressure_calculation");
  fc.unlock("qmmm", "pressure_scale_berendsen");
  fc.unlock("qmmm", "virial_off");
  fc.unlock("qmmm", "virial_atomic");
  fc.unlock("qmmm", "virial_molecular");
  fc.unlock("qmmm", "vacuum");
  fc.unlock("qmmm", "pbc_r");
  fc.unlock("qmmm", "pbc_c");
  fc.unlock("qmmm", "pbc_t");
  fc.unlock("qmmm", "perturbation");
  //fc.unlock("qmmm", "perturbation_scaling");
  fc.unlock("qmmm", "slow_growth");
  //fc.unlock("qmmm", "individual_lambdas");
  //fc.unlock("qmmm", "precalculate_lambdas");
  fc.unlock("qmmm", "bond");
  fc.unlock("qmmm", "angle");
  fc.unlock("qmmm", "dihedral");
  fc.unlock("qmmm", "improper");
  fc.unlock("qmmm", "crf");
  fc.unlock("qmmm", "lj");
  fc.unlock("qmmm", "com_removal");
  fc.unlock("qmmm", "rf_excluded");
  fc.unlock("qmmm", "pairlist_standard");
  fc.unlock("qmmm", "pairlist_grid");
  fc.unlock("qmmm", "pairlist_gridcell");
  fc.unlock("qmmm", "cutoff_atomic");
  fc.unlock("qmmm", "cutoff_cg");
  fc.unlock("qmmm", "cg_martini");
  fc.unlock("qmmm", "cg_gromos");
  fc.unlock("qmmm", "mixed_grain");
  fc.unlock("qmmm", "temp_berendsen");
  fc.unlock("qmmm", "temp_nosehoover");
  fc.unlock("qmmm", "temp_nosehoover_chains");
  fc.unlock("qmmm", "position_rest");
  fc.unlock("qmmm", "position_const");
  fc.unlock("qmmm", "position_const_scaled");
  fc.unlock("qmmm", "distance_rest");
  fc.unlock("qmmm", "distance_field");
  fc.unlock("qmmm", "dihedral_rest");
  fc.unlock("qmmm", "dihedral_const");
  fc.unlock("qmmm", "jvalue_rest");
  fc.unlock("qmmm", "rdc_rest");
  fc.unlock("qmmm", "perscale");
  fc.unlock("qmmm", "rottrans");
  fc.unlock("qmmm", "innerloop_method_off");
  fc.unlock("qmmm", "innerloop_method_generic");
  fc.unlock("qmmm", "innerloop_method_hardcode");
  fc.unlock("qmmm", "innerloop_method_table");
  fc.unlock("qmmm", "innerloop_method_cuda");
  fc.unlock("qmmm", "innerloop_solvent_topology");
  fc.unlock("qmmm", "innerloop_solvent_spc");
  fc.unlock("qmmm", "repex_temp");
  fc.unlock("qmmm", "repex_lambda");
  //fc.unlock("qmmm", "multicell");
  fc.unlock("qmmm", "analysis");
  fc.unlock("qmmm", "no_integration");
  fc.unlock("qmmm", "stochdyn");
  fc.unlock("qmmm", "multistep");
  fc.unlock("qmmm", "multistep_boost");
  fc.unlock("qmmm", "montecarlo");
  fc.unlock("qmmm", "polarisation_cos");
  fc.unlock("qmmm", "polarisation_cos_damped");
  fc.unlock("qmmm", "sasa");
  fc.unlock("qmmm", "sasavol");
  fc.unlock("qmmm", "random_gromos");
  fc.unlock("qmmm", "random_gsl");
  //fc.unlock("qmmm", "eds");
  //fc.unlock("qmmm", "aeds");
  fc.unlock("qmmm", "parallel_mpi");
  fc.unlock("qmmm", "parallel_omp");
  fc.unlock("qmmm", "mult_energy_groups");
  //fc.unlock("qmmm", "ewald");
  //fc.unlock("qmmm", "p3m");
  fc.unlock("qmmm", "leus");
  fc.unlock("qmmm", "bsleus");
  fc.unlock("qmmm", "xray");
  //fc.unlock("qmmm", "force_groups");
  fc.unlock("qmmm", "amber");

  // VIRTUALATOMS
  fc.unlock("virtualatoms", "steepest_descent");
  fc.unlock("virtualatoms", "conjugate_gradient");
  fc.unlock("virtualatoms", "solute");
  fc.unlock("virtualatoms", "solvent");
  //fc.unlock("virtualatoms", "solvent_only"); // Not allowed
  fc.unlock("virtualatoms", "solute_constraint_off");
  fc.unlock("virtualatoms", "solute_shake");
  fc.unlock("virtualatoms", "solute_lincs");
  //fc.unlock("virtualatoms", "solute_flexshake"); // Needs Hessian, not implemented
  fc.unlock("virtualatoms", "solvent_constraint_off");
  fc.unlock("virtualatoms", "solvent_shake");
  fc.unlock("virtualatoms", "solvent_lincs");
  fc.unlock("virtualatoms", "solvent_settle");
  fc.unlock("virtualatoms", "pressure_calculation");
  fc.unlock("virtualatoms", "pressure_scale_berendsen");
  fc.unlock("virtualatoms", "virial_off");
  fc.unlock("virtualatoms", "virial_atomic");
  fc.unlock("virtualatoms", "virial_molecular");
  fc.unlock("virtualatoms", "vacuum");
  fc.unlock("virtualatoms", "pbc_r");
  fc.unlock("virtualatoms", "pbc_c");
  fc.unlock("virtualatoms", "pbc_t");
  fc.unlock("virtualatoms", "perturbation");
  fc.unlock("virtualatoms", "perturbation_scaling");
  fc.unlock("virtualatoms", "slow_growth");
  fc.unlock("virtualatoms", "individual_lambdas");
  fc.unlock("virtualatoms", "precalculate_lambdas");
  fc.unlock("virtualatoms", "bond");
  fc.unlock("virtualatoms", "angle");
  fc.unlock("virtualatoms", "dihedral");
  fc.unlock("virtualatoms", "improper");
  fc.unlock("virtualatoms", "crf");
  fc.unlock("virtualatoms", "lj");
  fc.unlock("virtualatoms", "com_removal");
  fc.unlock("virtualatoms", "rf_excluded");
  fc.unlock("virtualatoms", "pairlist_standard");
  fc.unlock("virtualatoms", "pairlist_grid");
  fc.unlock("virtualatoms", "pairlist_gridcell");
  fc.unlock("virtualatoms", "cutoff_atomic");
  fc.unlock("virtualatoms", "cutoff_cg");
  fc.unlock("virtualatoms", "cg_martini");
  fc.unlock("virtualatoms", "cg_gromos");
  fc.unlock("virtualatoms", "mixed_grain");
  fc.unlock("virtualatoms", "temp_berendsen");
  fc.unlock("virtualatoms", "temp_nosehoover");
  fc.unlock("virtualatoms", "temp_nosehoover_chains");
  fc.unlock("virtualatoms", "position_rest");
  fc.unlock("virtualatoms", "position_const");
  fc.unlock("virtualatoms", "position_const_scaled");
  fc.unlock("virtualatoms", "distance_rest");
  fc.unlock("virtualatoms", "distance_field");
  fc.unlock("virtualatoms", "dihedral_rest");
  fc.unlock("virtualatoms", "dihedral_const");
  fc.unlock("virtualatoms", "jvalue_rest");
  fc.unlock("virtualatoms", "rdc_rest");
  fc.unlock("virtualatoms", "perscale");
  fc.unlock("virtualatoms", "rottrans");
  fc.unlock("virtualatoms", "innerloop_method_off");
  fc.unlock("virtualatoms", "innerloop_method_generic");
  fc.unlock("virtualatoms", "innerloop_method_hardcode");
  fc.unlock("virtualatoms", "innerloop_method_table");
  fc.unlock("virtualatoms", "innerloop_method_cuda");
  fc.unlock("virtualatoms", "innerloop_solvent_topology");
  fc.unlock("virtualatoms", "innerloop_solvent_spc");
  fc.unlock("virtualatoms", "repex_temp");
  fc.unlock("virtualatoms", "repex_lambda");
  fc.unlock("virtualatoms", "multicell");
  fc.unlock("virtualatoms", "analysis");
  fc.unlock("virtualatoms", "no_integration");
  fc.unlock("virtualatoms", "stochdyn");
  fc.unlock("virtualatoms", "multistep");
  fc.unlock("virtualatoms", "multistep_boost");
  //fc.unlock("virtualatoms", "montecarlo");
  //fc.unlock("virtualatoms", "polarisation_cos");
  //fc.unlock("virtualatoms", "polarisation_cos_damped");
  //fc.unlock("virtualatoms", "sasa");
  //fc.unlock("virtualatoms", "sasavol");
  fc.unlock("virtualatoms", "random_gromos");
  fc.unlock("virtualatoms", "random_gsl");
  fc.unlock("virtualatoms", "eds");
  fc.unlock("virtualatoms", "aeds");
  fc.unlock("virtualatoms", "multiaeds");
  fc.unlock("virtualatoms", "parallel_mpi");
  fc.unlock("virtualatoms", "parallel_omp");
  fc.unlock("virtualatoms", "mult_energy_groups");
  fc.unlock("virtualatoms", "ewald");
  fc.unlock("virtualatoms", "p3m");
  fc.unlock("virtualatoms", "leus");
  fc.unlock("virtualatoms", "bsleus");
  fc.unlock("virtualatoms", "xray");
  fc.unlock("virtualatoms", "force_groups");
  //fc.unlock("virtualatoms", "qmmm");
  if (fc.check()) 
    return 0;

  return -1;
}
