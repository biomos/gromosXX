MD++ INSTALLATION INSTRUCTIONS
==================================
(also see Volume 8 of the GROMOS manuals)

necessary compilation tools
***************************

	ANSI C++ compatible compiler
	(g++ >= 3.0; tested for gcc version up to 9.3)
	(Intel C++ Compiler; tested with version 8.1)

Required libraries
******************

	GNU Scientific Library GSL (required)
	-----------------------------------------------------------

	http://www.gnu.org/software/gsl/
	compilation has been checked with version 2.6. or lower

	if the GSL is installed to the default location ./configure
	will usually be able to find it.
	Otherwise, when running configure in steps A 5. oder B 4. below, 
        set the compilation flags accordingly:

	e.g. ../configure --with-gsl=/path/to/gsl


	FFTW Fast Fourier Transform Library (version > 3!)
	--------------------------------------------------

	if the fftw3 installation directory is not in your standard search
	path for header files and libraries, you can use
	../configure --with-fftw=/path/to/fftw3

	for MPI you also need the fftw3-mpi library which you have to
	compile with the same MPI wrapper. 

Case 1[automake]: To compile and install the unconfigured source tree from git with automake
*********************************************************************************************

	prerequisites:
		GNU autotools:
		    autoconf (GNU Autoconf) 2.58 or newer
		    libtoolize (GNU libtool) 1.5 or newer
		    automake (GNU automake) 1.7.9 or newer

	1. ./Config.sh
	2. mkdir BUILD
	3. cd BUILD
	4. ../configure
	5. make
	6. make check
        7. make install

	Info:
	  .) ./Config.sh is a wrapper of the following commands:
		    1. mkdir -p config
 		    2. aclocal
		    3. libtoolize --copy
		    4. autoconf
		    5. autoheader
		    6. automake --add-missing --copy
	  .) See ./configure --help for options.
	  .) Steps 6 and 7 are optional. Step 7 will place the programs in 
             BUILD/bin, or in the directory specified by --prefix in step 5.
	  .) If you leave out step 7, the programs will be in BUILD/program/.
	  .) You may choose any other name for the BUILD directory or do 
             multiple builds by choosing different directory names by repeating 
             from step 2.
          .) To compile parallel code with either openMP or MPI, the 
             appropriate options should be given in step 4
             (see volume 8 of the GROMOS manuals)
          .) To compile the code with GPU acceleration for the solvent-solvent
             interactions, use --with-cuda=<path-to-cuda-libraries>
             (see volume 8 of the GROMOS manuals). See sections above for the
             use of nvcc compiler flags.


optimization flags
--------------------------------------------------

        most optimization flags for GNU C++ and Intel C++ compiler are
	set automatically. If you want to set additional flags you can
	set CXXFLAGS or LDFLAGS accordingly.


Intel C++ Compiler
--------------------------------------------------

	make sure the bin directory of the Intel C++
	compiler is added to your path and the
	lib directory to the library search path.

	export CC=icpc
	export CXX=icc
	export LD=xild
	export AR=xiar

        Note that GSL has to be compiled with the same compiler


building static-only executables
--------------------------------------------------

	use the following configure options:
	configure --disable-shared --enable-static --enable-allstatic


ARCHITECTURE DEPENDENT DETAILS
******************************

	MacOS X (tested on V 10.3.3 Panther):
	------------------------------------

	Panther ships with the so-called developertools
	(http://www.apple.com/macosx/developertools/),
	which include a port of the gcc 3.3. The developertools 
	might not be installed by default though, so you should 
	make sure that this is the case (e.g. type: 'which gcc'; 
	if you dont get an answer it is not installed).

	Unfortunately, the MacOS version of the libtoolize program (and others)
        does sometimes not work with things you download from GNU and try to
	compile.

	Try first, whether there is a glibtoolize, gaclocal, gautomake,
	gautoconf. Use those if they are available.


	Therefore, do this:

	1. Download the GNU autoconf, automake and libtool packages
	   and install them. By default they will be put under /usr/local
	   which is just fine.
	   (As an alternative you might just want to install the binary
	   packages from FINK (http://fink.sourceforge.net/), 
	   i.e. the port of the Debian APT package tools.
	   You will need to have FINK installed, though).
	2. Set the path to point to /usr/local/bin so that those versions
	   of automake/autoconf/libtool will be used.
	3. Build the distribution as written above.
	4. In case of linking errors when using the gcc port from Apple
	   build the distribution without support for shared libraries
	   (./configure --enable-shared=NO)
   	   If you really need shared library support, it is possible to
   	   first compile and install the regular GCC from the GNU tarball
   	   and use that one to compile gromos++. This has been tested and
   	   works.

===========================================================================


if something does not work
--------------------------------------------------

	check the version number of the autotools:
	(in brackets the versions known to work)

	autoconf --version [autoconf (GNU Autoconf) 2.58]
	automake --version [automake (GNU automake) 1.7.9]
	libtoolize --version [libtoolize (GNU libtool) 1.5]
	GNU make --version [GNU Make version 3.79]

	OR: file a bug-report
===========================================================================

	Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
	2006, 2007 Free Software Foundation, Inc.

	This file is free documentation; the Free Software Foundation gives
	unlimited permission to copy, distribute and modify it.

Additional installation and deinstallation tips
***********************************************

	Briefly, the shell commands `./configure; make; make install' should
	configure, build, and install this package.  The following
	more-detailed instructions are generic; see the `README' file for
	instructions specific to this package.

	The `configure' shell script attempts to guess correct values for
	various system-dependent variables used during compilation.  It uses
	those values to create a `Makefile' in each directory of the package.
	It may also create one or more `.h' files containing system-dependent
	definitions.  Finally, it creates a shell script `config.status' that
	you can run in the future to recreate the current configuration, and a
	file `config.log' containing compiler output (useful mainly for
	debugging `configure').

	It can also use an optional file (typically called `config.cache'
	and enabled with `--cache-file=config.cache' or simply `-C') that saves
	the results of its tests to speed up reconfiguring.  Caching is
	disabled by default to prevent problems with accidental use of stale
	cache files.

	If you need to do unusual things to compile the package, please try
	to figure out how `configure' could check whether to do them, and mail
	diffs or instructions to the address given in the `README' so they can
	be considered for the next release.  If you are using the cache, and at
	some point `config.cache' contains results you don't want to keep, you
	may remove or edit it.

	The file `configure.ac' (or `configure.in') is used to create
	`configure' by a program called `autoconf'.  You need `configure.ac' if
	you want to change it or regenerate `configure' using a newer version
	of `autoconf'.

	The simplest way to compile this package is:

	  1. `cd' to the directory containing the package's source code and type
	     `./configure' to configure the package for your system.

     	     Running `configure' might take a while.  While running, it prints
     	     some messages telling which features it is checking for.

	  2. Type `make' to compile the package.

  	  3. Optionally, type `make check' to run any self-tests that come with
     	     the package.

  	  4. Type `make install' to install the programs and any data files and
     	     documentation.

	  5. You can remove the program binaries and object files from the
	     source code directory by typing `make clean'.  To also remove the
     	     files that `configure' created (so you can compile the package for
     	     a different kind of computer), type `make distclean'.  There is
     	     also a `make maintainer-clean' target, but that is intended mainly
     	     for the package's developers.  If you use it, you may have to get
     	     all sorts of other programs in order to regenerate files that came
     	     with the distribution.

  	  6. Often, you can also type `make uninstall' to remove the installed
     	     files again.


Compiling For Multiple Architectures
====================================

	You can compile the package for more than one kind of computer at the
	same time, by placing the object files for each architecture in their
	own directory.  To do this, you can use GNU `make'.  `cd' to the
	directory where you want the object files and executables to go and run
	the `configure' script.  `configure' automatically checks for the
	source code in the directory that `configure' is in and in `..'.

 	With a non-GNU `make', it is safer to compile the package for one
	architecture at a time in the source code directory.  After you have
	installed the package for one architecture, use `make distclean' before
	reconfiguring for another architecture.

	Installation Names
	==================

	By default, `make install' installs the package's commands under
	`/usr/local/bin', include files under `/usr/local/include', etc.  You
	can specify an installation prefix other than `/usr/local' by giving
	`configure' the option `--prefix=PREFIX'.

	You can specify separate installation prefixes for
	architecture-specific files and architecture-independent files.  If you
	pass the option `--exec-prefix=PREFIX' to `configure', the package uses
	PREFIX as the prefix for installing programs and libraries.
	Documentation and other data files still use the regular prefix.

	In addition, if you use an unusual directory layout you can give
	options like `--bindir=DIR' to specify different values for particular
	kinds of files.  Run `configure --help' for a list of the directories
	you can set and what kinds of files go in them.

	If the package supports it, you can cause programs to be installed
	with an extra prefix or suffix on their names by giving `configure' the
	option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

	Some packages pay attention to `--enable-FEATURE' options to
	`configure', where FEATURE indicates an optional part of the package.
	They may also pay attention to `--with-PACKAGE' options, where PACKAGE
	is something like `gnu-as' or `x' (for the X Window System).  The
	`README' should mention any `--enable-' and `--with-' options that the
	package recognizes.

	For packages that use the X Window System, `configure' can usually
	find the X include and library files automatically, but if it doesn't,
	you can use the `configure' options `--x-includes=DIR' and
	`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

	There may be some features `configure' cannot figure out automatically,
	but needs to determine by the type of machine the package will run on.
	Usually, assuming the package is built to be run on the _same_
	architectures, `configure' can figure that out, but if it prints a
	message saying it cannot guess the machine type, give it the
	`--builda=TYPE' option.  TYPE can either be a short name for the system
	type, such as `sun4', or a canonical name which has the form:

        CPU-COMPANY-SYSTEM

	where SYSTEM can have one of these forms:

        OS KERNEL-OS

	See the file `config.sub' for the possible values of each field.  If
	`config.sub' isn't included in this package, then this package doesn't
	need to know the machine type.

	If you are _building_ compiler tools for cross-compiling, you should
	use the option `--target=TYPE' to select the type of system they will
	produce code for.

	If you want to _use_ a cross compiler, that generates code for a
	platform different from the build platform, you should specify the
	"host" platform (i.e., that on which the generated programs will
	eventually be run) with `--host=TYPE'.

Sharing Defaults
================

	If you want to set default values for `configure' scripts to share, you
	can create a site shell script called `config.site' that gives default
	values for variables like `CC', `cache_file', and `prefix'.
	`configure' looks for `PREFIX/share/config.site' if it exists, then
	`PREFIX/etc/config.site' if it exists.  Or, you can set the
	`CONFIG_SITE' environment variable to the location of the site script.
	A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

	Variables not defined in a site shell script can be set in the
	environment passed to `configure'.  However, some packages may run
	configure again during the build, and the customized values of these
	variables may be lost.  In order to avoid this problem, you should set
	them in the `configure' command line, using `VAR=value'.  For example:

     	./configure CC=/usr/local2/bin/gcc

	causes the specified `gcc' to be used as the C compiler (unless it is
	overridden in the site shell script).

	Unfortunately, this technique does not work for `CONFIG_SHELL' due to
	an Autoconf bug.  Until the bug is fixed you can use this workaround:

     	CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

	`configure' recognizes the following options to control how it operates.

	`--help'
	`-h'
	Print a summary of the options to `configure', and exit.

	`--version'
	`-V'
     	Print the version of Autoconf used to generate the `configure'
     	script, and exit.

	`--cache-file=FILE'
     	Enable the cache: use and save the results of the tests in FILE,
     	traditionally `config.cache'.  FILE defaults to `/dev/null' to
     	disable caching.

	`--config-cache'
	`-C'
     	Alias for `--cache-file=config.cache'.

	`--quiet'
	`--silent'
	`-q'
     	Do not print messages saying which checks are being made.  To
     	suppress all normal output, redirect it to `/dev/null' (any error
     	messages will still be shown).

	`--srcdir=DIR'
     	Look for the package's source code in directory DIR.  Usually
     	`configure' can determine that directory automatically.

	`configure' also accepts some other, not widely useful, options.  Run
	`configure --help' for more details.

